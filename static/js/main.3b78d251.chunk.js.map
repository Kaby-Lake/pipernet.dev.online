{"version":3,"sources":["components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","images/logo.png","state/PreferencesStore.ts","state/GraphStore.ts","state/ImportStore.ts","state/ProjectStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/CssStore.ts","state/GraphDelegate.ts","state/index.ts","constants/index.ts","components/Navbar.jsx","components/utils/Collapsable.jsx","components/dialogs/ImportCSVDialog.jsx","components/dialogs/ImportGEXFDialog.jsx","components/dialogs/ExportDialog.jsx","components/utils/DataSheetDialogWrapper.tsx","components/utils/InputFormUtils.ts","components/utils/NodeAdder.tsx","components/dialogs/NodeDataSheetDialog.tsx","components/utils/NodeChooser.tsx","components/dialogs/EdgeDataSheetDialog.tsx","components/Dialogs.jsx","components/visualize/visualizer.tsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/GlobalPanel.jsx","components/panels/NodesPanel.jsx","components/ComponentRef.tsx","components/panels/NodeDetailPanel.tsx","components/panels/MultiDetailPanel.tsx","components/panels/SearchPanel.tsx","components/panels/RightClickNodePanel.tsx","components/FloatingCards.jsx","App.js","reportWebVitals.js","index.js"],"names":["item","handleClick","isActive","className","Classes","ACTIVE","onClick","text","items","onSelect","value","fill","itemRenderer","CommonItemRenderer","filterable","onItemSelect","FILL","PreferencesStore","rightClickNodePanelOpen","rightClickPositionX","rightClickPositionY","preferenceDialogOpen","darkMode","statisticsDialogOpen","helpDialogOpen","neighborDialogOpen","nodeDataSheetDialogOpen","edgeDataSheetDialogOpen","isRenderOptionsCardHidden","view","makeAutoObservable","this","GraphStore","rawGraph","Graph","allowSelfLoops","multi","type","selectedNodes","currentlyHoveredId","metadata","snapshotName","String","nodeProperties","node","attributes","_options","show","visualize","id","name","val","isClusterNode","_visualize","source","target","isClusterLink","_rawGraph","forEachNode","decorateRawNode","forEachEdge","edge","decorateRawEdge","key","originalOptions","getNodeAttribute","newOptions","setNodeAttribute","order","size","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importCSVDialogOpen","importSamplesDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","cluster","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","result","replace","parse","comment","trim","auto_parse","skip_empty_lines","undefined","err","Toaster","create","position","Position","TOP","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","graph","readNodeCSV","forEach","addNode","toString","readEdgeCSV","hasNode","addEdge","Object","keys","clusterProperties","edgeProperties","readGEXF","entries","getNodeAttributes","nodes","push","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","length","join","console","log","it","onerror","error","action","window","location","reload","nodeFileConfig","ProjectStore","currentSnapshotName","exportDialogOpen","renameSnapshotDialogOpen","SearchStore","isPreviewing","searchStr","observable","ref","list","searchStrIgnoreCase","toLocaleLowerCase","match","searchId","includes","searchQuery","searchAttr","searchValue","hasOwnProperty","ClusterStore","clusterBy","attribute","keyValueMap","Map","set","Array","from","Set","keyAttribute","values","attributeKeysMap","getAttributeValues","get","colors","randomcolor","seed","count","THREE","x","y","z","CssStore","colorBy","color","scale","to","sizeBy","min","max","labelBy","shape","labelSize","labelLength","edges","enableDegree","enableDensity","enableDiameter","enableCoefficient","enableComponent","GraphDelegate","graphDelegateMethods","threeScene","nodeVisibility","nodeObject","linkVisibility","lastObject3D","_graphDelegateMethods","scene","newGraph","State","decorateRawGraph","addInvisibleClusterNode","tempGraph","links","oldGraph","graphCopy","copy","names","index","clusterID","attributeKeys","remove","convexHullObjects","add","newMap","attributePoints","convexHull","ConvexGeometry","createMesh","geom","meshMaterial","attributeColor","transparent","opacity","side","wireFrameMat","wireframe","SceneUtils","createMultiMaterialObject","nodeId","distRatio","Math","hypot","cameraPosition","AppState","preferences","graphDelegate","import","search","project","css","_instance","instance","privateConstructor","autorun","renderImportEdgePreview","renderImportNodePreview","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","observer","classnames","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","title","src","logo","width","height","NAVBAR_HEADING","icon","BOTTOM","BUTTON","MINIMAL","ALIGN_RIGHT","SimpleSelect","NAVBAR_DIVIDER","disabled","dialogOpen","open","React","Component","isOpen","onToggle","children","elevation","Elevation","LARGE","rightIcon","PreviewTable","props","renderWrapper","numRows","selectedRegions","indexOf","rows","cols","cellRenderer","i","canImport","state","available","renderNodesSelection","Collapsable","nodesOpen","setState","CONTROL_GROUP","INPUT_GROUP","onInputChange","event","files","label","checked","onChange","renderEdgesSelection","edgesOpen","loading","newDelimiter","style","minWidth","DARK","onClose","DIALOG_BODY","targetValue","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","DISABLED","PRIMARY","importGraphFromCSV","then","res","fileIsSelect","importGraphFromGEXF","renderImportButton","ready","write","headers","exportData","export","data","_id","interactive","ONE","minimal","computeGEXFFile","filename","computeNodeFile","header","separator","computeEdgeFile","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","for","onOpened","setTimeout","renderTable","handleStringChange","handler","stringifyNodeDetail","parseNumberOrString","numberVal","Number","isNaN","newNodeId","canImportTag","renderAttributesForm","asyncControl","placeholder","newValue","componentDidMount","prop","labelInfo","autoFocus","rightElement","onAdded","GraphNodeTable","filterQuery","addNodeDialogOpen","deleteAlertOpen","nodeToDelete","showRenderer","rowIndex","filteredTable","hideNode","showNode","forceUpdate","renderCell","columnIndex","cell","newVal","setValue","onConfirm","renderColumns","filter","element","addNodeDialog","deleteNodeRenderer","deleteNodeAlert","cancelButtonText","confirmButtonText","onCancel","dropNode","textAlign","newTable","leftIcon","defaultRowHeight","SUCCESS","select","labelFor","itemPredicate","query","noResults","GraphEdgeTable","addEdgeDialogOpen","edgeToDelete","chosenSource","chosenTarget","deleteEdgeRenderer","deleteEdgeAlert","dropEdge","addEdgeDialog","hasEdge","renderMode","RenderMode","NONE","Dialogs","display","graphRef","createRef","nodeHover","previousNode","getNodeId","nodeSelect","ctrlKey","shiftKey","splice","graphMethods","refresh","nodeRightClick","renderGraph","graphData","visualizationGraph","nodeResolution","onNodeDragEnd","fx","fy","fz","onBackgroundRightClick","onEngineTick","clusterDelegation","nodeColor","onNodeClick","onNodeRightClick","onBackgroundClick","onNodeHover","makeObservable","computed","current","mountDelegateMethods","timeOutRef","sizeOptionOpen","thicknessOptionOpen","colorOptionOpen","CARD","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","RIGHT","backgroundImage","backgroundColor","hex","frame","hideAllLabels","showAllLabels","marginLeft","hideSelectedLabels","showSelectedLabels","stepSize","initialValue","labelStepSize","shapeOptionOpen","labelOptionOpen","SwitchCollapsable","marginTop","x1","y1","x2","y2","stopColor","stopOpacity","offset","pluralize","getRenderedNodes","ComponentRef","nodeDetail","multiNodeDetail","reaction","cellRenderer_property","cellRenderer_value","formatLongFloat","nodeAttributeValue","num","parseFloat","toPrecision","enableRowHeader","renderSearchResults","candidates","onMouseOver","cameraFocusOn","large","onMouseLeave","stylePosition","top","left","ELEVATION_1","RenderOptionsCard","animate","panel","Expander","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","ELEVATION_2","paddingTop","paddingRight","paddingBottom","MultiDetailPanel","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b78d251.chunk.js","sourcesContent":["import React from \"react\";\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\n\nexport default (item, { handleClick, isActive }) => (\n    <MenuItem\n        className={isActive ? Classes.ACTIVE : \"\"}\n        key={item}\n        onClick={handleClick}\n        text={item}\n    />\n);\n","import React from \"react\";\nimport { Button, Classes } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/labs\";\nimport CommonItemRenderer from \"./CommonItemRenderer\";\n\nexport default ({ items, onSelect, value, fill = false }) => (\n    <Select\n        items={items}\n        itemRenderer={CommonItemRenderer}\n        filterable={false}\n        onItemSelect={onSelect}\n    >\n        <Button className={fill ? Classes.FILL : null} text={value} />\n    </Select>\n);\n","export default __webpack_public_path__ + \"static/media/logo.25a51149.png\";","import { makeAutoObservable } from \"mobx\";\n\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    rightClickNodePanelOpen = false;\n    rightClickPositionX = 30;\n    rightClickPositionY = 30;\n\n    preferenceDialogOpen = false;\n\n    darkMode = true;\n\n    statisticsDialogOpen = false;\n    helpDialogOpen = false;\n    neighborDialogOpen = false;\n\n    nodeDataSheetDialogOpen = false;\n    edgeDataSheetDialogOpen = false;\n\n    isRenderOptionsCardHidden = true;\n\n    view = \"3D\";\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { CustomNodeObject, CustomLinkObject } from \"./GraphDelegate\";\nimport { Attributes } from \"graphology-types\";\n\n/**\n * the hidden options inside a node\n * will be mounted as a attribute named as [_options] inside every node\n *\n * @export\n * @interface IHiddenOptions\n */\nexport interface IHiddenOptions {\n    show: boolean;\n}\n\n/**\n * the class to store a raw graph as well as the related information\n \n * @export\n * @class GraphStore\n */\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * the graphology data structure to store a graph.\n     * has a lot of APIs to manipulate as well as iterate through the graph\n     *\n     * @see graphology\n     *\n     * @type {Graph}\n     * @memberof GraphStore\n     */\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: true,\n        multi: false,\n        type: \"undirected\",\n    });\n\n    decorateRawNode(node: string, attributes: Attributes) {\n        // add _options and _visualize to attributes\n        let options: IHiddenOptions = {\n            show: true,\n        };\n        attributes._options = options;\n\n        let visualize: CustomNodeObject = {\n            id: node,\n            name: node,\n            val: 1, // to be changed, to represent the size of the node\n            isClusterNode: false, // if is clusterNode, then the front-end will ignore this node\n        };\n        attributes._visualize = visualize;\n    }\n\n    decorateRawEdge(source: string, target: string, attributes: Attributes) {\n        let visualize: CustomLinkObject = {\n            source: source,\n            target: target,\n            isClusterLink: false, // if is clusterLink, then the front-end will ignore this link\n        };\n        attributes._visualize = visualize;\n    }\n\n    /**\n     * should be called on every graph import\n     * add the _options and _visualize to every nodes inside the specified graph\n     * as well as the _visualize to every links inside the specified graph\n     *\n     * the _options is for the visualizing configs: such as the show or hide of a node\n     * the _visualize is for storing the object to be send to front-end to render the graph\n     *\n     * @param {Graph} _rawGraph\n     * @return {*}  {Graph}\n     * @memberof GraphStore\n     */\n    decorateRawGraph(_rawGraph: Graph): Graph {\n        _rawGraph.forEachNode((node, attributes) =>\n            this.decorateRawNode(node, attributes)\n        );\n\n        _rawGraph.forEachEdge((edge, attributes, source, target) =>\n            this.decorateRawEdge(source, target, attributes)\n        );\n        return _rawGraph;\n    }\n\n    /**\n     * hide the node specified by node id\n     *\n     * @param {string} key\n     * @memberof GraphStore\n     */\n    public hideNode(key: string) {\n        let originalOptions: IHiddenOptions = this.rawGraph.getNodeAttribute(\n            key,\n            \"_options\"\n        );\n        let newOptions: IHiddenOptions = {\n            ...originalOptions,\n            show: false,\n        };\n        this.rawGraph.setNodeAttribute(key, \"_options\", newOptions);\n    }\n\n    /**\n     * hide the node specified by node id\n     *\n     * @param {string} key\n     * @memberof GraphStore\n     */\n    public showNode(key: string) {\n        let originalOptions: IHiddenOptions = this.rawGraph.getNodeAttribute(\n            key,\n            \"_options\"\n        );\n        let newOptions: IHiddenOptions = {\n            ...originalOptions,\n            show: true,\n        };\n        this.rawGraph.setNodeAttribute(key, \"_options\", newOptions);\n    }\n\n    /**\n     * the currently selected node ids\n     * the singleNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string[]}\n     * @memberof GraphStore\n     */\n    selectedNodes: string[] = [];\n\n    /**\n     * the currently hovered node id\n     * the multiNodeDetailPanel will render and refresh if this changes\n     *\n     * @memberof GraphStore\n     */\n\n    currentlyHoveredId: string = \"undefined\";\n\n    /**\n     * if currently there is a graph in the dataset\n     *\n     * @readonly\n     * @memberof GraphStore\n     */\n    get hasGraph() {\n        return this.rawGraph.order && this.rawGraph.size != 0;\n    }\n\n    /**\n     * the metadata related to the raw graph\n     * should be updated if a new graph is imported\n     *\n     * @memberof GraphStore\n     */\n    metadata = {\n        snapshotName: String,\n\n        // attributes of nodes in imported graph\n        nodeProperties: [] as string[],\n    };\n}\n","import { Toaster, Position, Intent } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\n\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    importCSVDialogOpen = false;\n    importSamplesDialogOpen = false;\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n                cluster: \"Unknown\",\n            },\n            delimiter: \",\",\n        },\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        },\n    };\n\n    /**\n     * read the CSV file specified by fileObject, with options defined by other paras\n     * and return a list of objects containing the key-value pair of attribute-value\n     *\n     * @param {File} fileObject\n     * @param {boolean} hasHeader\n     * @param {string} delimiter\n     * @return {*}  {Promise<Object[]>}\n     * where Object is of { attribute: number | string, anotherAttribute: number | string, ... } type\n     * @memberof ImportStore\n     */\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    /**\n     * parse the graph from import GEXF file specified in selectedGEXFFileFromInput\n     * and return a Graph object\n     *\n     * @private\n     * @return {*}  {Promise<Graph>}\n     * @memberof ImportStore\n     */\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, <string>reader.result));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    /**\n     * will create a Graph structure to store the nodes and edges in the imported File\n     * should handle whether or not have the NodeFile, whether or not have the header of each file\n     * if successfully imported, change the .isReady to be true\n     *\n     * @return {*}\n     * @memberof ImportStore\n     */\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: true,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            tempNodes = await this.readNodeCSV();\n            tempNodes.forEach((node) => {\n                graph.addNode(\n                    node[config.nodeFile.mapping.id].toString(),\n                    node\n                );\n            });\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, { id: fromId });\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, { id: toId });\n            }\n            graph.addEdge(fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n                clusterProperties: config.hasNodeFile\n                    ? null\n                    : config.nodeFile.mapping.cluster,\n                edgeProperties: [\"source_id\", \"target_id\"],\n            },\n        };\n    }\n\n    //TODO:import 里的id和cluster， source target还没设置\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n\n        for (const [key, value] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n                clusterProperties: null,\n                edgeProperties: [\"source_id\", \"target_id\"],\n            },\n        };\n    }\n\n    // TODO:\n    public renderImportGEXFPreview(): void {}\n\n    /**\n     * change the importConfig.edgeFile.topN to be the top 10 parsed elements in the input edge file\n     * change the importConfig.edgeFile.columns to be the attributes of the imported edge file\n     * set the .mapping.fromId and .mapping.toId to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedEdgeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     * @memberof ImportStore\n     */\n    public async renderImportEdgePreview() {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = <string>reader.result;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter: delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter: delimiter,\n                          });\n                    edgeFileConfig.topN = it;\n                    edgeFileConfig.columns = <any>(\n                        Object.keys(it[0]).map((key) => `${key}`)\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (edgeFileConfig.columns.length >= 2) {\n                        edgeFileConfig.mapping.fromId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                        edgeFileConfig.isReady = true;\n                    } else if (edgeFileConfig.columns.length == 1) {\n                        edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        edgeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n\n    /**\n     * change the importConfig.nodeFile.topN to be the top 10 parsed elements in the input node file\n     * change the importConfig.nodeFile.columns to be the attributes of the imported node file\n     * set the .mapping.id .mapping.cluster to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedNodeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     * @memberof ImportStore\n     */\n    public async renderImportNodePreview() {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = <string>reader.result;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter,\n                          });\n                    nodeFileConfig.topN = it;\n                    nodeFileConfig.columns = <any>(\n                        Object.keys(it[0]).map((key) => `${key}`)\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (nodeFileConfig.columns.length >= 2) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                        nodeFileConfig.mapping.cluster =\n                            nodeFileConfig.columns[1];\n                        nodeFileConfig.isReady = true;\n                    } else if (nodeFileConfig.columns.length == 1) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.mapping.cluster =\n                            nodeFileConfig.columns[0];\n                        nodeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        nodeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class ProjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    currentSnapshotName = \"Untitled\";\n\n    exportDialogOpen = false;\n    renameSnapshotDialogOpen = false;\n}\n","import Graph from \"graphology\";\nimport { makeAutoObservable, observable } from \"mobx\";\n\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n\n    // if is previewing, ignore all mouse hovers detected by NodeDetailPanel because it is showing the detail of selected node\n    isPreviewing = false;\n\n    // can use defined regex\n    // id:123\n    // attr:color:red\n    searchStr = \"\";\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     * @memberof ClusterStore\n     */\n    rawGraph!: Graph;\n\n    // contains node ids\n    get candidates(): string[] {\n        let list: string[] = [];\n        let searchStrIgnoreCase = this.searchStr.toLocaleLowerCase();\n        if (searchStrIgnoreCase.match(/^id:.+/g)) {\n            const searchId = searchStrIgnoreCase.split(/^id:/g)[1].trim();\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(searchId)) {\n                    list.push(node);\n                }\n            });\n        } else if (searchStrIgnoreCase.match(/^attr:.+:.+/g)) {\n            let searchQuery = searchStrIgnoreCase\n                .split(/^attr:/g)[1]\n                .trim()\n                .split(/:/g);\n            const searchAttr = searchQuery[0].trim();\n            const searchValue = searchQuery[1].trim();\n            this.rawGraph.forEachNode((node, attributes) => {\n                if (\n                    attributes.hasOwnProperty(searchAttr) &&\n                    (attributes[searchAttr] as string)\n                        .toLocaleLowerCase()\n                        .includes(searchValue)\n                ) {\n                    list.push(node);\n                }\n            });\n        } else if (this.searchStr == \"\") {\n        } else {\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(this.searchStr)) {\n                    list.push(node);\n                }\n            });\n        }\n\n        return list;\n    }\n}\n","import { makeAutoObservable, observable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\n\n/**\n * all the computed values get from the rawGraph\n *\n * @export\n * @class ClusterStore\n */\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n    /**\n     * @observable\n     * Specify which attribute to be clustered\n     * if this is changed, all get values will be updated\n     *\n     * @memberof ClusterStore\n     */\n    clusterBy = \"None\";\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     * @memberof ClusterStore\n     */\n    rawGraph!: Graph;\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the id of a Node -> the value of the attribute specified by $clusterBy]\n     *\n     * @readonly\n     * @type {(Map<string, string | number>)}\n     * @memberof ClusterStore\n     */\n    get keyAttribute(): Map<string, string | number> {\n        const attribute = this.clusterBy;\n        const keyValueMap = new Map<string, string | number>();\n\n        this.rawGraph?.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                keyValueMap.set(key, attributes[attribute]);\n            } else {\n                // this attribute is undefined in this node\n                keyValueMap.set(key, \"undefined\");\n            }\n        });\n        return keyValueMap;\n    }\n\n    /**\n     * the possible attribute values of the attribute defined by $clusterBy\n     *\n     * @readonly\n     * @type {((string | number)[])}\n     * @memberof ClusterStore\n     */\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> a list of Node ids]\n     *\n     * @readonly\n     * @type {(Map<string | number, string[]>)}\n     * @memberof ClusterStore\n     */\n    get attributeKeys(): Map<string | number, string[]> {\n        const attributeKeysMap = new Map<string | number, string[]>();\n        this.getAttributeValues.forEach((value) => {\n            attributeKeysMap.set(value, []);\n        });\n        this.keyAttribute.forEach((value, key) => {\n            attributeKeysMap.get(value)?.push(key);\n        });\n        return attributeKeysMap;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the random colour of this cluster]\n     * used to avoid re-compute the colours on every frame refresh\n     *\n     * @readonly\n     * @type {(Map<string | number, string>)}\n     * @memberof ClusterStore\n     */\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.map((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the Nodes points in that cluster]\n     * will change on every frame refresh as the Node's position keeps changing.\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Vector3[]>)}\n     * @memberof ClusterStore\n     */\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.map((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        this.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * the configurations to set to cascade the graph\n *\n * @export\n * @class CssStore\n */\nexport default class CssStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    config = {\n        nodes: {\n            colorBy: \"pagerank\",\n            color: {\n                scale: \"Linear Scale\",\n                from: \"#448AFF\",\n                to: \"#E91E63\",\n            },\n            sizeBy: \"pagerank\",\n            size: {\n                min: 2,\n                max: 10,\n                scale: \"Linear Scale\",\n            },\n            labelBy: \"node_id\",\n            shape: \"circle\",\n            labelSize: 1,\n            labelLength: 10,\n        },\n        edges: {\n            color: \"#7f7f7f\",\n        },\n    };\n\n    enableDegree = true;\n    enableDensity = true;\n    enableDiameter = false;\n    enableCoefficient = true;\n    enableComponent = true;\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { copy } from \"copy-anything\";\nimport State from \".\";\nimport {\n    ForceGraphMethods,\n    NodeObject,\n    LinkObject,\n} from \"react-force-graph-3d\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport { SceneUtils } from \"three/examples/jsm/utils/SceneUtils.js\";\nimport * as THREE from \"three\";\n\nexport interface CustomNodeObject extends NodeObject {\n    name?: string;\n    val?: number;\n    isClusterNode?: boolean;\n}\n\nexport interface CustomLinkObject extends LinkObject {\n    isClusterLink?: boolean;\n}\n\nexport default class GraphDelegate {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    mountDelegateMethods(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.threeScene = this.graphDelegateMethods.scene();\n    }\n\n    private graphDelegateMethods!: ForceGraphMethods;\n\n    private threeScene!: THREE.Scene;\n\n    get visualizationGraph() {\n        let newGraph = State.graph.decorateRawGraph(\n            this.addInvisibleClusterNode(this.rawGraph)\n        );\n        newGraph.forEachNode((node, attributes) => {\n            if (node.includes(\"_CLUSTER_\")) {\n                attributes._visualize.isClusterNode = true;\n            }\n        });\n        newGraph.forEachEdge((edge, attributes, source, target) => {\n            if (source.includes(\"_CLUSTER_\") || target.includes(\"_CLUSTER_\")) {\n                attributes._visualize.isClusterLink = true;\n            }\n        });\n        let tempGraph = {\n            nodes: [] as CustomNodeObject[],\n            links: [] as LinkObject[],\n        };\n        newGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        newGraph.forEachEdge((edge, attributes) => {\n            tempGraph.links.push(attributes[\"_visualize\"]);\n        });\n        return tempGraph;\n    }\n\n    addInvisibleClusterNode(oldGraph: Graph): Graph {\n        let graphCopy = copy(oldGraph);\n        let names = [\n            \"_CLUSTER_1_\",\n            \"_CLUSTER_2_\",\n            \"_CLUSTER_3_\",\n            \"_CLUSTER_4_\",\n            \"_CLUSTER_5_\",\n            \"_CLUSTER_6_\",\n            \"_CLUSTER_7_\",\n            \"_CLUSTER_8_\",\n            \"_CLUSTER_9_\",\n            \"_CLUSTER_10_\",\n        ];\n        for (let index = 0; index < names.length; index++) {\n            State.cluster.getAttributeValues.forEach((attribute) => {\n                if (attribute === \"undefined\") return;\n                let clusterID = names[index] + attribute;\n                graphCopy.addNode(clusterID);\n                State.cluster.attributeKeys.get(attribute)?.forEach((value) => {\n                    let visualize: CustomLinkObject = {\n                        isClusterLink: true,\n                    };\n                    graphCopy.addEdge(clusterID, value, {\n                        _visualize: visualize,\n                    });\n                });\n            });\n        }\n\n        return graphCopy;\n    }\n\n    nodeVisibility = (nodeObject: CustomNodeObject) => {\n        return nodeObject.isClusterNode ? false : true;\n    };\n\n    linkVisibility = (nodeObject: CustomLinkObject) => {\n        return nodeObject.isClusterLink ? false : true;\n    };\n\n    get rawGraph(): Graph {\n        return State.graph.rawGraph;\n    }\n\n    lastObject3D!: THREE.Object3D;\n\n    clusterDelegation() {\n        this.threeScene.remove(this.lastObject3D);\n        this.lastObject3D = new THREE.Object3D();\n        this.convexHullObjects.forEach((value, key) => {\n            this.lastObject3D.add(value);\n        });\n        this.threeScene.add(this.lastObject3D);\n    }\n\n    // explicitly called when all node's position have been added to the map\n    get convexHullObjects(): Map<string | number, THREE.Object3D> {\n        let newMap = new Map<string | number, THREE.Object3D>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            if (value.length < 4) {\n                newMap.set(key, new THREE.Object3D());\n            } else {\n                let convexHull = new ConvexGeometry(Array.from(value));\n                newMap.set(key, this.createMesh(convexHull, key));\n            }\n        });\n        return newMap;\n    }\n\n    private createMesh(\n        geom: ConvexGeometry,\n        name: string | number\n    ): THREE.Object3D {\n        // 实例化一个绿色的半透明的材质\n        var meshMaterial = new THREE.MeshBasicMaterial({\n            color: State.cluster.attributeColor.get(name),\n            transparent: true,\n            opacity: 0.2,\n        });\n        meshMaterial.side = THREE.DoubleSide; //将材质设置成正面反面都可见\n        var wireFrameMat = new THREE.MeshBasicMaterial();\n        wireFrameMat.wireframe = true; //把材质渲染成线框\n\n        // 将两种材质都赋给几何体\n        var mesh = SceneUtils.createMultiMaterialObject(geom, [\n            meshMaterial,\n            wireFrameMat,\n        ]);\n\n        return mesh;\n    }\n\n    ////\n\n    cameraFocusOn(nodeId: string) {\n        let node = State.graph.rawGraph.getNodeAttribute(nodeId, \"_visualize\");\n        if (!(node.x && node.y && node.z)) return;\n        // Aim at node from outside it\n        const distance = 40;\n        const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n        this.graphDelegateMethods.cameraPosition(\n            {\n                x: node.x * distRatio,\n                y: node.y * distRatio,\n                z: node.z * distRatio,\n            }, // new position\n            { x: node.x, y: node.y, z: node.z }, // lookAt ({ x, y, z })\n            3000 // ms transition duration\n        );\n    }\n}\n","import {\n    autorun,\n    runInAction,\n    observable,\n    makeObservable,\n    reaction,\n} from \"mobx\";\n\nimport PreferencesStore from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport ProjectStore from \"./ProjectStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\nimport CssStore from \"./CssStore\";\nimport GraphDelegate from \"./GraphDelegate\";\n\nclass AppState {\n    constructor() {}\n\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    graphDelegate!: GraphDelegate;\n    import!: ImportStore;\n    search!: SearchStore;\n    project!: ProjectStore;\n    cluster!: ClusterStore;\n    css!: CssStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.graphDelegate = new GraphDelegate();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.project = new ProjectStore();\n        this.cluster = new ClusterStore();\n        this.css = new CssStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\nautorun(\n    () =>\n        (State.cluster.rawGraph = State.search.rawGraph = State.graph.rawGraph)\n);\n\nexport default State;\n","import convert from \"xml-js\";\nimport State from \"../state\";\n\nexport const GITHUB_URL = \"\";\n\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\n    [\n        \"Les Miserables\",\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\n    ],\n    [\"COVID-19 Citation Graph 06-02\", \"../samples/json/a.json\"],\n];\n\nexport async function fetchSampleGraph(url: string) {\n    try {\n        let response = await fetch(url, { mode: \"no-cors\" });\n        let gexfJson = await response.json();\n        return new File([convert.json2xml(gexfJson)], \"sample.gexf\", {\n            type: \"text/xml\",\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\nexport const ONLY_EDGE_FILE = \"only edges file\";\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    Classes,\n    ButtonGroup,\n    Intent,\n    Position,\n    Tooltip,\n    Popover,\n    Menu,\n    MenuItem,\n    MenuDivider,\n    Divider,\n} from \"@blueprintjs/core\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\nimport logo from \"../images/logo.png\";\nimport State from \"../state\";\n\nimport {\n    GITHUB_URL,\n    SAMPLE_GRAPH_SNAPSHOTS,\n    fetchSampleGraph,\n} from \"../constants\";\n\nexport default observer(\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <nav className={classnames([Classes.NAVBAR])}>\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_LEFT,\n                        ])}\n                    >\n                        <img\n                            title=\"PiperNet\"\n                            id=\"PiperNet Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                        ></img>\n                        <div className={classnames([Classes.NAVBAR_HEADING])}>\n                            {\" \"}\n                            PiperNet{\" \"}\n                        </div>\n\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Load Sample\"\n                                        icon=\"graph\"\n                                        onClick={\n                                            (State.import.importSamplesDialogOpen = true)\n                                        }\n                                    >\n                                        {/* {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        disabled={true}\n                                                        onClick={() => {\n                                                            fetchSampleGraph(\n                                                                sampleSnapshotUrl\n                                                            ).then((file) => {\n                                                                State.import.selectedGEXFFileFromInput = file;\n                                                                State.import\n                                                                    .importGraphFromGEXF()\n                                                                    .then(\n                                                                        (\n                                                                            res\n                                                                        ) => {\n                                                                            State.graph.rawGraph =\n                                                                                res.graph;\n                                                                            State.graph.metadata =\n                                                                                res.metadata;\n                                                                        }\n                                                                    );\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )} */}\n                                    </MenuItem>\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from CSV...\"\n                                        onClick={() => {\n                                            State.import.importCSVDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from GEXF...\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Export Graph\"\n                                        onClick={() => {\n                                            State.project.exportDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"document\"\n                            >\n                                Graph\n                            </Button>\n                        </Popover>\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Node DataSheet\"\n                                        icon=\"ungroup-objects\"\n                                        onClick={() => {\n                                            State.preferences.nodeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Edge DataSheet\"\n                                        icon=\"link\"\n                                        onClick={() => {\n                                            State.preferences.edgeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    {/* <MenuItem\n                                        text=\"Statistics\"\n                                        icon=\"timeline-bar-chart\"\n                                        onClick={() => {\n                                            State.preferences.statisticsDialogOpen = true;\n                                        }}\n                                    /> */}\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"wrench\"\n                            >\n                                Tools\n                            </Button>\n                        </Popover>\n                    </div>\n                    {/* <div\n                    className={classnames([\n                        Classes.NAVBAR_GROUP,\n                        Classes.ALIGN_LEFT,\n                    ])}\n                >\n                    <span className={Classes.NAVBAR_DIVIDER} />\n                    {appState.graph.hasGraph && appState.graph.frame && (\n                        <div style={{ display: \"inline\" }}>\n                            <Tooltip\n                                content={\n                                    appState.graph.frame.paused\n                                        ? \"Resume Layout Algorithm\"\n                                        : \"Pause Layout Algorithm\"\n                                }\n                                position={Position.BOTTOM}\n                            >\n                                <Button\n                                    className={classnames([\n                                        Classes.BUTTON,\n                                        Classes.MINIMAL,\n                                    ])}\n                                    icon={\n                                        appState.graph.frame.paused\n                                            ? \"play\"\n                                            : \"pause\"\n                                    }\n                                    text={\n                                        appState.graph.frame.paused\n                                            ? \"Resume Layout\"\n                                            : \"Pause Layout\"\n                                    }\n                                    onClick={() => {\n                                        if (appState.graph.frame.paused) {\n                                            appState.graph.frame.resumeLayout();\n                                            this.forceUpdate();\n                                        } else {\n                                            appState.graph.frame.pauseLayout();\n                                            this.forceUpdate();\n                                        }\n                                    }}\n                                />\n                            </Tooltip>\n                        </div>\n                    )}\n                </div> */}\n                    <ButtonGroup>\n                        {/* <SimpleSelect\n                            className={classnames([Classes.ALERT_CONTENTS])}\n                            items={[\"3D\", \"2D\"]}\n                            value={State.preferences.view}\n                            onSelect={(it) => (State.preferences.view = it)}\n                        />\n                        <Divider /> */}\n                    </ButtonGroup>\n\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_RIGHT,\n                        ])}\n                    >\n                        Clustered by{\"  \"}\n                        <SimpleSelect\n                            items={\n                                State.graph.metadata.nodeProperties.length == 0\n                                    ? [\"None\"]\n                                    : State.graph.metadata.nodeProperties\n                            }\n                            value={State.cluster.clusterBy}\n                            onSelect={(it) => (State.cluster.clusterBy = it)}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"cog\"\n                            disabled={true}\n                            onClick={() => {\n                                State.preferences.dialogOpen = true;\n                            }}\n                        />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"code\"\n                            onClick={() => {\n                                window.open(\n                                    \"https://github.com/grp202004/PiperNet\"\n                                );\n                            }}\n                        />\n                    </div>\n                </nav>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Collapse, Card, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\n\nexport default ({ name, isOpen, onToggle, children }) => (\n    <Card elevation={Elevation.THREE}>\n        <Button\n            className={classnames(\n                Classes.LARGE,\n                Classes.FILL,\n                \"text-align-left\"\n            )}\n            rightIcon={isOpen ? \"chevron-up\" : \"chevron-down\"}\n            onClick={onToggle}\n        >\n            {name}\n        </Button>\n        <Collapse isOpen={isOpen}>{children}</Collapse>\n    </Card>\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    Spinner,\n    Switch,\n    Divider,\n    FileInput,\n    Alert,\n    Callout,\n    Tag,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\n\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../../constants/index\";\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top {this.file.topN.length} rows of the\n                        selected file are displayed.\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    class ImportCSVDialog extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                loading: false,\n                available: ONLY_EDGE_FILE,\n                nodesOpen: true,\n                edgesOpen: true,\n                delimiter: \",\",\n            };\n        }\n\n        // determine if this state is importable\n        canImport = () => {\n            if (this.state.available === NODE_AND_EDGE_FILE) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else if (this.state.available === ONLY_EDGE_FILE) {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n            return false;\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            // show blank if node file not relevant\n            if (this.state.available === ONLY_EDGE_FILE) {\n                return null;\n            }\n\n            return (\n                <Collapsable\n                    name=\"Nodes\"\n                    isOpen={this.state.nodesOpen}\n                    onToggle={() =>\n                        this.setState({ nodesOpen: !this.state.nodesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.nodeFileName}\n                                onInputChange={(event) => {\n                                    if (event.target.files.length < 1) {\n                                        return;\n                                    }\n                                    State.import.nodeFileName =\n                                        event.target.files[0].name;\n                                    // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                    State.import.selectedNodeFileFromInput =\n                                        event.target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                value={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                            <br />\n                            Column for Attribute for Cluster:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                value={nodeFile.mapping.cluster}\n                                onSelect={(it) =>\n                                    (nodeFile.mapping.cluster = it)\n                                }\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <Collapsable\n                    name=\"Edges\"\n                    isOpen={this.state.edgesOpen}\n                    onToggle={() =>\n                        this.setState({ edgesOpen: !this.state.edgesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.edgeFileName}\n                                onInputChange={(event) => {\n                                    if (event.target.files.length < 1) {\n                                        return;\n                                    }\n                                    State.import.edgeFileName =\n                                        event.target.files[0].name;\n                                    State.import.selectedEdgeFileFromInput =\n                                        event.target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                value={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />{\" \"}\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                value={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderDelimiterSelection() {\n            return (\n                <div>\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        value={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter == \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter == \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    style={{ minWidth: \"80vw\" }}\n                    icon=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importCSVDialogOpen}\n                    onClose={() => {\n                        State.import.importCSVDialogOpen = false;\n                    }}\n                    title=\"Import CSV\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div>\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"import-dialog\"\n                                )}\n                            >\n                                I have:\n                                <SimpleSelect\n                                    items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\n                                    value={this.state.available}\n                                    onSelect={(targetValue) => {\n                                        State.import.importConfig.hasNodeFile = !(\n                                            targetValue === ONLY_EDGE_FILE\n                                        );\n                                        this.setState({\n                                            available: targetValue,\n                                        });\n                                    }}\n                                />\n                                <Divider />\n                                {this.renderNodesSelection()}\n                                <br />\n                                {this.renderEdgesSelection()}\n                                <br />\n                                {this.renderDelimiterSelection()}\n                            </div>\n                            <div className={Classes.DIALOG_FOOTER}>\n                                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                    <Button\n                                        className={classnames({\n                                            [Classes.DISABLED]: !this.canImport(),\n                                        })}\n                                        intent={Intent.PRIMARY}\n                                        onClick={() => {\n                                            // requestCreateNewProject({\n                                            //     name: State.project.newProjectName,\n                                            //     createdDate: new Date().toLocaleString(),\n                                            // });\n                                            State.import.isLoading = true;\n                                            State.import\n                                                .importGraphFromCSV()\n                                                .then((res) => {\n                                                    State.graph.rawGraph = State.graph.decorateRawGraph(\n                                                        res.graph\n                                                    );\n                                                    State.graph.metadata =\n                                                        res.metadata;\n\n                                                    // runInAction(\n                                                    //     \"load imported graph\",\n                                                    //     () => {\n                                                    //         appState.graph.rawGraph =\n                                                    //             graph.rawGraph;\n                                                    //         appState.graph.metadata =\n                                                    //             graph.metadata;\n                                                    //         appState.graph.setUpFrame();\n                                                    //     }\n                                                    // );\n                                                    // // Reinitialize global configs\n                                                    // appState.graph.nodes =\n                                                    //     appState.graph.initialGlobalConfig.nodes;\n                                                    // appState.graph.overrides = new Map();\n\n                                                    State.import.isLoading = false;\n                                                    State.import.importCSVDialogOpen = false;\n\n                                                    // // Newly imported graph shouldn't have label showing\n                                                    // appState.graph.frame.turnOffLabelCSSRenderer();\n                                                });\n                                        }}\n                                        text=\"Import\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    Spinner,\n    FileInput,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\nexport default observer(\n    class ImportGEXFDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <Button\n                            className={classnames({\n                                [Classes.DISABLED]: !this.state.fileIsSelect,\n                            })}\n                            intent={Intent.PRIMARY}\n                            onClick={() => {\n                                State.import.isLoading = true;\n                                State.import\n                                    .importGraphFromGEXF()\n                                    .then((res) => {\n                                        State.graph.rawGraph = State.graph.decorateRawGraph(\n                                            res.graph\n                                        );\n                                        State.graph.metadata = res.metadata;\n\n                                        State.import.isLoading = false;\n                                        State.import.importGEXFDialogOpen = false;\n                                    });\n                            }}\n                            text=\"Import\"\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;\n                    }}\n                    title=\"Import GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <div\n                                    className={classnames(\n                                        Classes.CONTROL_GROUP\n                                    )}\n                                >\n                                    <div\n                                        className={classnames(\n                                            Classes.INPUT_GROUP,\n                                            Classes.FILL\n                                        )}\n                                    >\n                                        <FileInput\n                                            text={State.import.gexfFileName}\n                                            onInputChange={(event) => {\n                                                if (\n                                                    event.target.files.length <\n                                                    1\n                                                ) {\n                                                    return;\n                                                }\n                                                State.import.gexfFileName =\n                                                    event.target.files[0].name;\n                                                State.import.selectedGEXFFileFromInput =\n                                                    event.target.files[0];\n                                                this.setState({\n                                                    fileIsSelect: true,\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Card,\n    Icon,\n    Dialog,\n    Intent,\n    Spinner,\n    Elevation,\n    Divider,\n    H3,\n    ButtonGroup,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport { makeObservable, computed } from \"mobx\";\nimport classnames from \"classnames\";\nimport gexf from \"graphology-gexf/browser\";\nimport State from \"../../state\";\nimport { CSVLink } from \"react-csv\";\n\nexport default observer(\n    class ExportDialog extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                ready: true,\n            };\n        }\n\n        computeGEXFFile() {\n            return gexf.write(State.graph.rawGraph);\n        }\n\n        computeNodeFile() {\n            let headers = [];\n            State.graph.metadata.nodeProperties.map((value) => {\n                headers.push({ label: value, key: value });\n            });\n            headers.push({ label: \"_id\", key: \"_id\" });\n            let exportData = State.graph.rawGraph.export();\n            let data = [];\n            exportData.nodes.forEach((node) => {\n                data.push({\n                    _id: node.key,\n                    ...node.attributes,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        computeEdgeFile() {\n            let headers = [\n                { label: \"source\", key: \"source\" },\n                { label: \"target\", key: \"target\" },\n            ];\n\n            let exportData = State.graph.rawGraph.export();\n            let data = [];\n            exportData.edges.forEach((edge) => {\n                data.push({\n                    source: edge.source,\n                    target: edge.target,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"projects\"\n                    isOpen={State.project.exportDialogOpen}\n                    onClose={() => {\n                        State.project.exportDialogOpen = false;\n                    }}\n                    title={`Export Graph`}\n                >\n                    {!this.state.ready ? (\n                        <Spinner />\n                    ) : (\n                        <div className={classnames(Classes.DIALOG_BODY)}>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    GEXF Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://gephi.org/gexf/format/\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n                                <Divider />\n\n                                <CSVLink\n                                    data={this.computeGEXFFile()}\n                                    filename={\"Snapshot-GEXF.gexf\"}\n                                    className=\"btn btn-primary\"\n                                    target=\"_blank\"\n                                >\n                                    <Button>Download GEXF File</Button>\n                                </CSVLink>\n                            </Card>\n                            <br></br>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    CSV Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://github.com/grp202004/PiperNet#data-import\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n\n                                <Divider />\n                                <ButtonGroup>\n                                    <CSVLink\n                                        data={this.computeNodeFile().data}\n                                        header={this.computeNodeFile().header}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Node.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Node File</Button>\n                                    </CSVLink>\n                                    <Divider />\n                                    <CSVLink\n                                        data={this.computeEdgeFile().data}\n                                        header={this.computeEdgeFile().header}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Edge.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Edge File</Button>\n                                    </CSVLink>\n                                </ButtonGroup>\n                            </Card>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\nimport { Column, Table, TableLoadingOption } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\ninterface Props {\n    for: string;\n    children: React.ReactNode;\n}\n\nexport default observer(\n    class DataSheetDialogWrapper extends React.Component<Props, {}> {\n        constructor(props: any) {\n            super(props);\n        }\n\n        state = {\n            loading: true,\n        };\n\n        renderTable() {\n            if (this.state.loading) {\n                return (\n                    <div className=\"argo-table-container\">\n                        <Table\n                            className=\"pt-bordered pt-striped\"\n                            numRows={20}\n                            loadingOptions={[\n                                TableLoadingOption.CELLS,\n                                TableLoadingOption.COLUMN_HEADERS,\n                                TableLoadingOption.ROW_HEADERS,\n                            ]}\n                        >\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                        </Table>\n                    </div>\n                );\n            } else {\n                return this.props.children;\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"database\"\n                    isOpen={\n                        this.props.for == \"node\"\n                            ? State.preferences.nodeDataSheetDialogOpen\n                            : State.preferences.edgeDataSheetDialogOpen\n                    }\n                    onOpened={() => {\n                        setTimeout(() => {\n                            this.setState({\n                                loading: false,\n                            });\n                        }, 100);\n                    }}\n                    onClose={() => {\n                        if (this.props.for == \"node\") {\n                            State.preferences.nodeDataSheetDialogOpen = false;\n                        } else {\n                            State.preferences.edgeDataSheetDialogOpen = false;\n                        }\n                        this.state.loading = true;\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        {this.renderTable()}\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import { Attributes } from \"graphology-types\";\n\n/** Event handler that exposes the target element's value as a boolean. */\nexport function handleBooleanChange(handler: (checked: boolean) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).checked);\n}\n\n/** Event handler that exposes the target element's value as a string. */\nexport function handleStringChange(handler: (value: string) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).value);\n}\n\n/** Event handler that exposes the target element's value as an inferred generic type. */\nexport function handleValueChange<T>(handler: (value: T) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler(((event.target as HTMLInputElement).value as unknown) as T);\n}\n\n/** Event handler that exposes the target element's value as a number. */\nexport function handleNumberChange(handler: (value: number) => void) {\n    return handleStringChange((value) => handler(+value));\n}\n\nexport function stringifyNodeDetail(attributes: Attributes): string {\n    let res = \"\";\n    for (var attribute in attributes) {\n        if (\n            attributes.hasOwnProperty(attribute) &&\n            attribute != \"_visualize\" &&\n            attribute != \"_options\"\n        ) {\n            res += attribute + \" : \" + attributes[attribute] + \" ; \";\n        }\n    }\n\n    return res;\n}\n\nexport function parseNumberOrString(value: string): string | number {\n    let numberVal = Number(value);\n    if (isNaN(numberVal)) {\n        return value;\n    } else {\n        return numberVal;\n    }\n}\n","import {\n    Button,\n    Card,\n    Elevation,\n    FormGroup,\n    H5,\n    InputGroup,\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport State from \"../../state\";\nimport { Attributes } from \"graphology-types\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * function to call when a new node is successfully added\n     * the {nodeId} is the id of the newly added node, {attributes} is the attributes of the newly added node\n     *\n     * @memberof Props\n     */\n    onAdded: (nodeId: string, attributes: Attributes) => void;\n}\n\nexport default observer(\n    class NodeAdder extends React.Component<Props, {}> {\n        constructor(props: any) {\n            super(props);\n        }\n\n        state = {\n            newNodeId: \"\",\n            attributes: {} as Attributes,\n        };\n\n        get canImport() {\n            return (\n                !State.graph.rawGraph.hasNode(this.state.newNodeId) &&\n                this.state.newNodeId != \"\"\n            );\n        }\n\n        canImportTag = () => {\n            return this.canImport ? (\n                <Tooltip2\n                    content={\n                        \"This Node Id is not used by any existing node yet\"\n                    }\n                    intent=\"success\"\n                >\n                    <Button icon=\"tick\" intent=\"success\" minimal={true} />\n                </Tooltip2>\n            ) : (\n                <Tooltip2\n                    content={\n                        \"This Node Id is currently in use by other nodes, try with another one instead\"\n                    }\n                    intent=\"warning\"\n                >\n                    <Button icon=\"cross\" intent=\"warning\" minimal={true} />\n                </Tooltip2>\n            );\n        };\n\n        renderAttributesForm = (attributes: string[]) => {\n            return attributes.map((attribute) => {\n                if (attribute != \"_options\" && attribute != \"_visualize\") {\n                    return (\n                        <FormGroup label={attribute}>\n                            <InputGroup\n                                asyncControl={true}\n                                placeholder={\n                                    \"Enter the value for attribute: \" +\n                                    attribute\n                                }\n                                onChange={handleStringChange((value) => {\n                                    let newValue = this.state.attributes;\n                                    newValue[attribute] = parseNumberOrString(\n                                        value\n                                    );\n                                    this.setState({ attributes: newValue });\n                                })}\n                                value={this.state.attributes[attribute]}\n                            />\n                        </FormGroup>\n                    );\n                }\n            });\n        };\n\n        render() {\n            return (\n                <Card elevation={Elevation.ONE}>\n                    <FormGroup label=\"New Node ID\" labelInfo=\"(required)\">\n                        <InputGroup\n                            autoFocus={true}\n                            asyncControl={true}\n                            placeholder=\"Enter the new Node Id...\"\n                            intent={this.canImport ? \"success\" : \"warning\"}\n                            rightElement={this.canImportTag()}\n                            onChange={handleStringChange((value) =>\n                                this.setState({ newNodeId: value })\n                            )}\n                            value={this.state.newNodeId}\n                        />\n                    </FormGroup>\n                    <Card elevation={Elevation.ONE}>\n                        <H5>Attributes</H5>\n                        {this.renderAttributesForm(\n                            State.graph.metadata.nodeProperties\n                        )}\n                    </Card>\n                    <hr />\n                    <Button\n                        intent=\"primary\"\n                        onClick={() => {\n                            State.graph.decorateRawNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.graph.rawGraph.addNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            this.props.onAdded(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                        }}\n                        disabled={!this.canImport}\n                    >\n                        Confirm\n                    </Button>\n                </Card>\n            );\n        }\n        componentDidMount = () => {\n            State.graph.metadata.nodeProperties.forEach((prop) => {\n                let newValue = this.state.attributes;\n                newValue[prop] = \"\";\n                this.setState({ attributes: newValue });\n            });\n        };\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Code,\n    Dialog,\n    Divider,\n    InputGroup,\n    Intent,\n    Switch,\n    Tag,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    EditableCell,\n    ICellRenderer,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport {\n    handleStringChange,\n    parseNumberOrString,\n    stringifyNodeDetail,\n} from \"../utils/InputFormUtils\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\nimport NodeAdder from \"../utils/NodeAdder\";\n\nlet GraphNodeTable = observer(\n    class GraphNodeTable extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n\n        state = {\n            filterQuery: \"\",\n            addNodeDialogOpen: false,\n            deleteAlertOpen: false,\n            nodeToDelete: null as SerializedNode<Attributes> | null,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedNode<Attributes>[] = [];\n            State.graph.rawGraph.export().nodes.forEach((node) => {\n                if (\n                    node.key\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery == \"\"\n                ) {\n                    newTable.push(node);\n                }\n            });\n            return newTable;\n        }\n\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        showRenderer: ICellRenderer = (rowIndex) => {\n            let node = this.filteredTable[rowIndex];\n\n            return (\n                <Cell>\n                    <Switch\n                        checked={node.attributes?._options.show}\n                        onChange={() => {\n                            node.attributes?._options.show\n                                ? State.graph.hideNode(node.key)\n                                : State.graph.showNode(node.key);\n                            this.forceUpdate();\n                        }}\n                    />\n                </Cell>\n            );\n        };\n\n        renderCell: ICellRenderer = (rowIndex, columnIndex) => {\n            let attribute = this.nodeProperties[columnIndex - 2];\n            let cellAttributes = this.filteredTable[rowIndex].attributes;\n            //@ts-ignore\n            let cell = cellAttributes[attribute];\n\n            return (\n                <EditableCell\n                    value={cell}\n                    onChange={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    onConfirm={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                />\n            );\n        };\n\n        // if the input is a number in string, it will convert the string into number to store\n        setValue = (value: string, rowIndex: number, attribute: string) => {\n            let id = this.filteredTable[rowIndex].key;\n            State.graph.rawGraph.setNodeAttribute(\n                id,\n                attribute,\n                parseNumberOrString(value)\n            );\n        };\n\n        renderColumns: any = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it != \"_options\") {\n                    return <Column name={it} cellRenderer={this.renderCell} />;\n                }\n            });\n            return columns.filter((element) => {\n                return element != undefined;\n            });\n        };\n\n        addNodeDialog = () => {\n            return (\n                <Dialog\n                    isOpen={this.state.addNodeDialogOpen}\n                    icon=\"new-object\"\n                    onClose={() => this.setState({ addNodeDialogOpen: false })}\n                    title=\"Add Node\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add node with unique node id to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> node means there should only exist\n                            one node that has the respective node id.\n                        </p>\n                        <Tag>New edges are added to the end of the table</Tag>\n                        <hr />\n                        <NodeAdder\n                            onAdded={() => {\n                                this.setState({ addNodeDialogOpen: false });\n                                this.forceUpdate();\n                            }}\n                        />\n                    </div>\n                </Dialog>\n            );\n        };\n\n        deleteNodeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                nodeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteNodeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.rawGraph.dropNode(\n                            this.state.nodeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                    style={{ minWidth: \"60vw\" }}\n                >\n                    <p>\n                        Are you sure you want to delete the node with ID{\" \"}\n                        <Code>{this.state.nodeToDelete?.key}</Code> with\n                        attributes:\n                        <Code>\n                            {stringifyNodeDetail(\n                                this.state.nodeToDelete\n                                    ?.attributes as Attributes\n                            )}\n                        </Code>\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <Callout\n                        title={\n                            \"Try to click on a cell and type in something...\"\n                        }\n                        intent=\"primary\"\n                        icon=\"edit\"\n                    >\n                        The corresponding value of a node's attribute can be\n                        modified by clicking the cell and type in\n                    </Callout>\n\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() =>\n                                this.setState({ addNodeDialogOpen: true })\n                            }\n                            icon=\"new-object\"\n                            intent=\"primary\"\n                            text=\"Add Node\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Node...\"\n                            value={this.state.filterQuery}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n\n                    <Table\n                        className=\"argo-table\"\n                        defaultRowHeight={30}\n                        numRows={this.filteredTable.length}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteNodeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"Show\"\n                            //@ts-ignore\n                            intent={Intent.SUCCESS}\n                            //@ts-ignore\n                            style={this.style}\n                            cellRenderer={this.showRenderer}\n                        />\n                        <Column\n                            name=\"ID\"\n                            //@ts-ignore\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.filteredTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                    {this.deleteNodeAlert()}\n                    {this.addNodeDialog()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class NodeDataSheetDialog extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"node\">\n                    <GraphNodeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, FormGroup, MenuItem } from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { Select } from \"@blueprintjs/select\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { stringifyNodeDetail } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the text to be shown above the selectButton\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    text: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * the {nodeId} is the id of the selected node\n     *\n     * @memberof Props\n     */\n    onChange: (nodeId: string) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class NodeChooser extends React.Component<Props, {}> {\n        constructor(props: any) {\n            super(props);\n        }\n\n        state = {\n            select: \"Choose \" + this.props.text,\n        };\n\n        render() {\n            return (\n                <FormGroup\n                    label={this.props.text}\n                    labelFor=\"text-input\"\n                    labelInfo=\"(required)\"\n                >\n                    <Select\n                        filterable={true}\n                        items={State.graph.rawGraph.export().nodes}\n                        itemPredicate={(\n                            query: string,\n                            item: SerializedNode<Attributes>\n                        ) => {\n                            return item.key.includes(query);\n                        }}\n                        itemRenderer={(item: SerializedNode<Attributes>) => {\n                            return (\n                                <Tooltip2\n                                    content={stringifyNodeDetail(\n                                        item.attributes ?? {}\n                                    )}\n                                >\n                                    <MenuItem\n                                        key={item.key}\n                                        text={item.key}\n                                        onClick={() => {\n                                            let key = item.key;\n                                            this.setState({ select: key });\n                                            this.props.onChange(key);\n                                        }}\n                                    />\n                                </Tooltip2>\n                            );\n                        }}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                        onItemSelect={() => {}}\n                    >\n                        <Button\n                            text={this.state.select}\n                            rightIcon=\"double-caret-vertical\"\n                        />\n                    </Select>\n                </FormGroup>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Code,\n    Dialog,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport { Attributes, SerializedEdge } from \"graphology-types\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\nimport NodeChooser from \"../utils/NodeChooser\";\n\nlet GraphEdgeTable = observer(\n    class GraphEdgeTable extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n\n        state = {\n            addEdgeDialogOpen: false,\n            deleteAlertOpen: false,\n            edgeToDelete: null as SerializedEdge<Attributes> | null,\n            filterQuery: \"\",\n            chosenSource: \"\",\n            chosenTarget: \"\",\n        };\n\n        get filteredTable() {\n            let newTable: SerializedEdge<Attributes>[] = [];\n            State.graph.rawGraph.export().edges.forEach((edge) => {\n                if (\n                    edge.source\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    edge.target\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery == \"\"\n                ) {\n                    newTable.push(edge);\n                }\n            });\n            return newTable;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.rawGraph.dropEdge(\n                            this.state.edgeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.key}</Code> from Node ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.source}</Code> to Node\n                        ID <Code>{this.state.edgeToDelete?.target}</Code>. This\n                        action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        addEdgeDialog = () => {\n            return (\n                <Dialog\n                    isOpen={this.state.addEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => this.setState({ addEdgeDialogOpen: false })}\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() =>\n                                    this.setState({ addEdgeDialogOpen: false })\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.rawGraph.addEdge(\n                                        this.state.chosenSource,\n                                        this.state.chosenTarget\n                                    );\n                                    this.setState({ addEdgeDialogOpen: false });\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        };\n\n        get canImport(): boolean {\n            if (\n                this.state.chosenSource == \"\" ||\n                this.state.chosenTarget == \"\"\n            ) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() =>\n                                this.setState({ addEdgeDialogOpen: true })\n                            }\n                            icon=\"new-link\"\n                            intent=\"primary\"\n                            text=\"Add Edge\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Source or Target of a Node...\"\n                            value={this.state.filterQuery}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n                    <Table\n                        className=\"argo-table\"\n                        numRows={this.filteredTable.length}\n                        defaultRowHeight={30}\n                        renderMode={RenderMode.NONE}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteEdgeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"Source\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].source}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                        <Column\n                            name=\"Target\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].target}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                    </Table>\n                    {this.deleteEdgeAlert()}\n                    {this.addEdgeDialog()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class EdgeDataSheetDialog extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"edge\">\n                    <GraphEdgeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import React from \"react\";\n// import PreferencesDialog from \"./PreferencesDialog\";\nimport ImportCSVDialog from \"./dialogs/ImportCSVDialog\";\nimport ImportGEXFDialog from \"./dialogs/ImportGEXFDialog\";\nimport ImportSamplesDialog from \"./dialogs/ImportGEXFDialog\";\nimport ExportDialog from \"./dialogs/ExportDialog\";\n// import ProjectDetailDialog from \"./ProjectDetailDialog\";\n// import RenameSnapshotDialog from \"./RenameSnapshotDialog\";\n// import StatisticsDialog from './StatisticsDialog';\n// import HelpDialog from './HelpDialog';\n// import NeighborDialog from './NeighborDialog';\nimport NodeDataSheetDialog from \"./dialogs/NodeDataSheetDialog\";\nimport EdgeDataSheetDialog from \"./dialogs/EdgeDataSheetDialog\";\n\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                {/* <PreferencesDialog /> */}\n                <ImportCSVDialog />\n                <ImportGEXFDialog />\n                <ImportSamplesDialog />\n                {/*\n                <ProjectDetailDialog />\n                <RenameSnapshotDialog />\n                <StatisticsDialog />\n                <HelpDialog />\n                <NeighborDialog />\\\n                */}\n                <NodeDataSheetDialog />\n                <EdgeDataSheetDialog />\n                <ExportDialog />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport {\n    observable,\n    makeObservable,\n    computed,\n    autorun,\n    action,\n    makeAutoObservable,\n} from \"mobx\";\nimport { Menu, MenuItem } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, {\n    ForceGraphMethods,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport State from \"../../state\";\n\nexport default observer(\n    class ThreeJSVis extends React.Component {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                graphRef: observable,\n                graphMethods: computed,\n                graphDelegate: observable,\n                nodeHover: action,\n                selectedNodes: observable.ref,\n            });\n        }\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        getNodeId(node: NodeObject): string {\n            let nodeId: string;\n            if (node.id as string) {\n                nodeId = node.id as string;\n            } else {\n                nodeId = (node.id as number).toString();\n            }\n            return nodeId;\n        }\n\n        graphDelegate = State.graphDelegate;\n\n        nodeHover = (\n            node: NodeObject | null,\n            previousNode: NodeObject | null\n        ) => {\n            if (State.search.isPreviewing) return;\n            if (node != null && node != previousNode) {\n                State.graph.currentlyHoveredId = this.getNodeId(\n                    node as NodeObject\n                );\n            }\n        };\n\n        selectedNodes: string[] = State.graph.selectedNodes;\n\n        nodeSelect = (node: NodeObject, event: MouseEvent) => {\n            let nodeId = this.getNodeId(node as NodeObject);\n            if (event.ctrlKey || event.shiftKey) {\n                // multi-selection\n                if (this.selectedNodes.includes(nodeId)) {\n                    let index = this.selectedNodes.indexOf(nodeId);\n                    if (index > -1) {\n                        this.selectedNodes.splice(index, 1);\n                    }\n                } else {\n                    this.selectedNodes.push(nodeId);\n                }\n            } else {\n                // single-selection\n                // TODO\n            }\n            this.graphMethods.refresh(); // update color of selected nodes\n        };\n\n        nodeRightClick = (node: NodeObject, event: MouseEvent) => {\n            State.preferences.rightClickPositionX = event.x;\n\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickNodePanelOpen = true;\n        };\n\n        renderGraph = () => {\n            if (State.preferences.view === \"3D\") {\n                return (\n                    <ForceGraph3D\n                        ref={this.graphRef}\n                        graphData={this.graphDelegate.visualizationGraph}\n                        nodeResolution={20}\n                        nodeVisibility={this.graphDelegate.nodeVisibility}\n                        linkVisibility={this.graphDelegate.linkVisibility}\n                        onNodeDragEnd={(node) => {\n                            node.fx = node.x;\n                            node.fy = node.y;\n                            node.fz = node.z;\n                        }}\n                        onBackgroundRightClick={() => {\n                            // this.allAdded = true;\n                            // this.graphRef.current.pauseAnimation();\n                            // this.graphMethods.refresh();\n                            // this.graphDelegate.init();\n                        }}\n                        onEngineTick={() =>\n                            this.graphDelegate.clusterDelegation()\n                        }\n                        nodeColor={(node) =>\n                            this.selectedNodes.includes(this.getNodeId(node))\n                                ? \"yellow\"\n                                : \"grey\"\n                        }\n                        onNodeClick={this.nodeSelect}\n                        onNodeRightClick={this.nodeRightClick}\n                        onBackgroundClick={() =>\n                            (State.preferences.rightClickNodePanelOpen = false)\n                        }\n                        onNodeHover={this.nodeHover}\n                    />\n                );\n                // } else {\n                //     return (\n                //         <ForceGraph2D\n                //             graphData={State.graph.adapterGraph}\n                //             dagMode={\"td\"}\n                //             // dagLevelDistance={300}\n                //             // backgroundColor=\"#101020\"\n                //             nodeRelSize={1}\n                //             // nodeId=\"path\"\n                //             // nodeVal={(node) => 100 / (node.level + 1)}\n                //             // nodeLabel=\"path\"\n                //             // nodeAutoColorBy=\"module\"\n                //             // linkDirectionalParticles={2}\n                //             // linkDirectionalParticleWidth={2}\n                //             d3VelocityDecay={0.3}\n                //         />\n                //     );\n            }\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        componentDidMount() {\n            this.graphDelegate.mountDelegateMethods(this.graphMethods);\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport {\n    Button,\n    Classes,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n} from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\n// import { Popover2, Select } from \"@blueprintjs/labs\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport * as THREE from \"three\";\n// import SimpleSelect from \"../utils/SimpleSelect\";\n// import mouse from \"../../graph-frontend/src/select\";\n\nexport default observer(\n    class EdgesPanel extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                timeOutRef: null,\n                sizeOptionOpen: false,\n                thicknessOptionOpen: false,\n                colorOptionOpen: false,\n            };\n        }\n\n        render() {\n            let graph = State.graph.graph;\n            return (\n                <div>\n                    <p>{`Modifying All Edges`}</p>\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Select Edge Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <Popover\n                                            interactionKind={\n                                                PopoverInteractionKind.CLICK\n                                            }\n                                            popoverClassName=\"bp3-popover-content-sizing\"\n                                            position={Position.RIGHT}\n                                        >\n                                            <Button\n                                                text=\"  \"\n                                                style={{\n                                                    backgroundImage: \"inherit\",\n                                                    backgroundColor:\n                                                        State.css.config.edges\n                                                            .color,\n                                                }}\n                                            />\n                                            <div>\n                                                <SketchPicker\n                                                    color={\n                                                        State.css.config.edges\n                                                            .color\n                                                    }\n                                                    onChange={(it) => {\n                                                        // State.graph.process.graph.forEachNode(n => {\n\n                                                        //     let red = new THREE.Color(State.graph.edges.color).r;\n                                                        //     let blue = new THREE.Color(State.graph.edges.color).g;\n                                                        //     let green = new THREE.Color(State.graph.edges.color).b;\n                                                        //     n.renderData.linecolor.r = red;\n                                                        //     n.renderData.linecolor.g = blue;\n                                                        //     n.renderData.linecolor.b = green;\n                                                        // });\n\n                                                        State.css.config.edges.color =\n                                                            it.hex;\n                                                        console.log(it.hex);\n                                                        /**update edge color in real time*/\n                                                        // State.graph.process.onHover();\n                                                    }}\n                                                />\n                                            </div>\n                                        </Popover>\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n\n                    {/* Collapsable Option: Thickness */}\n                    {/* <Collapsable\n                    name=\"Thickness\"\n                    isOpen={this.state.thicknessOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\n                        })\n                    }\n                    >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <section>\n                            <p>Select Edge Thickness: </p>\n                            <div style={{display: \"inline\", float: \"right\"}}>\n\n                            </div>\n                        </section>\n                    </div>\n                </Collapsable> */}\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n    class LabelsPanel extends React.Component {\n        render() {\n            return (\n                <div>\n                    <span style={{ display: \"inline-block\" }}>\n                        <Button\n                            style={{ width: \"100px\" }}\n                            id=\"hideAll\"\n                            icon=\"eye-off\"\n                            className={Classes.FILL}\n                            onClick={() => State.graph.frame.hideAllLabels()}\n                        >\n                            Hide All\n                        </Button>\n                        <Button\n                            style={{ width: \"100px\", display: \"none\" }}\n                            id=\"showAll\"\n                            icon=\"eye-on\"\n                            className={Classes.FILL}\n                            onClick={() => State.graph.frame.showAllLabels()}\n                        >\n                            Show All\n                        </Button>\n                        <Button\n                            style={{ width: \"140px\", marginLeft: \"10px\" }}\n                            id=\"hideSelected\"\n                            icon=\"eye-off\"\n                            className={Classes.FILL}\n                            onClick={() =>\n                                State.graph.frame.hideSelectedLabels()\n                            }\n                        >\n                            Hide Selected\n                        </Button>\n                        <Button\n                            style={{\n                                width: \"140px\",\n                                marginLeft: \"10px\",\n                                display: \"none\",\n                            }}\n                            id=\"showSelected\"\n                            icon=\"eye-on\"\n                            className={Classes.FILL}\n                            onClick={() =>\n                                State.graph.frame.showSelectedLabels()\n                            }\n                        >\n                            Show Selected\n                        </Button>\n                    </span>\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label Size</h6>\n                    <Slider\n                        min={0.5}\n                        max={3}\n                        stepSize={0.1}\n                        // onChange={value => {\n                        //   State.graph.nodes.labelSize = value;\n                        // }}\n                        // value={State.graph.nodes.labelSize}\n                        initialValue={2}\n                        value={2}\n                    />\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label Length</h6>\n                    <Slider\n                        min={1}\n                        max={32}\n                        stepSize={0.1}\n                        labelStepSize={5}\n                        // onChange={value => {\n                        //   State.graph.nodes.labelLength = value;\n                        // }}\n                        // value={State.graph.nodes.labelLength}\n                        value={10}\n                    />\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label By</h6>\n                    {/* <Select\n            items={State.graph.allPropertiesKeyList}\n            itemRenderer={CommonItemRenderer}\n            filterable={false}\n            onItemSelect={it => (State.graph.nodes.labelBy = it)}\n          >\n            <Button text={State.graph.nodes.labelBy} />\n          </Select> */}\n                </div>\n            );\n        }\n    }\n);\n// export default LabelsPanel;\n","import React from \"react\";\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\n\nexport default ({ name, isOpen, onToggle, children }) => (\n    <div>\n        <Switch\n            label={name}\n            checked={isOpen}\n            onChange={onToggle}\n            className={Classes.ALIGN_RIGHT}\n        />\n        <Collapse isOpen={isOpen}>{children}</Collapse>\n    </div>\n);\n","import React from \"react\";\nimport { Button, Classes, Slider, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { runInAction } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n  class SelectionPanel extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        shapeOptionOpen: false,\n        sizeOptionOpen: false,\n        colorOptionOpen: false,\n        labelOptionOpen: false\n      };\n    }\n\n    // twoLayerUpdate = (nodeId, key, value) => {\n    //   if (!State.graph.overrides.has(nodeId)) {\n    //     State.graph.overrides.set(nodeId, new Map());\n    //   }\n    //   const nodeAttrs = State.graph.overrides.get(nodeId);\n    //   if (value !== null) {\n    //     nodeAttrs.set(key, value);\n    //   } else {\n    //     nodeAttrs.delete(key);\n    //     if (nodeAttrs.size === 0) {\n    //       State.graph.overrides.delete(nodeId);\n    //     }\n    //   }\n    // };\n\n    // batchTwoLayerUpdate = (nodes, key, value) => {\n    //   runInAction(\"update entire selection\", () => {\n    //     nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\n    //   });\n    // };\n\n    render() {\n      return (\n        <div>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Size\"\n            isOpen={this.state.sizeOptionOpen}\n            onToggle={() => {\n              if (this.state.sizeOptionOpen) {\n                this.setState(\n                  {\n                    sizeOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"size\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    sizeOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"size\",\n                  //     State.graph.overrideConfig.size\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <Slider\n                min={1}\n                max={20}\n                stepSize={0.1}\n                labelStepSize={5}\n                // onChange={it => {\n                //   State.graph.overrideConfig.size = it;\n                //   this.batchTwoLayerUpdate(\n                //     State.graph.selectedNodes,\n                //     \"size\",\n                //     it\n                //   );\n                // }}\n                // value={State.graph.overrideConfig.size}\n                value={2}//set for test\n              />\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Color\"\n            isOpen={this.state.colorOptionOpen}\n            onToggle={() => {\n              if (this.state.colorOptionOpen) {\n                this.setState(\n                  {\n                    colorOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"color\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    colorOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"color\",\n                  //     State.graph.overrideConfig.color\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <section> <p style={{ textAlign: \"left\" }}>\n                Choose Color:\n            <span style={{ float: \"right\" }}>\n                  <Popover\n                    //previous!!\n                    // placement=\"bottom\"\n                    // modifiers={{\n                    //   preventOverflow: {\n                    //     enabled: false,\n                    //   },\n                    // }}\n                    interactionKind={PopoverInteractionKind.CLICK}\n                    popoverClassName=\"bp3-popover-content-sizing\"\n                    position={Position.RIGHT}\n\n                  >\n                    <Button\n                      text=\"  \"\n                      style={{\n                        backgroundImage: \"inherit\",\n                        // backgroundColor: State.graph.overrideConfig.color\n                      }}\n                    />\n                    <SketchPicker\n                    // color={State.graph.overrideConfig.color}\n                    // onChange={it => {\n                    //   State.graph.overrideConfig.color = it.hex;\n                    //   this.batchTwoLayerUpdate(\n                    //     State.graph.selectedNodes,\n                    //     \"color\",\n                    //     it.hex\n                    //   );\n                    // }}\n                    />\n                  </Popover>\n                </span>\n              </p>\n              </section>\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Label\"\n            isOpen={this.state.labelOptionOpen}\n            onToggle={() => {\n              if (this.state.labelOptionOpen) {\n                this.setState(\n                  {\n                    labelOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"label\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    labelOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"label\",\n                  //     State.graph.overrideConfig.label\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              Custom Label:\n            <input\n                value={\"test\"}//used for test\n              // value={State.graph.overrideConfig.label}\n              // onChange={it => {\n              //   State.graph.overrideConfig.label = it.target.value;\n              //   this.batchTwoLayerUpdate(\n              //     State.graph.selectedNodes,\n              //     \"label\",\n              //     it.target.value\n              //   );\n              // }}\n              />\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Shape\"\n            isOpen={this.state.shapeOptionOpen}\n            onToggle={() => {\n              if (this.state.shapeOptionOpen) {\n                this.setState(\n                  {\n                    shapeOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"shape\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    shapeOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"shape\",\n                  //     State.graph.overrideConfig.shape\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <section> <p style={{ textAlign: \"left\" }}>\n                Node Shape:\n            <span style={{ float: \"right\" }}>\n                  <Select\n                    items={[\n                      \"shape1\",\n                      \"shape2\",\n                      \"shape3\",\n                      \"shape4\",\n                      \"shape5\"\n                    ]}\n                    itemRenderer={CommonItemRenderer}\n                    filterable={false}\n                    onItemSelect={it => {\n                      console.log(it)//used for test\n                      // State.graph.overrideConfig.shape = it;\n                      // this.batchTwoLayerUpdate(\n                      //   State.graph.selectedNodes,\n                      //   \"shape\",\n                      //   it\n                      // );\n                    }\n                    }\n                  >\n                    {/* <Button text={State.graph.overrideConfig.shape} /> */}\n                    <Button text={\"change\"} />\n                    {/* upper is used for test */}\n                  </Select>\n                </span>\n              </p>\n              </section>\n            </div>\n          </SwitchCollapsable>\n        </div>\n      );\n    }\n  }\n);\n// export default SelectionPanel;","import React from \"react\";\nimport { Button, Classes, RangeSlider, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { runInAction } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport State from \"../../state\";\n// import { scales } from \"../../constants/index\";\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n  class GlobalPanel extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        timeOutRef: null,\n        sizeOptionOpen: false,\n        colorOptionOpen: false,\n        shapeOptionOpen: false\n      };\n    }\n\n    render() {\n      return (\n        <div>\n          {/* Collapsable Option: Color */}\n          <Collapsable\n            name=\"Color\"\n            isOpen={this.state.colorOptionOpen}\n            onToggle={() =>\n              this.setState({\n                colorOptionOpen: !this.state.colorOptionOpen\n              })\n            }\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* color : color by */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Color By:\n                <span style={{ float: \"right\" }}>\n                    <SimpleSelect\n                      items={[\"item1\", \"item2\"]\n                        // State.graph.allPropertiesKeyList\n                      }\n                      onSelect={it => (\n                        console.log(\"color:color by\")\n                        // State.graph.nodes.colorBy = it\n                      )\n                      }\n                      value={\"1\"//for test\n                        // State.graph.nodes.colorBy\n                      }\n                    />\n                  </span>\n                </p>\n              </section>\n\n              {/* color:scale type  */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale Type:\n                <span style={{ float: \"right\" }}>\n                    <SimpleSelect\n                      items={[\"item1\", \"item2\"]\n                        // Object.keys(scales)\n                      }\n                      onSelect={it => (console.log(\"color:scale type\")\n                        // State.graph.nodes.color.scale = it\n                      )\n                      }\n                      value={\"2\"\n                        // State.graph.nodes.color.scale\n                      }\n                    />\n                  </span>\n                </p>\n              </section>\n\n              {/* the gradient section in color */}\n              <section >\n                <p style={{ textAlign: \"left\" }}>Gradient: &nbsp;\n                <span style={{ float: \"right\" }}>\n                    {/* left colorpicker */}\n                    <Popover\n                      // placement=\"bottom\"\n                      // modifiers={{\n                      //   preventOverflow: {\n                      //     enabled: false,\n                      //   },\n                      // }}\n                      interactionKind={PopoverInteractionKind.CLICK}\n                      popoverClassName=\"bp3-popover-content-sizing\"\n                      position={\"auto\"}\n                    >\n                      <Button\n                        text=\"  \"\n                      // style={{\n                      //   // backgroundImage: \"inherit\",\n                      //   // backgroundColor: State.graph.nodes.color.from\n                      // }}\n                      />\n                      <SketchPicker\n                        color={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.from\n                        }\n                        onChange={\n                          console.log(\"gradient section first colorpicker onchange\")\n                          // it => (State.graph.nodes.color.from = it.hex)\n                        }\n                      />\n                    </Popover>\n                    {/* arrow  */}\n                    &nbsp; &#8594; &nbsp;\n                    {/* right colorpicker */}\n                    <Popover\n                      //previous!!\n                      // placement=\"bottom\"\n                      // modifiers={{\n                      //   preventOverflow: {\n                      //     enabled: false,\n                      //   },\n                      // }}\n                      interactionKind={PopoverInteractionKind.CLICK}\n                      popoverClassName=\"bp3-popover-content-sizing\"\n                      position={\"auto\"}\n                    >\n                      <Button\n                        text=\"  \"\n                        style={{\n                          backgroundImage: \"inherit\",\n                          // backgroundColor: State.graph.nodes.color.to\n                        }}\n                      />\n                      <SketchPicker\n                        color={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.to\n                        }\n                        onChange={\n                          console.log(\"gradient section second colorpicker onchange\")\n                          // it => (State.graph.nodes.color.to = it.hex)\n                        }\n                      />\n                    </Popover>\n                  </span>\n                </p>\n              </section>\n              {/* color : gradient preview */}\n              <section style={{ marginTop: \"-1em\" }}>\n                <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\n                  <defs>\n                    <linearGradient\n                      x1=\"0%\"\n                      y1=\"50%\"\n                      x2=\"100%\"\n                      y2=\"50%\"\n                      id=\"theGradient\"\n                    >\n                      <stop\n                        stopColor={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.from\n                        }\n                        stopOpacity=\"1\"\n                        offset=\"0%\"\n                      />\n                      <stop\n                        stopColor={\n                          \"#ffffff\"//used for test\n                          // State.graph.nodes.color.to\n                        }\n                        stopOpacity=\"1\"\n                        offset=\"100%\"\n                      />\n                    </linearGradient>\n                  </defs>\n                  <rect\n                    x=\"0\"\n                    y=\"0\"\n                    width=\"100%\"\n                    height=\"50\"\n                    fill=\"url(#theGradient)\"\n                  />\n                </svg>\n              </section>\n            </div>\n          </Collapsable>\n\n          {/* Collapsable Option: Size */}\n          <Collapsable\n            name=\"Size\"\n            isOpen={this.state.sizeOptionOpen}\n            onToggle={() =>\n              this.setState({\n                sizeOptionOpen: !this.state.sizeOptionOpen\n              })\n            }\n          >\n\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* size : scale by  */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale By:\n                <span style={{ float: \"right\" }}>\n                    <Select\n                      items={[\"item1\", \"item2\"]}\n                      itemRenderer={CommonItemRenderer}\n                      filterable={false}\n                      onItemSelect={\n                        console.log(\"size : scale by , component :select\")\n                        // it => (State.graph.nodes.sizeBy = it)\n                      }\n                    >\n                      <Button text={\"btn1\"\n                        // State.graph.nodes.sizeBy\n                      } />\n                    </Select>\n                  </span>\n                </p>\n              </section>\n              {/* size : scale type */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale Type:\n                <span style={{ float: \"right\" }}>\n                    <Select\n                      items={[\"item1\", \"item2\"]\n                        //Object.keys(scales)\n                      }\n                      itemRenderer={CommonItemRenderer}\n                      filterable={false}\n                      onItemSelect={\n                        console.log(\"size : scale type component: select\")\n                        // it => (State.graph.nodes.size.scale = it)\n                      }\n                    >\n                      <Button text={\"btn2\"\n                        // State.graph.nodes.size.scale\n                      } />\n                    </Select>\n                  </span>\n                </p>\n              </section>\n\n            Size Range:\n            <br />\n              <RangeSlider\n                min={1}\n                max={20}\n                stepSize={0.1}\n                labelStepSize={5}\n              // onChange={([a, b]) => {\n              //   runInAction(\"update scale\", () => {\n              //     State.graph.nodes.size.min = a;\n              //     State.graph.nodes.size.max = b;\n              //   });\n              // }}\n              // value={[\n              //   State.graph.nodes.size.min,\n              //   State.graph.nodes.size.max\n              // ]}\n              />\n            </div>\n          </Collapsable>\n\n          {/* Collapsable Option: Shape */}\n          <Collapsable\n            name=\"Shape\"\n            isOpen={this.state.shapeOptionOpen}\n            onToggle={() =>\n              this.setState({\n                shapeOptionOpen: !this.state.shapeOptionOpen\n              })\n            }\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* shape : node shape */}\n              <section> <p style={{ textAlign: \"left\" }}> Node Shape:\n              <span style={{ float: \"right\" }}>\n                  <Select\n                    items={[\n                      \"circle\",\n                      \"square\",\n                      \"triangle\",\n                      \"pentagon\",\n                      \"hexagon\",\n                      \"octagon\"\n                    ]}\n                    itemRenderer={CommonItemRenderer}\n                    filterable={false}\n                    onItemSelect={\n                      console.log(\" shape : node shape component: select\")\n                      // it => (State.graph.nodes.shape = it)\n                    }\n                  >\n                    <Button text={\"btn3\"\n                      // State.graph.nodes.shape\n                    } />\n                  </Select>\n                </span>\n              </p></section>\n            </div>\n          </Collapsable>\n          <br />\n          <small>\n\n            {/* {pluralize(\"node\", State.graph.overrides.size, true)}<span> </span> */}\n            {pluralize(\"node\", 0, true)}<span> </span>\n          have override styles.  &nbsp;\n          <Button className={\"pt-small\"} text=\"Clear\"\n            // onClick={() => (State.graph.overrides = new Map())} \n            />\n          </small>\n        </div>\n      );\n    }\n  }\n);\n// export default GlobalPanel;","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport State from \"../../state\";\nimport GlobalPanel from \"./GlobalPanel\";\nimport SelectionPanel from \"./SelectionPanel\";\n\nexport default observer(\n  class NodesPanel extends React.Component {\n    getRenderedNodes = () => {\n      if (State.graph.selectedNodes.length === 0) {\n        return (\n          <div>\n            <p>Modifying All Nodes</p>\n          </div>\n        );\n      }\n      return (\n        <p>{`Modifying ${pluralize(\n          \"Node\",\n          State.graph.selectedNodes.length,\n          true\n        )}`}</p>\n      );\n    };\n\n    render() {\n      return (\n        <div>\n          {this.getRenderedNodes()}\n          {State.graph.selectedNodes.length === 0 ? (\n            <GlobalPanel />\n          ) : (\n              <SelectionPanel />\n            )}\n        </div>\n      );\n    }\n  }\n);\n// export default NodesPanel;","import { makeAutoObservable, reaction } from \"mobx\";\nimport State from \"../state\";\nclass ComponentRef {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    static _instance: ComponentRef | null = null;\n\n    nodeDetail!: any;\n\n    multiNodeDetail!: any;\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (ComponentRef._instance === null) {\n            let instance = new ComponentRef();\n            ComponentRef._instance = instance;\n            return instance;\n        } else {\n            return ComponentRef._instance;\n        }\n    }\n}\n\nreaction(\n    () => State.graph.currentlyHoveredId,\n    () => ComponentRef.instance.nodeDetail?.forceUpdate()\n);\n\nexport default ComponentRef.instance;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, EditableCell, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state/index\";\nimport ComponentRef from \"../ComponentRef\";\n\nexport default observer(\n    class NodeDetail extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n\n        cellRenderer_property = (rowIndex: number) => {\n            return <Cell>{State.graph.metadata.nodeProperties[rowIndex]}</Cell>;\n        };\n\n        cellRenderer_value = (rowIndex: number) => {\n            let data = State.graph.rawGraph.getNodeAttribute(\n                State.graph.currentlyHoveredId,\n                State.graph.metadata.nodeProperties[rowIndex]\n            );\n            // return a Eidtable Cell where user can edit the value of certain property;\n            return <EditableCell\n                        value = {data}\n                        onChange={(newVal) =>\n                            State.graph.rawGraph.setNodeAttribute(State.graph.currentlyHoveredId,\n                                State.graph.metadata.nodeProperties[rowIndex],\n                                newVal)\n                        }\n                        onConfirm={(newVal) =>\n                            State.graph.rawGraph.setNodeAttribute(State.graph.currentlyHoveredId,\n                                State.graph.metadata.nodeProperties[rowIndex],\n                                newVal)\n                        }\n                        />\n        };\n\n        formatLongFloat = (nodeAttributeValue: any) => {\n            const num = Number(nodeAttributeValue);\n            if (Number.isNaN(num) || num > 1 || num < 0) {\n                // Do not format just return original\n                return nodeAttributeValue;\n            }\n            // Format to no more than 3 significant digit.\n            return Number.parseFloat(num.toString()).toPrecision(3);\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"node-details-table\"\n                        )}\n                    >\n                        <Table\n                            numRows={State.graph.metadata.nodeProperties.length}\n                            enableRowHeader={false}\n                        >\n                            <Column\n                                name=\"Properties\"\n                                cellRenderer={this.cellRenderer_property}\n                            />\n                            <Column\n                                name=\"Value\"\n                                cellRenderer={this.cellRenderer_value}\n                            />\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.nodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    class MultipleNodeDetail extends React.Component {\n        render() {\n            const formatLongFloat = (nodeAttributeValue: any) => {\n                const num = Number(nodeAttributeValue);\n                if (Number.isNaN(num) || num > 1 || num < 0) {\n                    // Do not format just return original\n                    return nodeAttributeValue;\n                }\n                // Format to no more than 3 significant digit.\n                return Number.parseFloat(num.toString()).toPrecision(3);\n            };\n\n            return (\n                <div\n                    className={classnames(\n                        \"left-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"nodes-details-table\"\n                        )}\n                    >\n                        <Table numRows={State.graph.selectedNodes.length}>\n                            {State.graph.metadata.nodeProperties.map((it) => (\n                                <Column\n                                    key={it}\n                                    name={it}\n                                    cellRenderer={(i) => (\n                                        <Cell>\n                                            {State.graph.rawGraph.getNodeAttribute(\n                                                State.graph.selectedNodes[\n                                                    i\n                                                ] as string,\n                                                it as string\n                                            )}\n                                        </Cell>\n                                    )}\n                                />\n                            ))}\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.multiNodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport {\n    Button,\n    Classes,\n    InputGroup,\n    Menu,\n    MenuItem,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n} from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport GraphDelegate from \"../../state/GraphDelegate\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\n\nexport default observer(\n    class SearchPanel extends React.Component {\n        renderSearchResults = () => {\n            return State.search.candidates.map((it) => {\n                return (\n                    <MenuItem\n                        text={it}\n                        onMouseOver={() => {\n                            State.search.isPreviewing = true;\n                            State.graph.currentlyHoveredId = it;\n                            State.graphDelegate.cameraFocusOn(it);\n                        }}\n                    ></MenuItem>\n                );\n            });\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div className={classnames(\"search\")}>\n                        {State.search.candidates.length != 0 && (\n                            <Menu\n                                large={true}\n                                className={classnames(\"search-menu\")}\n                                onMouseLeave={() => {\n                                    State.search.isPreviewing = false;\n                                }}\n                            >\n                                {this.renderSearchResults()}\n                            </Menu>\n                        )}\n                        <InputGroup\n                            asyncControl={true}\n                            large={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange(\n                                (value) => (State.search.searchStr = value)\n                            )}\n                            placeholder=\"Search any Node...\"\n                            value={State.search.searchStr}\n                        />\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport { Menu, MenuItem, MenuDivider, Classes } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { computed, makeObservable } from \"mobx\";\n\nexport default observer(\n    class RightClickNodePanel extends React.Component {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        render() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem icon=\"graph-remove\" text=\"Delete Node\" />\n                    <MenuDivider />\n                    <MenuItem icon=\"new-link\" text=\"Add Edge\" />\n                    <MenuItem icon=\"cross\" text=\"Delete Edge\" />\n                </Menu>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Tab, Tabs, Button } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\n// import { addNode } from \"../ipc/client\";\nimport NodesPanel from \"./panels/NodesPanel\";\nimport EdgesPanel from \"./panels/EdgesPanel\";\nimport LabelsPanel from \"./panels/LabelsPanel\";\nimport NodeDetail from \"./panels/NodeDetailPanel\";\nimport MultiDetailPanel from \"./panels/MultiDetailPanel\";\nimport SearchPanel from \"./panels/SearchPanel\";\nimport RightClickNodePanel from \"./panels/RightClickNodePanel\";\n// import Legends from \"./Legends\";\n// // import StatusBar from './StatusBar';\n// import SelectionActionPanel from \"./panels/SelectionActionPanel\";\n\n// TODO: migrate to simple select\n\nlet RenderOptionsCard = observer(\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <h2>Graph Options</h2>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n//\n\nexport default observer(\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.isRenderOptionsCardHidden = !State.preferences\n                .isRenderOptionsCardHidden;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"left-overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.isRenderOptionsCardHidden\n                                    ? this.optionsInvisible\n                                    : this.optionsVisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            ></Button>\n                            <br />\n                            <RenderOptionsCard />\n                        </div>\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.isRenderOptionsCardHidden\n                                        ? this.sideButtonVis\n                                        : this.sideButtonInv\n                                }\n                            ></Button>\n                        </div>\n                    </div>\n\n                    {/* single selected */}\n                    {/* {State.graph.selectedNodes.length === 1 && (\n                        <NodeDetail node={State.graph.currentlyHoveredId} />\n                    )} */}\n                    {State.graph.currentlyHoveredId != \"undefined\" &&\n                        State.graph.selectedNodes.length == 0 && <NodeDetail />}\n\n                    {/* multiple selected */}\n                    {/* {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n                        <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n                    )} */}\n                    {State.graph.selectedNodes.length != 0 && (\n                        <MultiDetailPanel />\n                    )}\n\n                    <SearchPanel />\n                    {State.preferences.rightClickNodePanelOpen && (\n                        <RightClickNodePanel />\n                    )}\n\n                    {/* <Legends />\n          <StatusBar /> */}\n                    {/* {// This menu only shows when there are nodes selected\n            State.graph.selectedNodes.length > 0 && !State.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\n          } */}\n                </div>\n            );\n        }\n    }\n);\n\n// export default FloatingCards;\n","import React from \"react\";\nimport { Provider } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    Classes,\n    FocusStyleManager,\n    NonIdealState,\n} from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/visualizer\";\n// import NodeDetail from \"./components/panels/NodeDetailPanel\";\nimport State from \"./state\";\nimport EdgesPanel from \"./components/panels/EdgesPanel\";\nimport LabelsPanel from \"./components/panels/LabelsPanel\";\nimport SelectionPanel from \"./components/panels/SelectionPanel\";\nimport GlobalPanel from \"./components/panels/GlobalPanel\";\n// import NodesPanel from \"./components/panels/NodesPanel\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}