{"version":3,"sources":["state/PreferencesStore.ts","components/ComponentRef.tsx","state/GraphMutation.ts","state/GraphStore.ts","state/ImportStore.ts","state/ProjectStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/CssStore.ts","state/Cluster3dObjectStore.ts","state/GraphDelegate.ts","state/index.ts","components/utils/ClusterChooser.tsx","images/logo.png","components/utils/SimpleSelect.tsx","components/Navbar.tsx","components/utils/Collapsable.tsx","constants/index.ts","components/dialogs/ImportCSVDialog.tsx","components/dialogs/ImportGEXFDialog.tsx","components/dialogs/ExportDialog.tsx","components/utils/DataSheetDialogWrapper.tsx","components/utils/InputFormUtils.ts","components/dialogs/NodeDataSheetDialog.tsx","components/utils/NodeChooser.tsx","components/dialogs/EdgeDataSheetDialog.tsx","components/utils/NodeAdder.tsx","components/dialogs/AddNodeDialog.tsx","components/Dialogs.tsx","components/visualize/visualizer.tsx","components/panels/GlobalPanel.tsx","components/utils/SwitchCollapsable.tsx","components/panels/SelectionPanel.tsx","components/panels/NodesPanel.tsx","components/panels/EdgesPanel.tsx","components/panels/LabelsPanel.tsx","components/panels/NodeDetailPanel.tsx","components/panels/MultiDetailPanel.tsx","components/panels/SearchPanel.tsx","components/panels/RightClickNodePanel.tsx","components/panels/RightClickBackgroundPanel.tsx","components/panels/DeleteEdgeInteractionPanel.tsx","components/FloatingCards.tsx","App.js","reportWebVitals.js","index.js"],"names":["PreferencesStore","rightClickBackgroundPanelOpen","rightClickNodePanelOpen","rightClickPositionX","rightClickPositionY","deleteEdgePanelOpen","preferenceDialogOpen","darkMode","statisticsDialogOpen","helpDialogOpen","neighborDialogOpen","AddNodeDialogOpen","nodeDataSheetDialogOpen","edgeDataSheetDialogOpen","isRenderOptionsCardHidden","view","controlType","makeAutoObservable","this","ComponentRef","nodeDetail","multiNodeDetail","visualizer","_instance","instance","reaction","State","graph","currentlyHoveredId","forceUpdate","GraphMutation","_this","that","node","attributes","rawGraph","addNode","refreshGraph","nodeId","dropNode","source","target","addEdge","edge","dropEdge","GraphStore","Graph","allowSelfLoops","multi","type","mutating","selectedNodes","selectedNode","metadata","snapshotName","nodeProperties","_visualize","id","val","isClusterNode","isClusterLink","_rawGraph","forEachNode","decorateRawNode","forEachEdge","decorateRawEdge","_metadata","decorateRawGraph","flush","cluster","clusterBy","updateVisualizationGraph","order","size","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importCSVDialogOpen","importSamplesDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","result","replace","parse","comment","trim","auto_parse","skip_empty_lines","undefined","err","Toaster","create","position","Position","TOP","show","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","readNodeCSV","forEach","toString","readEdgeCSV","hasNode","Object","keys","readGEXF","entries","getNodeAttributes","nodes","key","push","clusterProperties","edgeProperties","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","length","join","console","log","it","onerror","error","action","onClick","window","location","reload","text","nodeFileConfig","ProjectStore","currentSnapshotName","exportDialogOpen","renameSnapshotDialogOpen","SearchStore","isPreviewing","searchStr","observable","ref","list","searchStrIgnoreCase","toLocaleLowerCase","match","searchId","includes","searchQuery","searchAttr","searchValue","hasOwnProperty","ClusterStore","by","keyValueMap","Map","attribute","set","Array","from","Set","keyAttribute","values","attributeKeysMap","getAttributeValues","value","get","colors","randomcolor","seed","count","THREE","x","y","z","CssStore","colorBy","color","scale","to","sizeBy","min","max","labelBy","shape","labelSize","labelLength","edges","clusterForce","nodeResolution","isAnimating","enableDegree","enableDensity","enableDiameter","enableCoefficient","enableComponent","Cluster3dObjectStore","threeScene","fusionClusterObjects","clusterObjectsMap","initialMap","attributePoints","createMeshGroup","add","convexHullObjects","initEmptyMapAndFusion","group","newBufferGeometry","convexHullObject","children","mesh","geometry","copy","remove","dispose","material","newMap","points","ConvexGeometry","geom","name","meshMaterial","attributeColor","transparent","opacity","side","wireFrameMat","wireframe","wireframeLinecap","SceneUtils","createMultiMaterialObject","GraphDelegate","graphDelegateMethods","nodeVisibility","nodeObject","linkVisibility","clusterObject","highlightLink","_graphDelegateMethods","scene","newGraph","addInvisibleClusterNode","tempGraph","links","oldGraph","graphCopy","names","index","clusterID","visualize","attributeKeys","distance","getNodeAttribute","distRatio","Math","hypot","cameraPosition","link","_if","_else","_default","graphDelegate","sourceId","targetId","force","d3Force","css","d3ReheatSimulation","AppState","preferences","import","search","project","privateConstructor","_state","autorun","renderImportEdgePreview","renderImportNodePreview","resumeAnimation","pauseAnimation","observer","itemRenderer","item","props","handleClick","propertiesWithNone","unshift","items","showNone","fullProperties","filterable","onItemSelect","selected","onSelect","syncWith","React","Component","defaultProps","CommonItemRenderer","className","classnames","Classes","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","title","src","logo","width","height","alt","NAVBAR_HEADING","icon","BOTTOM","BUTTON","MINIMAL","label","checked","onChange","ALIGN_RIGHT","setCluster","NAVBAR_DIVIDER","disabled","open","elevation","Elevation","LARGE","FILL","rightIcon","isOpen","onToggle","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","PreviewTable","renderWrapper","numRows","selectedRegions","indexOf","rows","cols","cellRenderer","i","state","loading","available","nodesOpen","edgesOpen","canImport","renderNodesSelection","Collapsable","setState","CONTROL_GROUP","INPUT_GROUP","onInputChange","event","files","renderEdgesSelection","newDelimiter","style","minWidth","DARK","onClose","DIALOG_BODY","targetValue","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","DISABLED","PRIMARY","importGraphFromCSV","then","res","setGraph","fileIsSelect","importGraphFromGEXF","renderImportButton","ready","write","headers","exportData","export","data","_id","interactive","ONE","minimal","computeGEXFFile","filename","computeNodeFile","separator","computeEdgeFile","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","for","onOpened","setTimeout","renderTable","handleStringChange","handler","stringifyNodeDetail","parseNumberOrString","numberVal","Number","isNaN","GraphNodeTable","filterQuery","addNodeDialogOpen","deleteAlertOpen","nodeToDelete","renderColumns","rowIndex","columnIndex","renderCell","filter","element","cell","filteredTable","newVal","setValue","onConfirm","tooltip","setNodeAttribute","deleteNodeRenderer","deleteNodeAlert","cancelButtonText","confirmButtonText","onCancel","textAlign","newTable","asyncControl","leftIcon","placeholder","fill","defaultRowHeight","SUCCESS","select","labelFor","labelInfo","itemPredicate","query","noResults","GraphEdgeTable","addEdgeDialogOpen","edgeToDelete","chosenSource","chosenTarget","deleteEdgeRenderer","deleteEdgeAlert","addEdgeDialog","onClosed","hasEdge","renderMode","RenderMode","NONE","newNodeId","canImportTag","renderAttributesForm","newValue","componentDidMount","prop","autoFocus","rightElement","onAdded","Dialogs","display","visualizationGraph","graphRef","createRef","nodeHover","previousNode","getNodeId","nodeSelect","ctrlKey","shiftKey","splice","graphMethods","refresh","nodeRightClick","backgroundRightClick","renderGraph","graphData","onNodeDragEnd","fx","fy","fz","onBackgroundRightClick","linkWidth","ifHighlightLink","linkColor","linkDirectionalParticles","linkDirectionalParticleWidth","onEngineTick","clusterDelegation","nodeColor","onNodeClick","onNodeRightClick","onBackgroundClick","onNodeHover","current","mountDelegateMethods","timeOutRef","sizeOptionOpen","colorOptionOpen","shapeOptionOpen","CARD","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","backgroundImage","marginTop","x1","y1","x2","y2","stopColor","stopOpacity","offset","stepSize","labelStepSize","initialValue","pluralize","labelOptionOpen","RIGHT","getRenderedNodes","thicknessOptionOpen","forceOptionOpen","backgroundColor","hex","updateClusterForce","marginLeft","cellRenderer_property","cellRenderer_value","onNode","formatLongFloat","nodeAttributeValue","num","parseFloat","toPrecision","enableRowHeader","renderSearchResults","candidates","onMouseOver","cameraFocusOn","large","onMouseLeave","makeObservable","stylePosition","computed","top","left","ELEVATION_1","targetNode","neighbors","edgeKey","neighborsRenderer","forEachNeighbor","neighbor","RenderOptionsCard","animate","panel","Expander","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","ELEVATION_2","paddingTop","paddingRight","paddingBottom","NodeDetailPanel","MultiDetailPanel","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3011d429.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    rightClickBackgroundPanelOpen = false;\n    rightClickNodePanelOpen = false;\n    rightClickPositionX = 30;\n    rightClickPositionY = 30;\n\n    deleteEdgePanelOpen = false;\n\n    preferenceDialogOpen = false;\n\n    darkMode = true;\n\n    statisticsDialogOpen = false;\n    helpDialogOpen = false;\n    neighborDialogOpen = false;\n    AddNodeDialogOpen = false;\n\n    nodeDataSheetDialogOpen = false;\n    edgeDataSheetDialogOpen = false;\n\n    isRenderOptionsCardHidden = true;\n\n    view = \"3D\";\n    controlType: \"trackball\" | \"orbit\" | \"fly\" = \"trackball\";\n}\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport State from \"../state\";\n\nclass ComponentRef {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    static _instance: ComponentRef | null = null;\n\n    nodeDetail!: any;\n\n    multiNodeDetail!: any;\n\n    visualizer!: any;\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (ComponentRef._instance === null) {\n            let instance = new ComponentRef();\n            ComponentRef._instance = instance;\n            return instance;\n        } else {\n            return ComponentRef._instance;\n        }\n    }\n}\n\nreaction(\n    () => State.graph.currentlyHoveredId,\n    () => ComponentRef.instance.nodeDetail?.forceUpdate()\n);\n\nexport default ComponentRef.instance;\n","import { Attributes, EdgeKey, NodeKey } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport GraphStore from \"./GraphStore\";\n\n/**\n * the wrapper mutating function that relates to the mutation of the rawGraph DS\n * all the mutation of the Graph should all go through this API rather than calling on rawGraph directly.\n *\n * @export\n * @class GraphMutation\n */\nexport default class GraphMutation {\n    constructor(_this: GraphStore) {\n        makeAutoObservable(this);\n        this.that = _this;\n    }\n\n    private that!: GraphStore;\n\n    public addNode(node: NodeKey, attributes?: Attributes): void {\n        this.that.rawGraph.addNode(node, attributes);\n        this.that.refreshGraph();\n    }\n\n    public dropNode(nodeId: string): void {\n        this.that.rawGraph.dropNode(nodeId);\n        this.that.refreshGraph();\n    }\n\n    public addEdge(\n        source: NodeKey,\n        target: NodeKey,\n        attributes?: Attributes\n    ): void {\n        this.that.rawGraph.addEdge(source, target, attributes);\n        this.that.refreshGraph();\n    }\n\n    public dropEdge(edge: EdgeKey): void {\n        this.that.rawGraph.dropEdge(edge);\n        this.that.refreshGraph();\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { Attributes, NodeKey, NodeEntry } from \"graphology-types\";\nimport ComponentRef from \"../components/ComponentRef\";\nimport State from \".\";\nimport GraphMutation from \"./GraphMutation\";\n\nexport interface IMetaData {\n    snapshotName: string;\n\n    // attributes of nodes in imported graph\n    nodeProperties: string[];\n}\n\n/**\n * the class to store a raw graph as well as the related information\n \n * @export\n * @class GraphStore\n */\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.mutating = new GraphMutation(this);\n    }\n\n    /**\n     * the graphology data structure to store a graph.\n     * has a lot of APIs to manipulate as well as iterate through the graph\n     *\n     * @see graphology\n     *\n     * @type {Graph}\n     */\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: true,\n        multi: false,\n        type: \"undirected\",\n    });\n\n    /**\n     * should be called when individual nodes are added to the graph.\n\n     * add the CustomNodeObject to node attributes stored in the data structure\n     * @see CustomNodeObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} node\n     * @param {Attributes} attributes\n     */\n    decorateRawNode(node: string, attributes: Attributes) {\n        attributes._visualize = {\n            id: node,\n            val: 1, // to be changed, to represent the size of the node\n            isClusterNode: false, // if is clusterNode, then the front-end will ignore this node\n        };\n    }\n\n    /**\n     * should be called when individual edges are added to the graph.\n     *\n     * add the CustomLinkObject to node attributes stored in the data structure\n     * @see CustomLinkObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} source\n     * @param {string} target\n     * @param {Attributes} attributes\n     */\n    decorateRawEdge(source: string, target: string, attributes: Attributes) {\n        attributes._visualize = {\n            source: source,\n            target: target,\n            isClusterLink: false, // if is clusterLink, then the front-end will ignore this link\n        };\n    }\n\n    /**\n     * should be called on every graph import\n     * add the the _visualize to every links inside the specified graph\n     *\n     * the _visualize is for storing the object to be send to front-end to render the graph\n     *\n     * @param {Graph} _rawGraph\n     * @return {*}  {Graph}\n     */\n    decorateRawGraph(_rawGraph: Graph): Graph {\n        _rawGraph.forEachNode((node, attributes) =>\n            this.decorateRawNode(node, attributes)\n        );\n\n        _rawGraph.forEachEdge((edge, attributes, source, target) =>\n            this.decorateRawEdge(source, target, attributes)\n        );\n        return _rawGraph;\n    }\n\n    /**\n     * proxy method to set the new graph\n     * if intend to set a new graph, please use this method instead of directly modify GraphStore\n     *\n     * @param {Graph} newGraph\n     * @param {IMetaData} metadata\n     */\n    public setGraph(_rawGraph: Graph, _metadata: IMetaData | null = null) {\n        this.rawGraph = this.decorateRawGraph(_rawGraph);\n        if (_metadata) {\n            this.metadata = _metadata;\n        }\n        this.flush();\n        State.cluster.clusterBy = null;\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * should be called when the graph gets updated (the data inside the graph gets updated, or the attribute to be clustered has changed)\n     *\n     * @memberof GraphStore\n     */\n    public refreshGraph() {\n        this.flush();\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * the wrapper methods to mutate the graph\n     * all the mutations of the graph should go through this API rather than calling this.rawGraph.[mutate]\n     *\n     * has basic functions like addNode, dropNode, addEdge, dropEdge...\n     *\n     * @see {GraphMutation}\n     */\n    mutating: GraphMutation;\n\n    /**\n     * the currently selected node ids\n     * the singleNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string[]}\n     */\n    selectedNodes: string[] = [];\n\n    /**\n     * the currently selected node id\n     *\n     * @type {string}\n     */\n    selectedNode: string | null = null;\n\n    /**\n     * the currently hovered node id\n     * the multiNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string}\n     */\n    currentlyHoveredId: string | null = null;\n\n    /**\n     * should call this on every refresh of graph DS\n     *\n     */\n    flush() {\n        this.selectedNodes = [];\n        this.selectedNode = null;\n        this.currentlyHoveredId = null;\n    }\n\n    /**\n     * if currently there is a graph in the dataset\n     *\n     * @readonly\n     */\n    get hasGraph() {\n        return this.rawGraph.order && this.rawGraph.size !== 0;\n    }\n\n    /**\n     * the metadata related to the raw graph\n     * should be updated if a new graph is imported\n     *\n     */\n    metadata: IMetaData = {\n        snapshotName: \"SNAPSHOT\",\n        nodeProperties: [],\n    };\n}\n","import { Intent, Position, Toaster } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\n\nexport interface INodeFileConfig {\n    // the file is successfully parsed and ready for display\n    isReady: boolean;\n    parseError: boolean;\n    path: string;\n\n    // has header at the top\n    hasHeader: boolean;\n\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n    topN: any[];\n    //names for the columns of this csv\n    columns: string[];\n    mapping: {\n        id: string;\n    };\n    delimiter: string;\n}\n\nexport interface IEdgeFileConfig {\n    isReady: boolean;\n    parseError: boolean;\n\n    // should save the csv to temp for further change the cluster attribute\n    path: string;\n    hasHeader: boolean;\n\n    // array of objects storing the\n    topN: any[];\n    columns: string[];\n    mapping: {\n        fromId: string;\n        toId: string;\n    };\n    delimiter: string;\n}\n\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    importCSVDialogOpen = false;\n    importSamplesDialogOpen = false;\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as INodeFileConfig,\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as IEdgeFileConfig,\n    };\n\n    /**\n     * read the CSV file specified by fileObject, with options defined by other paras\n     * and return a list of objects containing the key-value pair of attribute-value\n     *\n     * @param {File} fileObject\n     * @param {boolean} hasHeader\n     * @param {string} delimiter\n     * @return {*}  {Promise<Object[]>}\n     * where Object is of { attribute: number | string, anotherAttribute: number | string, ... } type\n     */\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    /**\n     * parse the graph from import GEXF file specified in selectedGEXFFileFromInput\n     * and return a Graph object\n     *\n     * @private\n     * @return {*}  {Promise<Graph>}\n     */\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, reader.result as string));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    /**\n     * will create a Graph structure to store the nodes and edges in the imported File\n     * should handle whether or not have the NodeFile, whether or not have the header of each file\n     * if successfully imported, change the .isReady to be true\n     *\n     * @return {*}\n     */\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: true,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            tempNodes = await this.readNodeCSV();\n            tempNodes.forEach((node) => {\n                let nodeId = node[config.nodeFile.mapping.id].toString();\n                delete node[config.nodeFile.mapping.id];\n                graph.addNode(nodeId, node);\n            });\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, { id: fromId });\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, { id: toId });\n            }\n            graph.addEdge(fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            },\n        };\n    }\n\n    //TODO:import 里的id和cluster， source target还没设置\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n\n        for (const [key] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n                clusterProperties: null,\n                edgeProperties: [\"source_id\", \"target_id\"],\n            },\n        };\n    }\n\n    /**\n     * change the importConfig.edgeFile.topN to be the top 10 parsed elements in the input edge file\n     * change the importConfig.edgeFile.columns to be the attributes of the imported edge file\n     * set the .mapping.fromId and .mapping.toId to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedEdgeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     */\n    public async renderImportEdgePreview() {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter: delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter: delimiter,\n                          });\n                    edgeFileConfig.topN = it;\n                    edgeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (edgeFileConfig.columns.length >= 2) {\n                        edgeFileConfig.mapping.fromId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                        edgeFileConfig.isReady = true;\n                    } else if (edgeFileConfig.columns.length === 1) {\n                        edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        edgeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n\n    /**\n     * change the importConfig.nodeFile.topN to be the top 10 parsed elements in the input node file\n     * change the importConfig.nodeFile.columns to be the attributes of the imported node file\n     * set the .mapping.id .mapping.cluster to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedNodeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     */\n    public async renderImportNodePreview() {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter,\n                          });\n                    nodeFileConfig.topN = it;\n                    nodeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (nodeFileConfig.columns.length >= 1) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                        nodeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        nodeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class ProjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    currentSnapshotName = \"Untitled\";\n\n    exportDialogOpen = false;\n    renameSnapshotDialogOpen = false;\n}\n","import Graph from \"graphology\";\nimport { makeAutoObservable, observable } from \"mobx\";\n\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n\n    // if is previewing, ignore all mouse hovers detected by NodeDetailPanel because it is showing the detail of selected node\n    isPreviewing = false;\n\n    // can use defined regex\n    // id:123\n    // attr:color:red\n    searchStr = \"\";\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     * @memberof ClusterStore\n     */\n    rawGraph!: Graph;\n\n    // contains node ids\n    get candidates(): string[] {\n        let list: string[] = [];\n        let searchStrIgnoreCase = this.searchStr.toLocaleLowerCase();\n        if (searchStrIgnoreCase.match(/^id:.+/g)) {\n            const searchId = searchStrIgnoreCase.split(/^id:/g)[1].trim();\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(searchId)) {\n                    list.push(node);\n                }\n            });\n        } else if (searchStrIgnoreCase.match(/^attr:.+:.+/g)) {\n            let searchQuery = searchStrIgnoreCase\n                .split(/^attr:/g)[1]\n                .trim()\n                .split(/:/g);\n            const searchAttr = searchQuery[0].trim();\n            const searchValue = searchQuery[1].trim();\n            this.rawGraph.forEachNode((node, attributes) => {\n                if (\n                    attributes.hasOwnProperty(searchAttr) &&\n                    (attributes[searchAttr] as string)\n                        .toLocaleLowerCase()\n                        .includes(searchValue)\n                ) {\n                    list.push(node);\n                }\n            });\n        } else if (this.searchStr === \"\") {\n        } else {\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(this.searchStr)) {\n                    list.push(node);\n                }\n            });\n        }\n\n        return list;\n    }\n}\n","import { makeAutoObservable, observable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\nimport State from \".\";\n\n/**\n * all the computed values get from the rawGraph\n *\n * @export\n * @class ClusterStore\n */\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n    /**\n     * @observable\n     *\n     * attention: please use setCluster() to alter this data\n     * Specify which attribute to be clustered\n     * the default value should be null, and front-end graph will interpret this to Not-Cluster\n     *\n     *\n     */\n    clusterBy: string | null = null;\n\n    /**\n     * the setter of clusterBy\n     * will update the front-end 3d graph about the cluster changes\n     *\n     * @param {(string | null)} by\n     */\n    setCluster(by: string | null) {\n        this.clusterBy = by;\n        State.graph.refreshGraph();\n    }\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     */\n    rawGraph!: Graph;\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the id of a Node -> the value of the attribute specified by $clusterBy]\n     *\n     * @readonly\n     * @type {(Map<string, string | number>)}\n     */\n    get keyAttribute(): Map<string, string | number> {\n        const keyValueMap = new Map<string, string | number>();\n        if (this.clusterBy === null) {\n            return keyValueMap;\n        }\n        const attribute = this.clusterBy as string;\n\n        this.rawGraph?.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                keyValueMap.set(key, attributes[attribute]);\n            } else {\n                // this attribute is undefined in this node\n                keyValueMap.set(key, \"undefined\");\n            }\n        });\n        return keyValueMap;\n    }\n\n    /**\n     * the possible attribute values of the attribute defined by $clusterBy\n     *\n     * @readonly\n     * @type {((string | number)[])}\n     */\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> a list of Node ids]\n     *\n     * @readonly\n     * @type {(Map<string | number, string[]>)}\n     */\n    get attributeKeys(): Map<string | number, string[]> {\n        const attributeKeysMap = new Map<string | number, string[]>();\n        this.getAttributeValues.forEach((value) => {\n            attributeKeysMap.set(value, []);\n        });\n        this.keyAttribute.forEach((value, key) => {\n            attributeKeysMap.get(value)?.push(key);\n        });\n        return attributeKeysMap;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the random colour of this cluster]\n     * used to avoid re-compute the colours on every frame refresh\n     *\n     * @readonly\n     * @type {(Map<string | number, string>)}\n     */\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.forEach((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the Nodes points in that cluster]\n     * will change on every frame refresh as the Node's position keeps changing.\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Vector3[]>)}\n     */\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.forEach((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        this.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n}\n","import { autorun, makeAutoObservable } from \"mobx\";\nimport State from \".\";\n\n/**\n * the configurations to set to cascade the graph\n *\n * @export\n * @class CssStore\n */\nexport default class CssStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    config = {\n        nodes: {\n            colorBy: \"pagerank\",\n            color: {\n                scale: \"Linear Scale\",\n                from: \"#448AFF\",\n                to: \"#E91E63\",\n            },\n            sizeBy: \"pagerank\",\n            size: {\n                min: 2,\n                max: 10,\n                scale: \"Linear Scale\",\n            },\n            labelBy: \"node_id\",\n            shape: \"circle\",\n            labelSize: 1,\n            labelLength: 10,\n        },\n        edges: {\n            color: \"#7f7f7f\",\n        },\n    };\n\n    clusterForce: number = 20;\n\n    nodeResolution: number = 12;\n\n    isAnimating: boolean = true;\n\n    enableDegree = true;\n    enableDensity = true;\n    enableDiameter = false;\n    enableCoefficient = true;\n    enableComponent = true;\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport { SceneUtils } from \"three/examples/jsm/utils/SceneUtils.js\";\nimport State from \".\";\n\nexport default class Cluster3dObjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * the THREE.js WebGL Scene of the visualization\n     *\n     */\n    threeScene!: THREE.Scene;\n\n    /**\n     * all the clusters should form a 3D Group to be imported into Scene\n     * if no cluster attribute is set, this will be set to null\n     *\n     * @type {THREE.Group}\n     */\n    fusionClusterObjects: THREE.Group | null = null;\n\n    /**\n     * the map between attribute value and its corresponding Mesh Group\n     * if you want to update the geometry, plz update all the children inside which Mesh Group\n     * if no cluster attribute is set, this will be set to null\n     *\n     * @type {(Map<string | number, THREE.Group> | null)}\n     */\n    clusterObjectsMap: Map<string | number, THREE.Group> | null = null;\n\n    /**\n     * create empty BufferGeometry and mesh with colour\n     * then initialize $fusionClusterObjects and $clusterObjectsMap with it\n     * and then add the THREE.Group to the Scene\n     *\n     */\n    initEmptyMapAndFusion() {\n        let initialMap = new Map<string | number, THREE.Group>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            initialMap.set(\n                key,\n                this.createMeshGroup(new THREE.BufferGeometry(), key)\n            );\n        });\n\n        this.clusterObjectsMap = initialMap;\n        this.fusionClusterObjects = new THREE.Group();\n        initialMap.forEach((value) => {\n            this.fusionClusterObjects?.add(value);\n        });\n        this.threeScene.add(this.fusionClusterObjects);\n    }\n\n    /**\n     * should be called on each render frame\n     * will update the geometry inside each cluster object\n     *\n     * if is the first time (both are null), will run initEmptyMapAndFusion() first\n     *\n     * if meet with clusterBy == null, will dispose all Object3d\n     *\n     */\n    clusterDelegation() {\n        if (State.cluster.clusterBy === null) {\n            if (this.fusionClusterObjects) {\n                this.threeScene.remove(this.fusionClusterObjects);\n                this.dispose();\n            }\n            return;\n        } else {\n            if (\n                this.fusionClusterObjects == null ||\n                this.convexHullObjects == null\n            ) {\n                this.initEmptyMapAndFusion();\n            }\n            this.clusterObjectsMap?.forEach(\n                (group: THREE.Group, key: string | number) => {\n                    let newBufferGeometry = this.convexHullObject(key);\n                    group.children.forEach((mesh: any) => {\n                        mesh.geometry.copy(newBufferGeometry);\n                    });\n                }\n            );\n        }\n    }\n\n    /**\n     * dispose the geometries and materials in every clusterObject\n     * and set these props to be null, which indicates that no additional 3d object is added into Scene\n     *\n     */\n    dispose() {\n        this.clusterObjectsMap?.forEach((group: THREE.Group) => {\n            group.children.forEach((mesh: any) => {\n                let material = mesh.material as THREE.Material;\n                material.dispose();\n                mesh.geometry.dispose();\n            });\n        });\n        this.clusterObjectsMap = null;\n        this.fusionClusterObjects = null;\n    }\n\n    /**\n     * the map between the value of the cluster and the BufferGeometry that this cluster created\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Group>)}\n     */\n    get convexHullObjects(): Map<string | number, THREE.BufferGeometry> {\n        let newMap = new Map<string | number, THREE.BufferGeometry>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            newMap.set(key, this.convexHullObject(key));\n        });\n        return newMap;\n    }\n\n    /**\n     * get the computed convexHull BufferGeometry of the specified attribute value\n     *\n     * @param {(string | number)} key\n     * @returns {*}  {THREE.BufferGeometry}\n     */\n    convexHullObject(key: string | number): THREE.BufferGeometry {\n        let points = State.cluster.attributePoints.get(key) as THREE.Vector3[];\n        if (!points || points.length < 4) {\n            return new THREE.BufferGeometry();\n        } else {\n            return new ConvexGeometry(Array.from(points));\n        }\n    }\n\n    /**\n     * create a Three.Group, which contains 2 Three.Mesh, of the input geometry\n     *\n     * @private\n     * @param {THREE.BufferGeometry} geom\n     * @param {(string | number)} name\n     * @returns {*}  {THREE.Group}\n     *\n     * @see THREE.Mesh\n     */\n    private createMeshGroup(\n        geom: THREE.BufferGeometry,\n        name: string | number\n    ): THREE.Group {\n        const meshMaterial = new THREE.MeshBasicMaterial({\n            color: State.cluster.attributeColor.get(name),\n            transparent: true,\n            opacity: 0.15,\n        });\n        meshMaterial.side = THREE.DoubleSide; //将材质设置成正面反面都可见\n        const wireFrameMat = new THREE.MeshBasicMaterial();\n        wireFrameMat.wireframe = true; //把材质渲染成线框\n        wireFrameMat.wireframeLinecap = \"round\";\n\n        let group = SceneUtils.createMultiMaterialObject(geom, [\n            meshMaterial,\n            wireFrameMat,\n        ]);\n        group.name = \"THREE_CLUSTER_\" + name;\n        return group;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport State from \".\";\nimport {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport Cluster3dObjectStore from \"./Cluster3dObjectStore\";\n\nexport interface CustomNodeObject extends NodeObject {\n    val?: number;\n    isClusterNode?: boolean;\n}\n\nexport interface CustomLinkObject extends LinkObject {\n    isClusterLink?: boolean;\n}\n\nexport default class GraphDelegate {\n    constructor() {\n        makeAutoObservable(this);\n        this.clusterObject = new Cluster3dObjectStore();\n    }\n\n    /**\n     * assign the force-graph methods to this class\n     * should be called as long as the visualizer react component is mounted\n     *\n     * @param {ForceGraphMethods} _graphDelegateMethods\n     */\n    mountDelegateMethods(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.clusterObject.threeScene = this.graphDelegateMethods.scene();\n    }\n\n    /**\n     * the ForceGraphMethods exposed by the visualization force-graph\n     *\n     * @see ForceGraphMethods\n     *\n     * @type {ForceGraphMethods}\n     */\n    graphDelegateMethods!: ForceGraphMethods;\n\n    /**\n     * compute the delegate graph that will be used by the ForceGraph3D\n     * will add invisible cluster nodes and edges to balance the clustered graph and adjust force\n     * the NodeObject and LinkObject inside attributes (named _visualize) will be used.\n     *\n     * nodes and edges with the show=false will be ignored in this case\n     *\n     */\n\n    visualizationGraph() {\n        let newGraph: Graph;\n        if (State.cluster.clusterBy === null) {\n            newGraph = State.graph.rawGraph;\n        } else {\n            newGraph = this.addInvisibleClusterNode(\n                State.graph.decorateRawGraph(State.graph.rawGraph)\n            );\n        }\n        let tempGraph = {\n            nodes: [] as CustomNodeObject[],\n            links: [] as LinkObject[],\n        };\n        newGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        newGraph.forEachEdge((edge, attributes) => {\n            tempGraph.links.push(attributes[\"_visualize\"]);\n        });\n        return tempGraph;\n    }\n\n    /**\n     * return a new graph that contains the invisible clusters, formed as nodes\n     * as well as the edges that connected to the cluster node to simulate the force within the same cluster\n     * the new graph is a deep copy of the old node, so no worries of the original graph DS\n     *\n     * @private\n     * @param {Graph} oldGraph\n     * @returns {*}  {Graph}\n     */\n    private addInvisibleClusterNode(oldGraph: Graph): Graph {\n        let graphCopy = oldGraph.copy();\n        let names = [\n            \"_CLUSTER_1_\",\n            \"_CLUSTER_2_\",\n            \"_CLUSTER_3_\",\n            \"_CLUSTER_4_\",\n            \"_CLUSTER_5_\",\n            \"_CLUSTER_6_\",\n            \"_CLUSTER_7_\",\n            \"_CLUSTER_8_\",\n            \"_CLUSTER_9_\",\n            \"_CLUSTER_10_\",\n        ];\n        for (let index = 0; index < names.length; index++) {\n            State.cluster.getAttributeValues.forEach(\n                (attribute: string | number) => {\n                    // if a node does not belong to any cluster, a undefined will be formed with no cluster to generate\n                    if (attribute === \"undefined\") return;\n\n                    let clusterID = names[index] + attribute;\n                    let visualize: CustomNodeObject = {\n                        id: clusterID,\n                        val: 1,\n                        isClusterNode: true,\n                    };\n                    graphCopy.addNode(clusterID, { _visualize: visualize });\n\n                    // add edges to simulate the force of the same cluster\n                    State.cluster.attributeKeys\n                        .get(attribute)\n                        ?.forEach((target) => {\n                            let visualize: CustomLinkObject = {\n                                source: clusterID,\n                                target: target,\n                                isClusterLink: true, // if is clusterLink, then the front-end will ignore this link\n                            };\n                            graphCopy.addEdge(clusterID, target, {\n                                _visualize: visualize,\n                            });\n                        });\n                }\n            );\n        }\n\n        return graphCopy;\n    }\n\n    /**\n     * determine whether this Node is the cluster delegate node\n     *\n     * @param {CustomNodeObject} nodeObject\n     */\n    nodeVisibility = (nodeObject: CustomNodeObject) => {\n        return !nodeObject.isClusterNode;\n    };\n\n    /**\n     * determine whether this edge is the cluster delegate edge\n     *\n     * @param {CustomLinkObject} nodeObject\n     */\n    linkVisibility = (nodeObject: CustomLinkObject) => {\n        return !nodeObject.isClusterLink;\n    };\n\n    ////\n\n    clusterObject: Cluster3dObjectStore;\n\n    ////\n\n    /**\n     * this will re-position the camera to focus on the specified node\n     * if distance not specified, a default of 40 will be used\n     *\n     * @param {string} nodeId the node to be focused\n     * @param {number} [distance=40] the ending distance between the camera and the node\n     * @returns {*}\n     */\n    cameraFocusOn(nodeId: string, distance: number = 40) {\n        let node = State.graph.rawGraph.getNodeAttribute(nodeId, \"_visualize\");\n        if (!(node.x && node.y && node.z)) return;\n        // Aim at node from outside it\n        const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n        this.graphDelegateMethods.cameraPosition(\n            {\n                x: node.x * distRatio,\n                y: node.y * distRatio,\n                z: node.z * distRatio,\n            }, // new position\n            { x: node.x, y: node.y, z: node.z }, // lookAt ({ x, y, z })\n            3000 // ms transition duration\n        );\n    }\n\n    /**\n     * which link to be highlighted\n     *\n     * @type {(LinkObject | null)}\n     */\n    highlightLink: LinkObject | null = null;\n\n    ifHighlightLink<T>(link: LinkObject, _if: T, _else: T, _default: T): T {\n        if (State.graphDelegate.highlightLink == null) {\n            return _default;\n        }\n        let sourceId = (link.source as NodeObject).id as string;\n        let targetId = (link.target as NodeObject).id as string;\n\n        if (\n            (sourceId ===\n                (State.graphDelegate.highlightLink?.source as string) &&\n                targetId ===\n                    (State.graphDelegate.highlightLink?.target as string)) ||\n            (sourceId ===\n                (State.graphDelegate.highlightLink?.target as string) &&\n                targetId ===\n                    (State.graphDelegate.highlightLink?.source as string))\n        ) {\n            return _if;\n        } else {\n            return _else;\n        }\n    }\n\n    ////\n\n    /**\n     * set the force inside each cluster in the ForceGraph\n     *\n     * @param {number} force the force to be set\n     * @param {number} _default default force of other links\n     */\n    updateClusterForce(force: number, _default: number) {\n        this.graphDelegateMethods\n            ?.d3Force(\"link\")\n            //@ts-ignore\n            ?.distance((link: CustomLinkObject) => {\n                return link.isClusterLink ? State.css.clusterForce : _default;\n            });\n        this.graphDelegateMethods.d3ReheatSimulation();\n    }\n}\n","import { autorun } from \"mobx\";\n\nimport PreferencesStore from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport ProjectStore from \"./ProjectStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\nimport CssStore from \"./CssStore\";\nimport GraphDelegate from \"./GraphDelegate\";\n\nclass AppState {\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    graphDelegate!: GraphDelegate;\n    import!: ImportStore;\n    search!: SearchStore;\n    project!: ProjectStore;\n    cluster!: ClusterStore;\n    css!: CssStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.graphDelegate = new GraphDelegate();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.project = new ProjectStore();\n        this.cluster = new ClusterStore();\n        this.css = new CssStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// this is for easily debugging in runtime\n//@ts-ignore\nwindow._state = State;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\nautorun(\n    () =>\n        (State.cluster.rawGraph = State.search.rawGraph = State.graph.rawGraph)\n);\n\nautorun(() => {\n    if (State.css.isAnimating === true) {\n        State.graphDelegate.graphDelegateMethods?.resumeAnimation();\n    } else {\n        State.graphDelegate.graphDelegateMethods?.pauseAnimation();\n    }\n});\n\nexport default State;\n","import React, { MouseEventHandler } from \"react\";\nimport { Button, FormGroup, MenuItem } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { copy } from \"copy-anything\";\n\ninterface Props {\n    /**\n     * whether or not to show the None\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    showNone: boolean;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * if None is selected, the item props will be set to null\n     *\n     * @memberof Props\n     */\n    onSelect: (item: string | null) => void;\n\n    /**\n     * the selected to display will sync with this props\n     *\n     * @type {(string | null)}\n     * @memberof Props\n     */\n    syncWith: string | null;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\n/**\n * this component can be used to choose the attribute among all the attributes, with addition none to choose (can be toggled to off)\n * to use it, you have to specify whether to add additional None to the list and onChange function to call when a candidate is selected\n */\nexport default observer(\n    class ClusterChooser extends React.Component<Props, {}> {\n        static defaultProps = {\n            showNone: true,\n        };\n\n        get fullProperties(): string[] {\n            let propertiesWithNone = copy(State.graph.metadata.nodeProperties);\n            propertiesWithNone.unshift(\"None\");\n            return propertiesWithNone;\n        }\n\n        itemRenderer = (\n            item: any,\n            props: CustomIItemRendererProps\n        ): JSX.Element | null => {\n            if (item == \"None\") {\n                return (\n                    <MenuItem\n                        intent=\"primary\"\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            } else {\n                return (\n                    <MenuItem\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            }\n        };\n\n        render() {\n            return (\n                <Select\n                    items={\n                        this.props.showNone\n                            ? this.fullProperties\n                            : State.graph.metadata.nodeProperties\n                    }\n                    itemRenderer={this.itemRenderer}\n                    filterable={false}\n                    onItemSelect={(item: string) => {\n                        let selected = item === \"None\" ? null : item;\n                        this.props.onSelect(selected);\n                    }}\n                >\n                    <Button text={this.props.syncWith ?? \"None\"} />\n                </Select>\n            );\n        }\n    }\n);\n","export default __webpack_public_path__ + \"static/media/logo.25a51149.png\";","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/labs\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    items: any[];\n    onSelect: (\n        item: any,\n        event?: React.SyntheticEvent<HTMLElement, Event> | undefined\n    ) => void;\n    text: string;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\nexport function CommonItemRenderer(\n    item: any,\n    props: CustomIItemRendererProps\n): JSX.Element | null {\n    return <MenuItem key={item} onClick={props.handleClick} text={item} />;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Select\n                    items={this.props.items}\n                    itemRenderer={CommonItemRenderer}\n                    filterable={false}\n                    onItemSelect={this.props.onSelect}\n                >\n                    <Button text={this.props.text} />\n                </Select>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    ButtonGroup,\n    Classes,\n    Menu,\n    MenuDivider,\n    MenuItem,\n    Popover,\n    Position,\n    Switch,\n} from \"@blueprintjs/core\";\nimport ClusterChooser from \"./utils/ClusterChooser\";\nimport logo from \"../images/logo.png\";\nimport State from \"../state\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\nimport ComponentRef from \"./ComponentRef\";\n\nexport default observer(\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <nav className={classnames([Classes.NAVBAR])}>\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_LEFT,\n                        ])}\n                    >\n                        <img\n                            title=\"PiperNet\"\n                            id=\"PiperNet Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                            alt=\"PiperNet Logo\"\n                        />\n                        <div className={classnames([Classes.NAVBAR_HEADING])}>\n                            {\" \"}\n                            PiperNet{\" \"}\n                        </div>\n\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Load Sample\"\n                                        icon=\"graph\"\n                                        onClick={() => {\n                                            State.import.importSamplesDialogOpen = true;\n                                        }}\n                                    >\n                                        {/* {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        disabled={true}\n                                                        onClick={() => {\n                                                            fetchSampleGraph(\n                                                                sampleSnapshotUrl\n                                                            ).then((file) => {\n                                                                State.import.selectedGEXFFileFromInput = file;\n                                                                State.import\n                                                                    .importGraphFromGEXF()\n                                                                    .then(\n                                                                        (\n                                                                            res\n                                                                        ) => {\n                                                                            State.graph.rawGraph =\n                                                                                res.graph;\n                                                                            State.graph.metadata =\n                                                                                res.metadata;\n                                                                        }\n                                                                    );\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )} */}\n                                    </MenuItem>\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from CSV...\"\n                                        onClick={() => {\n                                            State.import.importCSVDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from GEXF...\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Export Graph\"\n                                        onClick={() => {\n                                            State.project.exportDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"document\"\n                            >\n                                Graph\n                            </Button>\n                        </Popover>\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Node DataSheet\"\n                                        icon=\"ungroup-objects\"\n                                        onClick={() => {\n                                            State.preferences.nodeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Edge DataSheet\"\n                                        icon=\"link\"\n                                        onClick={() => {\n                                            State.preferences.edgeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    {/* <MenuItem\n                                        text=\"Statistics\"\n                                        icon=\"timeline-bar-chart\"\n                                        onClick={() => {\n                                            State.preferences.statisticsDialogOpen = true;\n                                        }}\n                                    /> */}\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"wrench\"\n                            >\n                                Tools\n                            </Button>\n                        </Popover>\n                        <Switch\n                            label=\"Graph Animation\"\n                            checked={State.css.isAnimating}\n                            onChange={() =>\n                                (State.css.isAnimating = !State.css.isAnimating)\n                            }\n                        />\n                    </div>\n                    {/* <div\n                    className={classnames([\n                        Classes.NAVBAR_GROUP,\n                        Classes.ALIGN_LEFT,\n                    ])}\n                >\n                    <span className={Classes.NAVBAR_DIVIDER} />\n                    {appState.graph.hasGraph && appState.graph.frame && (\n                        <div style={{ display: \"inline\" }}>\n                            <Tooltip\n                                content={\n                                    appState.graph.frame.paused\n                                        ? \"Resume Layout Algorithm\"\n                                        : \"Pause Layout Algorithm\"\n                                }\n                                position={Position.BOTTOM}\n                            >\n                                <Button\n                                    className={classnames([\n                                        Classes.BUTTON,\n                                        Classes.MINIMAL,\n                                    ])}\n                                    icon={\n                                        appState.graph.frame.paused\n                                            ? \"play\"\n                                            : \"pause\"\n                                    }\n                                    text={\n                                        appState.graph.frame.paused\n                                            ? \"Resume Layout\"\n                                            : \"Pause Layout\"\n                                    }\n                                    onClick={() => {\n                                        if (appState.graph.frame.paused) {\n                                            appState.graph.frame.resumeLayout();\n                                            this.forceUpdate();\n                                        } else {\n                                            appState.graph.frame.pauseLayout();\n                                            this.forceUpdate();\n                                        }\n                                    }}\n                                />\n                            </Tooltip>\n                        </div>\n                    )}\n                </div> */}\n                    <ButtonGroup>\n                        {/* <SimpleSelect\n                            className={classnames([Classes.ALERT_CONTENTS])}\n                            items={[\"3D\", \"2D\"]}\n                            value={State.preferences.view}\n                            onSelect={(it) => (State.preferences.view = it)}\n                        />\n                        <Divider /> */}\n                    </ButtonGroup>\n\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_RIGHT,\n                        ])}\n                    >\n                        Clustered by\n                        <ClusterChooser\n                            onSelect={(cluster) => {\n                                State.cluster.setCluster(cluster);\n                            }}\n                            syncWith={State.cluster.clusterBy}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <SimpleSelect\n                            items={[\"trackball\", \"orbit\", \"fly\"]}\n                            text={State.preferences.controlType}\n                            onSelect={(it) => {\n                                State.preferences.controlType = it;\n                                ComponentRef.visualizer.updateVisualizationGraph();\n                            }}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"cog\"\n                            disabled={true}\n                            onClick={() => {\n                                State.preferences.preferenceDialogOpen = true;\n                            }}\n                        />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"code\"\n                            onClick={() => {\n                                window.open(\n                                    \"https://github.com/grp202004/PiperNet\"\n                                );\n                            }}\n                        />\n                    </div>\n                </nav>\n            );\n        }\n    }\n);\n","import React, { ReactNode } from \"react\";\nimport { Button, Card, Classes, Collapse, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    name: string;\n    isOpen: boolean;\n    onToggle: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n    children: ReactNode;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Card elevation={Elevation.THREE}>\n                    <Button\n                        className={classnames(\n                            Classes.LARGE,\n                            Classes.FILL,\n                            \"text-align-left\"\n                        )}\n                        rightIcon={\n                            this.props.isOpen ? \"chevron-up\" : \"chevron-down\"\n                        }\n                        onClick={this.props.onToggle}\n                    >\n                        {this.props.name}\n                    </Button>\n                    <Collapse isOpen={this.props.isOpen}>\n                        {this.props.children}\n                    </Collapse>\n                </Card>\n            );\n        }\n    }\n);\n","import convert from \"xml-js\";\n\nexport const GITHUB_URL = \"\";\n\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\n    [\n        \"Les Miserables\",\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\n    ],\n    [\"COVID-19 Citation Graph 06-02\", \"../samples/json/a.json\"],\n];\n\nexport async function fetchSampleGraph(url: string) {\n    try {\n        let response = await fetch(url, { mode: \"no-cors\" });\n        let gexfJson = await response.json();\n        return new File([convert.json2xml(gexfJson)], \"sample.gexf\", {\n            type: \"text/xml\",\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\nexport const ONLY_EDGE_FILE = \"only edges file\";\n","import React from \"react\";\nimport {\n    Button,\n    Callout,\n    Classes,\n    Dialog,\n    Divider,\n    FileInput,\n    Intent,\n    Spinner,\n    Switch,\n    Tag,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\n\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../../constants\";\nimport { IEdgeFileConfig, INodeFileConfig } from \"../../state/ImportStore\";\n\ninterface PreviewTableProps {\n    file: INodeFileConfig | IEdgeFileConfig;\n}\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component<PreviewTableProps, {}> {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top {this.file.topN.length} rows of the\n                        selected file are displayed.\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    class ImportCSVDialog extends React.Component {\n        state = {\n            loading: false,\n            available: ONLY_EDGE_FILE,\n            nodesOpen: true,\n            edgesOpen: true,\n            delimiter: \",\",\n        };\n\n        // determine if this state is importable\n        canImport = () => {\n            if (this.state.available === NODE_AND_EDGE_FILE) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else if (this.state.available === ONLY_EDGE_FILE) {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n            return false;\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            // show blank if node file not relevant\n            if (this.state.available === ONLY_EDGE_FILE) {\n                return null;\n            }\n\n            return (\n                <Collapsable\n                    name=\"Nodes\"\n                    isOpen={this.state.nodesOpen}\n                    onToggle={() =>\n                        this.setState({ nodesOpen: !this.state.nodesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.nodeFileName}\n                                onInputChange={(event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    if (\n                                        !target.files ||\n                                        target.files.length < 1\n                                    ) {\n                                        return;\n                                    }\n                                    State.import.nodeFileName =\n                                        target.files[0].name;\n                                    // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                    State.import.selectedNodeFileFromInput =\n                                        target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                text={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <Collapsable\n                    name=\"Edges\"\n                    isOpen={this.state.edgesOpen}\n                    onToggle={() =>\n                        this.setState({ edgesOpen: !this.state.edgesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.edgeFileName}\n                                onInputChange={(event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    if (\n                                        !target.files ||\n                                        target.files.length < 1\n                                    ) {\n                                        return;\n                                    }\n                                    State.import.edgeFileName =\n                                        target.files[0].name;\n                                    State.import.selectedEdgeFileFromInput =\n                                        target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />{\" \"}\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderDelimiterSelection() {\n            return (\n                <div>\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        text={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter === \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter === \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    style={{ minWidth: \"80vw\" }}\n                    icon=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importCSVDialogOpen}\n                    onClose={() => {\n                        State.import.importCSVDialogOpen = false;\n                    }}\n                    title=\"Import CSV\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div>\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"import-dialog\"\n                                )}\n                            >\n                                I have:\n                                <SimpleSelect\n                                    items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\n                                    text={this.state.available}\n                                    onSelect={(targetValue) => {\n                                        State.import.importConfig.hasNodeFile = !(\n                                            targetValue === ONLY_EDGE_FILE\n                                        );\n                                        this.setState({\n                                            available: targetValue,\n                                        });\n                                    }}\n                                />\n                                <Divider />\n                                {this.renderNodesSelection()}\n                                <br />\n                                {this.renderEdgesSelection()}\n                                <br />\n                                {this.renderDelimiterSelection()}\n                            </div>\n                            <div className={Classes.DIALOG_FOOTER}>\n                                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                    <Button\n                                        className={classnames({\n                                            [Classes.DISABLED]: !this.canImport(),\n                                        })}\n                                        intent={Intent.PRIMARY}\n                                        onClick={() => {\n                                            State.import.isLoading = true;\n                                            State.import\n                                                .importGraphFromCSV()\n                                                .then((res) => {\n                                                    State.graph.setGraph(\n                                                        res.graph,\n                                                        res.metadata\n                                                    );\n                                                    State.import.isLoading = false;\n                                                    State.import.importCSVDialogOpen = false;\n                                                });\n                                        }}\n                                        text=\"Import\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    FileInput,\n    Intent,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\nexport default observer(\n    class ImportGEXFDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <Button\n                            className={classnames({\n                                [Classes.DISABLED]: !this.state.fileIsSelect,\n                            })}\n                            intent={Intent.PRIMARY}\n                            onClick={() => {\n                                State.import.isLoading = true;\n                                State.import\n                                    .importGraphFromGEXF()\n                                    .then((res) => {\n                                        State.graph.setGraph(\n                                            res.graph,\n                                            res.metadata\n                                        );\n                                        State.import.isLoading = false;\n                                        State.import.importGEXFDialogOpen = false;\n                                    });\n                            }}\n                            text=\"Import\"\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;\n                    }}\n                    title=\"Import GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <div\n                                    className={classnames(\n                                        Classes.CONTROL_GROUP\n                                    )}\n                                >\n                                    <div\n                                        className={classnames(\n                                            Classes.INPUT_GROUP,\n                                            Classes.FILL\n                                        )}\n                                    >\n                                        <FileInput\n                                            text={State.import.gexfFileName}\n                                            onInputChange={(event) => {\n                                                let target = event.target as HTMLInputElement;\n                                                if (\n                                                    !target.files ||\n                                                    target.files.length < 1\n                                                ) {\n                                                    return;\n                                                }\n                                                State.import.gexfFileName =\n                                                    target.files[0].name;\n                                                // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                                State.import.selectedGEXFFileFromInput =\n                                                    target.files[0];\n\n                                                this.setState({\n                                                    fileIsSelect: true,\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Card,\n    Classes,\n    Dialog,\n    Divider,\n    Elevation,\n    H3,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport gexf from \"graphology-gexf/browser\";\nimport State from \"../../state\";\nimport { CSVLink } from \"react-csv\";\n\nexport default observer(\n    class ExportDialog extends React.Component {\n        state = {\n            ready: true,\n        };\n\n        computeGEXFFile() {\n            return gexf.write(State.graph.rawGraph);\n        }\n\n        computeNodeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [];\n            State.graph.metadata.nodeProperties.map((value) => {\n                headers.push({ label: value, key: value });\n                return null;\n            });\n            headers.push({ label: \"_id\", key: \"_id\" });\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.nodes.forEach((node) => {\n                data.push({\n                    _id: node.key,\n                    ...node.attributes,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        computeEdgeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [\n                { label: \"source\", key: \"source\" },\n                { label: \"target\", key: \"target\" },\n            ];\n\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.edges.forEach((edge) => {\n                data.push({\n                    source: edge.source,\n                    target: edge.target,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"projects\"\n                    isOpen={State.project.exportDialogOpen}\n                    onClose={() => {\n                        State.project.exportDialogOpen = false;\n                    }}\n                    title={`Export Graph`}\n                >\n                    {!this.state.ready ? (\n                        <Spinner />\n                    ) : (\n                        <div className={classnames(Classes.DIALOG_BODY)}>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    GEXF Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://gephi.org/gexf/format/\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n                                <Divider />\n\n                                <CSVLink\n                                    data={this.computeGEXFFile()}\n                                    filename={\"Snapshot-GEXF.gexf\"}\n                                    className=\"btn btn-primary\"\n                                    target=\"_blank\"\n                                >\n                                    <Button>Download GEXF File</Button>\n                                </CSVLink>\n                            </Card>\n                            <br />\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    CSV Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://github.com/grp202004/PiperNet#data-import\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n\n                                <Divider />\n                                <ButtonGroup>\n                                    <CSVLink\n                                        data={this.computeNodeFile().data}\n                                        headers={this.computeNodeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Node.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Node File</Button>\n                                    </CSVLink>\n                                    <Divider />\n                                    <CSVLink\n                                        data={this.computeEdgeFile().data}\n                                        headers={this.computeEdgeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Edge.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Edge File</Button>\n                                    </CSVLink>\n                                </ButtonGroup>\n                            </Card>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Dialog } from \"@blueprintjs/core\";\nimport { Column, Table, TableLoadingOption } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\ninterface Props {\n    for: string;\n    children: React.ReactNode;\n}\n\nexport default observer(\n    class DataSheetDialogWrapper extends React.Component<Props, {}> {\n        state = {\n            loading: true,\n        };\n\n        renderTable() {\n            if (this.state.loading) {\n                return (\n                    <div className=\"argo-table-container\">\n                        <Table\n                            className=\"pt-bordered pt-striped\"\n                            numRows={20}\n                            loadingOptions={[\n                                TableLoadingOption.CELLS,\n                                TableLoadingOption.COLUMN_HEADERS,\n                                TableLoadingOption.ROW_HEADERS,\n                            ]}\n                        >\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                        </Table>\n                    </div>\n                );\n            } else {\n                return this.props.children;\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"database\"\n                    isOpen={\n                        this.props.for === \"node\"\n                            ? State.preferences.nodeDataSheetDialogOpen\n                            : State.preferences.edgeDataSheetDialogOpen\n                    }\n                    onOpened={() => {\n                        setTimeout(() => {\n                            this.setState({\n                                loading: false,\n                            });\n                        }, 100);\n                    }}\n                    onClose={() => {\n                        if (this.props.for === \"node\") {\n                            State.preferences.nodeDataSheetDialogOpen = false;\n                        } else {\n                            State.preferences.edgeDataSheetDialogOpen = false;\n                        }\n                        this.setState({\n                            loading: true,\n                        });\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        {this.renderTable()}\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import { Attributes } from \"graphology-types\";\nimport React from \"react\";\n\n/** Event handler that exposes the target element's value as a boolean. */\nexport function handleBooleanChange(handler: (checked: boolean) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).checked);\n}\n\n/** Event handler that exposes the target element's value as a string. */\nexport function handleStringChange(handler: (value: string) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).value);\n}\n\n/** Event handler that exposes the target element's value as an inferred generic type. */\nexport function handleValueChange<T>(handler: (value: T) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler(((event.target as HTMLInputElement).value as unknown) as T);\n}\n\n/** Event handler that exposes the target element's value as a number. */\nexport function handleNumberChange(handler: (value: number) => void) {\n    return handleStringChange((value) => handler(+value));\n}\n\nexport function stringifyNodeDetail(attributes: Attributes): string {\n    let res = \"\";\n    for (var attribute in attributes) {\n        if (\n            attributes.hasOwnProperty(attribute) &&\n            attribute !== \"_visualize\" &&\n            attribute !== \"_options\"\n        ) {\n            res += attribute + \" : \" + attributes[attribute] + \" ; \";\n        }\n    }\n\n    return res;\n}\n\nexport function parseNumberOrString(value: string): string | number {\n    let numberVal = Number(value);\n    if (isNaN(numberVal)) {\n        return value;\n    } else {\n        return numberVal;\n    }\n}\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Code,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    EditableCell,\n    ICellRenderer,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport {\n    handleStringChange,\n    parseNumberOrString,\n    stringifyNodeDetail,\n} from \"../utils/InputFormUtils\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\n\nlet GraphNodeTable = observer(\n    class GraphNodeTable extends React.Component {\n        state = {\n            filterQuery: \"\",\n            addNodeDialogOpen: false,\n            deleteAlertOpen: false,\n            nodeToDelete: null as SerializedNode | null,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedNode[] = [];\n            State.graph.rawGraph.export().nodes.forEach((node) => {\n                if (\n                    node.key\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(node);\n                }\n            });\n            return newTable;\n        }\n\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        renderColumns: any = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it !== \"_options\") {\n                    return (\n                        <Column\n                            name={it}\n                            cellRenderer={(\n                                rowIndex: number,\n                                columnIndex: number\n                            ) => this.renderCell(rowIndex, it)}\n                        />\n                    );\n                }\n                return null;\n            });\n            return columns.filter((element) => {\n                return element !== undefined;\n            });\n        };\n\n        renderCell = (rowIndex: number, attribute: string) => {\n            let cellAttributes = this.filteredTable[rowIndex].attributes!!;\n            let cell = cellAttributes[attribute];\n\n            return (\n                <EditableCell\n                    value={cell}\n                    onChange={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    onConfirm={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    tooltip={cell}\n                />\n            );\n        };\n\n        // if the input is a number in string, it will convert the string into number to store\n        setValue = (value: string, rowIndex: number, attribute: string) => {\n            let id = this.filteredTable[rowIndex].key;\n            State.graph.rawGraph.setNodeAttribute(\n                id,\n                attribute,\n                parseNumberOrString(value)\n            );\n        };\n\n        deleteNodeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                nodeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteNodeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropNode(\n                            this.state.nodeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                    style={{ minWidth: \"60vw\" }}\n                >\n                    <p>\n                        Are you sure you want to delete the node with ID{\" \"}\n                        <Code>{this.state.nodeToDelete?.key}</Code> with\n                        attributes:\n                        <Code>\n                            {stringifyNodeDetail(\n                                this.state.nodeToDelete\n                                    ?.attributes as Attributes\n                            )}\n                        </Code>\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <Callout\n                        title={\n                            \"Try to click on a cell and type in something...\"\n                        }\n                        intent=\"primary\"\n                        icon=\"edit\"\n                    >\n                        The corresponding value of a node's attribute can be\n                        modified by clicking the cell and type in\n                    </Callout>\n\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() => {\n                                State.preferences.AddNodeDialogOpen = true;\n                            }}\n                            icon=\"new-object\"\n                            intent=\"primary\"\n                            text=\"Add Node\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Node...\"\n                            value={this.state.filterQuery}\n                            fill={true}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n\n                    <Table\n                        className=\"argo-table\"\n                        defaultRowHeight={30}\n                        numRows={this.filteredTable.length}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteNodeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"ID\"\n                            //@ts-ignore\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.filteredTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                    {this.deleteNodeAlert()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class NodeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"node\">\n                    <GraphNodeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, FormGroup, MenuItem } from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { Select } from \"@blueprintjs/select\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { stringifyNodeDetail } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the text to be shown above the selectButton\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    text: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * the {nodeId} is the id of the selected node\n     *\n     * @memberof Props\n     */\n    onChange: (nodeId: string) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class NodeChooser extends React.Component<Props, {}> {\n        state = {\n            select: \"Choose \" + this.props.text,\n        };\n\n        render() {\n            return (\n                <FormGroup\n                    label={this.props.text}\n                    labelFor=\"text-input\"\n                    labelInfo=\"(required)\"\n                >\n                    <Select\n                        filterable={true}\n                        items={State.graph.rawGraph.export().nodes}\n                        itemPredicate={(\n                            query: string,\n                            item: SerializedNode<Attributes>\n                        ) => {\n                            return item.key.includes(query);\n                        }}\n                        itemRenderer={(item: SerializedNode<Attributes>) => {\n                            return (\n                                <Tooltip2\n                                    content={stringifyNodeDetail(\n                                        item.attributes ?? {}\n                                    )}\n                                >\n                                    <MenuItem\n                                        key={item.key}\n                                        text={item.key}\n                                        onClick={() => {\n                                            let key = item.key;\n                                            this.setState({ select: key });\n                                            this.props.onChange(key);\n                                        }}\n                                    />\n                                </Tooltip2>\n                            );\n                        }}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                        onItemSelect={() => {}}\n                    >\n                        <Button\n                            text={this.state.select}\n                            rightIcon=\"double-caret-vertical\"\n                        />\n                    </Select>\n                </FormGroup>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Code,\n    Dialog,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport { Attributes, SerializedEdge } from \"graphology-types\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\nimport NodeChooser from \"../utils/NodeChooser\";\n\nlet GraphEdgeTable = observer(\n    class GraphEdgeTable extends React.Component {\n        state = {\n            addEdgeDialogOpen: false,\n            deleteAlertOpen: false,\n            edgeToDelete: null as null | SerializedEdge<Attributes>,\n            filterQuery: null as null | string,\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedEdge<Attributes>[] = [];\n            State.graph.rawGraph.export().edges.forEach((edge) => {\n                if (\n                    !this.state.filterQuery ||\n                    edge.source\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    edge.target\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(edge);\n                }\n            });\n            return newTable;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(\n                            this.state.edgeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.key}</Code> from Node ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.source}</Code> to Node\n                        ID <Code>{this.state.edgeToDelete?.target}</Code>. This\n                        action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        addEdgeDialog = () => {\n            return (\n                <Dialog\n                    isOpen={this.state.addEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => this.setState({ addEdgeDialogOpen: false })}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() =>\n                                    this.setState({ addEdgeDialogOpen: false })\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.setState({ addEdgeDialogOpen: false });\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() =>\n                                this.setState({ addEdgeDialogOpen: true })\n                            }\n                            icon=\"new-link\"\n                            intent=\"primary\"\n                            text=\"Add Edge\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Source or Target of an Edge...\"\n                            value={this.state.filterQuery ?? \"\"}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n                    <Table\n                        className=\"argo-table\"\n                        numRows={this.filteredTable.length}\n                        defaultRowHeight={30}\n                        renderMode={RenderMode.NONE}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteEdgeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"Source\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].source}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                        <Column\n                            name=\"Target\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].target}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                    </Table>\n                    {this.deleteEdgeAlert()}\n                    {this.addEdgeDialog()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class EdgeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"edge\">\n                    <GraphEdgeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import {\n    Button,\n    Card,\n    Elevation,\n    FormGroup,\n    H5,\n    InputGroup,\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport State from \"../../state\";\nimport { Attributes } from \"graphology-types\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * function to call when a new node is successfully added\n     * the {nodeId} is the id of the newly added node, {attributes} is the attributes of the newly added node\n     *\n     * @memberof Props\n     */\n    onAdded: (nodeId: string, attributes: Attributes) => void;\n}\n\nexport default observer(\n    class NodeAdder extends React.Component<Props, {}> {\n        state = {\n            newNodeId: \"\",\n            attributes: {} as Attributes,\n        };\n\n        get canImport() {\n            return (\n                !State.graph.rawGraph.hasNode(this.state.newNodeId) &&\n                this.state.newNodeId !== \"\"\n            );\n        }\n\n        canImportTag = () => {\n            return this.canImport ? (\n                <Tooltip2\n                    content={\n                        \"This Node Id is not used by any existing node yet\"\n                    }\n                    intent=\"success\"\n                >\n                    <Button icon=\"tick\" intent=\"success\" minimal={true} />\n                </Tooltip2>\n            ) : (\n                <Tooltip2\n                    content={\n                        \"This Node Id is currently in use by other nodes, try with another one instead\"\n                    }\n                    intent=\"warning\"\n                >\n                    <Button icon=\"cross\" intent=\"warning\" minimal={true} />\n                </Tooltip2>\n            );\n        };\n\n        renderAttributesForm = (attributes: string[]) => {\n            return attributes.map((attribute) => {\n                if (attribute !== \"_options\" && attribute !== \"_visualize\") {\n                    return (\n                        <FormGroup label={attribute}>\n                            <InputGroup\n                                asyncControl={true}\n                                placeholder={\n                                    \"Enter the value for attribute: \" +\n                                    attribute\n                                }\n                                onChange={handleStringChange((value) => {\n                                    let newValue = this.state.attributes;\n                                    newValue[attribute] = parseNumberOrString(\n                                        value\n                                    );\n                                    this.setState({ attributes: newValue });\n                                })}\n                                value={this.state.attributes[attribute]}\n                            />\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        };\n\n        render() {\n            return (\n                <Card elevation={Elevation.ONE}>\n                    <FormGroup label=\"New Node ID\" labelInfo=\"(required)\">\n                        <InputGroup\n                            autoFocus={true}\n                            asyncControl={true}\n                            placeholder=\"Enter the new Node Id...\"\n                            intent={this.canImport ? \"success\" : \"warning\"}\n                            rightElement={this.canImportTag()}\n                            onChange={handleStringChange((value) =>\n                                this.setState({ newNodeId: value })\n                            )}\n                            value={this.state.newNodeId}\n                        />\n                    </FormGroup>\n                    <Card elevation={Elevation.ONE}>\n                        <H5>Attributes</H5>\n                        {this.renderAttributesForm(\n                            State.graph.metadata.nodeProperties\n                        )}\n                    </Card>\n                    <hr />\n                    <Button\n                        intent=\"primary\"\n                        onClick={() => {\n                            State.graph.decorateRawNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.graph.mutating.addNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            this.props.onAdded(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.preferences.AddNodeDialogOpen = false;\n                            // State.preferences.rightClickBackgroundPanelOpen = false;\n                            // this.forceUpdate();\n                            // State.graphDelegate.cameraFocusOn(this.state.newNodeId);\n                        }}\n                        disabled={!this.canImport}\n                    >\n                        Confirm\n                    </Button>\n                </Card>\n            );\n        }\n        componentDidMount = () => {\n            State.graph.metadata.nodeProperties.forEach((prop) => {\n                let newValue = this.state.attributes;\n                newValue[prop] = \"\";\n                this.setState({ attributes: newValue });\n            });\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Classes, Dialog, Tag } from \"@blueprintjs/core\";\nimport NodeAdder from \"../utils/NodeAdder\";\nimport State from \"../../state\";\n\nexport default observer(\n    class AddNodeDialog extends React.Component {\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddNodeDialogOpen}\n                    icon=\"new-object\"\n                    onClose={() => {\n                        State.preferences.AddNodeDialogOpen = false;\n                    }}\n                    title=\"Add Node\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add node with unique node id to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> node means there should only exist\n                            one node that has the respective node id.\n                        </p>\n                        <Tag>New edges are added to the end of the table</Tag>\n                        <hr />\n                        <NodeAdder\n                            onAdded={() => {\n                                this.setState({ addNodeDialogOpen: false });\n                                this.forceUpdate();\n                            }}\n                        />\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\n// import PreferencesDialog from \"./PreferencesDialog\";\nimport ImportCSVDialog from \"./dialogs/ImportCSVDialog\";\nimport ImportGEXFDialog from \"./dialogs/ImportGEXFDialog\";\nimport ImportSamplesDialog from \"./dialogs/ImportGEXFDialog\";\nimport ExportDialog from \"./dialogs/ExportDialog\";\n// import ProjectDetailDialog from \"./ProjectDetailDialog\";\n// import RenameSnapshotDialog from \"./RenameSnapshotDialog\";\n// import StatisticsDialog from './StatisticsDialog';\n// import HelpDialog from './HelpDialog';\n// import NeighborDialog from './NeighborDialog';\nimport NodeDataSheetDialog from \"./dialogs/NodeDataSheetDialog\";\nimport EdgeDataSheetDialog from \"./dialogs/EdgeDataSheetDialog\";\nimport AddNodeDialog from \"./dialogs/AddNodeDialog\";\n\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                {/* <PreferencesDialog /> */}\n                <ImportCSVDialog />\n                <ImportGEXFDialog />\n                <ImportSamplesDialog />\n                {/*\n                <ProjectDetailDialog />\n                <RenameSnapshotDialog />\n                <StatisticsDialog />\n                <HelpDialog />\n                <NeighborDialog />\\\n                */}\n                <AddNodeDialog />\n                <NodeDataSheetDialog />\n                <EdgeDataSheetDialog />\n                <ExportDialog />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, {\n    ForceGraphMethods,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state\";\n\ninterface Props {\n    controlType: \"trackball\" | \"orbit\" | \"fly\";\n}\n\nexport default observer(\n    class ThreeJSVis extends React.Component<Props, {}> {\n        state = {\n            visualizationGraph: State.graphDelegate.visualizationGraph(),\n        };\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        getNodeId(node: NodeObject): string {\n            let nodeId: string;\n            if (node.id as string) {\n                nodeId = node.id as string;\n            } else {\n                nodeId = (node.id as number).toString();\n            }\n            return nodeId;\n        }\n\n        graphDelegate = State.graphDelegate;\n\n        nodeHover = (\n            node: NodeObject | null,\n            previousNode: NodeObject | null\n        ) => {\n            if (State.search.isPreviewing) return;\n            if (node != null && node !== previousNode) {\n                State.graph.currentlyHoveredId = this.getNodeId(\n                    node as NodeObject\n                );\n            }\n        };\n\n        // ref of State.graph.selectedNodes\n        selectedNodes: string[] = State.graph.selectedNodes;\n\n        nodeSelect = (node: NodeObject, event: MouseEvent) => {\n            let nodeId = this.getNodeId(node as NodeObject);\n            if (event.ctrlKey || event.shiftKey) {\n                // multi-selection\n                if (this.selectedNodes.includes(nodeId)) {\n                    let index = this.selectedNodes.indexOf(nodeId);\n                    if (index > -1) {\n                        this.selectedNodes.splice(index, 1);\n                    }\n                } else {\n                    this.selectedNodes.push(nodeId);\n                }\n            } else {\n                // single-selection\n                // TODO\n            }\n            this.graphMethods.refresh(); // update color of selected nodes\n        };\n\n        nodeRightClick = (node: NodeObject, event: MouseEvent) => {\n            State.graph.selectedNode = node.id as string;\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickBackgroundPanelOpen = false;\n            State.preferences.rightClickNodePanelOpen = true;\n        };\n\n        backgroundRightClick = (event: MouseEvent) => {\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickNodePanelOpen = false;\n            State.preferences.rightClickBackgroundPanelOpen = true;\n        };\n\n        renderGraph = () => {\n            if (State.preferences.view === \"3D\") {\n                return (\n                    <ForceGraph3D\n                        ref={this.graphRef}\n                        graphData={this.state.visualizationGraph}\n                        nodeResolution={State.css.nodeResolution}\n                        nodeVisibility={this.graphDelegate.nodeVisibility}\n                        linkVisibility={this.graphDelegate.linkVisibility}\n                        onNodeDragEnd={(node) => {\n                            node.fx = node.x;\n                            node.fy = node.y;\n                            node.fz = node.z;\n                        }}\n                        onBackgroundRightClick={this.backgroundRightClick}\n                        linkWidth={(link) => {\n                            return State.graphDelegate.ifHighlightLink(\n                                link,\n                                2,\n                                0.1,\n                                1\n                            );\n                        }}\n                        linkColor={(link) => {\n                            return State.graphDelegate.ifHighlightLink(\n                                link,\n                                \"orangered\",\n                                \"white\",\n                                \"white\"\n                            );\n                        }}\n                        linkDirectionalParticles={(link) => {\n                            return State.graphDelegate.ifHighlightLink(\n                                link,\n                                4,\n                                0,\n                                0\n                            );\n                        }}\n                        linkDirectionalParticleWidth={4}\n                        onEngineTick={() =>\n                            this.graphDelegate.clusterObject.clusterDelegation()\n                        }\n                        nodeColor={(node) =>\n                            this.selectedNodes.includes(this.getNodeId(node))\n                                ? \"yellow\"\n                                : \"grey\"\n                        }\n                        onNodeClick={this.nodeSelect}\n                        onNodeRightClick={this.nodeRightClick}\n                        onBackgroundClick={() => {\n                            State.preferences.rightClickNodePanelOpen = false;\n                            State.preferences.rightClickBackgroundPanelOpen = false;\n                        }}\n                        onNodeHover={this.nodeHover}\n                        controlType={this.props.controlType}\n                    />\n                );\n                // } else {\n                //     return (\n                //         <ForceGraph2D\n                //             graphData={State.graph.adapterGraph}\n                //             dagMode={\"td\"}\n                //             // dagLevelDistance={300}\n                //             // backgroundColor=\"#101020\"\n                //             nodeRelSize={1}\n                //             // nodeId=\"path\"\n                //             // nodeVal={(node) => 100 / (node.level + 1)}\n                //             // nodeLabel=\"path\"\n                //             // nodeAutoColorBy=\"module\"\n                //             // linkDirectionalParticles={2}\n                //             // linkDirectionalParticleWidth={2}\n                //             d3VelocityDecay={0.3}\n                //         />\n                //     );\n            }\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        updateVisualizationGraph() {\n            this.setState({\n                visualizationGraph: State.graphDelegate.visualizationGraph(),\n            });\n        }\n\n        componentDidMount() {\n            this.graphDelegate.mountDelegateMethods(this.graphMethods);\n            ComponentRef.visualizer = this;\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Popover,\n    PopoverInteractionKind,\n    RangeSlider,\n    Slider,\n} from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect, { CommonItemRenderer } from \"../utils/SimpleSelect\";\nimport State from \"../../state\";\n\nexport default observer(\n    class GlobalPanel extends React.Component {\n        state = {\n            timeOutRef: null,\n            sizeOptionOpen: false,\n            colorOptionOpen: false,\n            shapeOptionOpen: false,\n        };\n\n        render() {\n            return (\n                <div>\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            {/* color : color by */}\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Color By:\n                                    <span style={{ float: \"right\" }}>\n                                        <SimpleSelect\n                                            items={\n                                                [\"item1\", \"item2\"]\n                                                // State.graph.allPropertiesKeyList\n                                            }\n                                            onSelect={\n                                                (it) =>\n                                                    console.log(\n                                                        \"color:color by\"\n                                                    )\n                                                // State.graph.nodes.colorBy = it\n                                            }\n                                            text={\n                                                \"1\" //for test\n                                                // State.graph.nodes.colorBy\n                                            }\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            {/* color:scale type  */}\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Scale Type:\n                                    <span style={{ float: \"right\" }}>\n                                        <SimpleSelect\n                                            items={\n                                                [\"item1\", \"item2\"]\n                                                // Object.keys(scales)\n                                            }\n                                            onSelect={\n                                                (it) =>\n                                                    console.log(\n                                                        \"color:scale type\"\n                                                    )\n                                                // State.graph.nodes.color.scale = it\n                                            }\n                                            text={\n                                                \"2\"\n                                                // State.graph.nodes.color.scale\n                                            }\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            {/* the gradient section in color */}\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Gradient: &nbsp;\n                                    <span style={{ float: \"right\" }}>\n                                        {/* left colorpicker */}\n                                        <Popover\n                                            // placement=\"bottom\"\n                                            // modifiers={{\n                                            //   preventOverflow: {\n                                            //     enabled: false,\n                                            //   },\n                                            // }}\n                                            interactionKind={\n                                                PopoverInteractionKind.CLICK\n                                            }\n                                            popoverClassName=\"bp3-popover-content-sizing\"\n                                            position={\"auto\"}\n                                        >\n                                            <Button\n                                                text=\"  \"\n                                                // style={{\n                                                //   // backgroundImage: \"inherit\",\n                                                //   // backgroundColor: State.graph.nodes.color.from\n                                                // }}\n                                            />\n                                            <SketchPicker\n                                                color={\n                                                    \"#ffffff\" //used for test\n                                                    // State.graph.nodes.color.from\n                                                }\n                                                onChange={() => {\n                                                    console.log(\n                                                        \"gradient section first colorpicker onchange\"\n                                                    );\n                                                    // it => (State.graph.nodes.color.from = it.hex)\n                                                }}\n                                            />\n                                        </Popover>\n                                        {/* arrow  */}\n                                        &nbsp; &#8594; &nbsp;\n                                        {/* right colorpicker */}\n                                        <Popover\n                                            //previous!!\n                                            // placement=\"bottom\"\n                                            // modifiers={{\n                                            //   preventOverflow: {\n                                            //     enabled: false,\n                                            //   },\n                                            // }}\n                                            interactionKind={\n                                                PopoverInteractionKind.CLICK\n                                            }\n                                            popoverClassName=\"bp3-popover-content-sizing\"\n                                            position={\"auto\"}\n                                        >\n                                            <Button\n                                                text=\"  \"\n                                                style={{\n                                                    backgroundImage: \"inherit\",\n                                                    // backgroundColor: State.graph.nodes.color.to\n                                                }}\n                                            />\n                                            <SketchPicker\n                                                color={\n                                                    \"#ffffff\" //used for test\n                                                    // State.graph.nodes.color.to\n                                                }\n                                                onChange={() => {\n                                                    console.log(\n                                                        \"gradient section second colorpicker onchange\"\n                                                    );\n                                                    // it => (State.graph.nodes.color.to = it.hex)\n                                                }}\n                                            />\n                                        </Popover>\n                                    </span>\n                                </p>\n                            </section>\n                            {/* color : gradient preview */}\n                            <section style={{ marginTop: \"-1em\" }}>\n                                <svg\n                                    width=\"100%\"\n                                    height=\"10\"\n                                    className=\"gradient-preview\"\n                                >\n                                    <defs>\n                                        <linearGradient\n                                            x1=\"0%\"\n                                            y1=\"50%\"\n                                            x2=\"100%\"\n                                            y2=\"50%\"\n                                            id=\"theGradient\"\n                                        >\n                                            <stop\n                                                stopColor={\n                                                    \"#ffffff\" //used for test\n                                                    // State.graph.nodes.color.from\n                                                }\n                                                stopOpacity=\"1\"\n                                                offset=\"0%\"\n                                            />\n                                            <stop\n                                                stopColor={\n                                                    \"#ffffff\" //used for test\n                                                    // State.graph.nodes.color.to\n                                                }\n                                                stopOpacity=\"1\"\n                                                offset=\"100%\"\n                                            />\n                                        </linearGradient>\n                                    </defs>\n                                    <rect\n                                        x=\"0\"\n                                        y=\"0\"\n                                        width=\"100%\"\n                                        height=\"50\"\n                                        fill=\"url(#theGradient)\"\n                                    />\n                                </svg>\n                            </section>\n                        </div>\n                    </Collapsable>\n\n                    {/* Collapsable Option: Size */}\n                    <Collapsable\n                        name=\"Size\"\n                        isOpen={this.state.sizeOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                sizeOptionOpen: !this.state.sizeOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            {/* size : scale by  */}\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Scale By:\n                                    <span style={{ float: \"right\" }}>\n                                        <Select\n                                            items={[\"item1\", \"item2\"]}\n                                            itemRenderer={CommonItemRenderer}\n                                            filterable={false}\n                                            onItemSelect={(item) => {\n                                                console.log(\n                                                    \"size : scale by , component :select\"\n                                                );\n                                                // it => (State.graph.nodes.sizeBy = it)\n                                            }}\n                                        >\n                                            <Button\n                                                text={\n                                                    \"btn1\"\n                                                    // State.graph.nodes.sizeBy\n                                                }\n                                            />\n                                        </Select>\n                                    </span>\n                                </p>\n                            </section>\n                            {/* size : scale type */}\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Scale Type:\n                                    <span style={{ float: \"right\" }}>\n                                        <Select\n                                            items={\n                                                [\"item1\", \"item2\"]\n                                                //Object.keys(scales)\n                                            }\n                                            itemRenderer={CommonItemRenderer}\n                                            filterable={false}\n                                            onItemSelect={(item) => {\n                                                console.log(\n                                                    \"size : scale type component: select\"\n                                                );\n                                                // it => (State.graph.nodes.size.scale = it)\n                                            }}\n                                        >\n                                            <Button\n                                                text={\n                                                    \"btn2\"\n                                                    // State.graph.nodes.size.scale\n                                                }\n                                            />\n                                        </Select>\n                                    </span>\n                                </p>\n                            </section>\n                            Size Range:\n                            <br />\n                            <RangeSlider\n                                min={1}\n                                max={20}\n                                stepSize={0.1}\n                                labelStepSize={5}\n                                // onChange={([a, b]) => {\n                                //   runInAction(\"update scale\", () => {\n                                //     State.graph.nodes.size.min = a;\n                                //     State.graph.nodes.size.max = b;\n                                //   });\n                                // }}\n                                // value={[\n                                //   State.graph.nodes.size.min,\n                                //   State.graph.nodes.size.max\n                                // ]}\n                            />\n                        </div>\n                    </Collapsable>\n\n                    {/* Collapsable Option: Shape */}\n                    <Collapsable\n                        name=\"Shape\"\n                        isOpen={this.state.shapeOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                shapeOptionOpen: !this.state.shapeOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            {/* shape : node shape */}\n                            <section>\n                                {\" \"}\n                                <p style={{ textAlign: \"left\" }}>\n                                    Node Shape:\n                                    <span style={{ float: \"right\" }}>\n                                        <Select\n                                            items={[\n                                                \"circle\",\n                                                \"square\",\n                                                \"triangle\",\n                                                \"pentagon\",\n                                                \"hexagon\",\n                                                \"octagon\",\n                                            ]}\n                                            itemRenderer={CommonItemRenderer}\n                                            filterable={false}\n                                            onItemSelect={(item) => {\n                                                console.log(\n                                                    \" shape : node shape component: select\"\n                                                );\n                                                // it => (State.graph.nodes.shape = it)\n                                            }}\n                                        >\n                                            <Button\n                                                text={\n                                                    \"btn3\"\n                                                    // State.graph.nodes.shape\n                                                }\n                                            />\n                                        </Select>\n                                    </span>\n                                </p>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Node Resolution :\n                                    <Slider\n                                        min={6}\n                                        max={20}\n                                        stepSize={2}\n                                        onChange={(value) => {\n                                            State.css.nodeResolution = value;\n                                        }}\n                                        value={State.css.nodeResolution}\n                                        initialValue={12}\n                                    />\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n                    <br />\n                    <small>\n                        {/* {pluralize(\"node\", State.graph.overrides.size, true)}<span> </span> */}\n                        {pluralize(\"node\", 0, true)}\n                        <span> </span>\n                        have override styles. &nbsp;\n                        <Button\n                            className={\"pt-small\"}\n                            text=\"Clear\"\n                            // onClick={() => (State.graph.overrides = new Map())}\n                        />\n                    </small>\n                </div>\n            );\n        }\n    }\n);\n// export default GlobalPanel;\n","import React, { ReactNode } from \"react\";\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    name: string;\n    isOpen: boolean;\n    onToggle: (event: React.FormEvent<HTMLInputElement>) => void;\n    children: ReactNode;\n}\n\nexport default observer(\n    class SwitchCollapsable extends React.Component<Props, {}> {\n        render() {\n            return (\n                <div>\n                    <Switch\n                        label={this.props.name}\n                        checked={this.props.isOpen}\n                        onChange={this.props.onToggle}\n                        className={Classes.ALIGN_RIGHT}\n                    />\n                    <Collapse isOpen={this.props.isOpen}>\n                        {this.props.children}\n                    </Collapse>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n    Slider,\n} from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\nimport { CommonItemRenderer } from \"../utils/SimpleSelect\";\n\nexport default observer(\n    class SelectionPanel extends React.Component {\n        state = {\n            shapeOptionOpen: false,\n            sizeOptionOpen: false,\n            colorOptionOpen: false,\n            labelOptionOpen: false,\n        };\n\n        // twoLayerUpdate = (nodeId, key, value) => {\n        //   if (!State.graph.overrides.has(nodeId)) {\n        //     State.graph.overrides.set(nodeId, new Map());\n        //   }\n        //   const nodeAttrs = State.graph.overrides.get(nodeId);\n        //   if (value !== null) {\n        //     nodeAttrs.set(key, value);\n        //   } else {\n        //     nodeAttrs.delete(key);\n        //     if (nodeAttrs.size === 0) {\n        //       State.graph.overrides.delete(nodeId);\n        //     }\n        //   }\n        // };\n\n        // batchTwoLayerUpdate = (nodes, key, value) => {\n        //   runInAction(\"update entire selection\", () => {\n        //     nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\n        //   });\n        // };\n\n        render() {\n            return (\n                <div>\n                    <br />\n                    <SwitchCollapsable\n                        name=\"Override Size\"\n                        isOpen={this.state.sizeOptionOpen}\n                        onToggle={() => {\n                            if (this.state.sizeOptionOpen) {\n                                this.setState(\n                                    {\n                                        sizeOptionOpen: false,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"size\",\n                                    //     null\n                                    //   )\n                                );\n                            } else {\n                                this.setState(\n                                    {\n                                        sizeOptionOpen: true,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"size\",\n                                    //     State.graph.overrideConfig.size\n                                    //   )\n                                );\n                            }\n                        }}\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <Slider\n                                min={1}\n                                max={20}\n                                stepSize={0.1}\n                                labelStepSize={5}\n                                // onChange={it => {\n                                //   State.graph.overrideConfig.size = it;\n                                //   this.batchTwoLayerUpdate(\n                                //     State.graph.selectedNodes,\n                                //     \"size\",\n                                //     it\n                                //   );\n                                // }}\n                                // value={State.graph.overrideConfig.size}\n                                value={2} //set for test\n                            />\n                        </div>\n                    </SwitchCollapsable>\n                    <br />\n                    <SwitchCollapsable\n                        name=\"Override Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() => {\n                            if (this.state.colorOptionOpen) {\n                                this.setState(\n                                    {\n                                        colorOptionOpen: false,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"color\",\n                                    //     null\n                                    //   )\n                                );\n                            } else {\n                                this.setState(\n                                    {\n                                        colorOptionOpen: true,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"color\",\n                                    //     State.graph.overrideConfig.color\n                                    //   )\n                                );\n                            }\n                        }}\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                {\" \"}\n                                <p style={{ textAlign: \"left\" }}>\n                                    Choose Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <Popover\n                                            //previous!!\n                                            // placement=\"bottom\"\n                                            // modifiers={{\n                                            //   preventOverflow: {\n                                            //     enabled: false,\n                                            //   },\n                                            // }}\n                                            interactionKind={\n                                                PopoverInteractionKind.CLICK\n                                            }\n                                            popoverClassName=\"bp3-popover-content-sizing\"\n                                            position={Position.RIGHT}\n                                        >\n                                            <Button\n                                                text=\"  \"\n                                                style={{\n                                                    backgroundImage: \"inherit\",\n                                                    // backgroundColor: State.graph.overrideConfig.color\n                                                }}\n                                            />\n                                            <SketchPicker\n                                            // color={State.graph.overrideConfig.color}\n                                            // onChange={it => {\n                                            //   State.graph.overrideConfig.color = it.hex;\n                                            //   this.batchTwoLayerUpdate(\n                                            //     State.graph.selectedNodes,\n                                            //     \"color\",\n                                            //     it.hex\n                                            //   );\n                                            // }}\n                                            />\n                                        </Popover>\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </SwitchCollapsable>\n                    <br />\n                    <SwitchCollapsable\n                        name=\"Override Label\"\n                        isOpen={this.state.labelOptionOpen}\n                        onToggle={() => {\n                            if (this.state.labelOptionOpen) {\n                                this.setState(\n                                    {\n                                        labelOptionOpen: false,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"label\",\n                                    //     null\n                                    //   )\n                                );\n                            } else {\n                                this.setState(\n                                    {\n                                        labelOptionOpen: true,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"label\",\n                                    //     State.graph.overrideConfig.label\n                                    //   )\n                                );\n                            }\n                        }}\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            Custom Label:\n                            <input\n                                value={\"test\"} //used for test\n                                // value={State.graph.overrideConfig.label}\n                                // onChange={it => {\n                                //   State.graph.overrideConfig.label = it.target.value;\n                                //   this.batchTwoLayerUpdate(\n                                //     State.graph.selectedNodes,\n                                //     \"label\",\n                                //     it.target.value\n                                //   );\n                                // }}\n                            />\n                        </div>\n                    </SwitchCollapsable>\n                    <br />\n                    <SwitchCollapsable\n                        name=\"Override Shape\"\n                        isOpen={this.state.shapeOptionOpen}\n                        onToggle={() => {\n                            if (this.state.shapeOptionOpen) {\n                                this.setState(\n                                    {\n                                        shapeOptionOpen: false,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"shape\",\n                                    //     null\n                                    //   )\n                                );\n                            } else {\n                                this.setState(\n                                    {\n                                        shapeOptionOpen: true,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"shape\",\n                                    //     State.graph.overrideConfig.shape\n                                    //   )\n                                );\n                            }\n                        }}\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                {\" \"}\n                                <p style={{ textAlign: \"left\" }}>\n                                    Node Shape:\n                                    <span style={{ float: \"right\" }}>\n                                        <Select\n                                            items={[\n                                                \"shape1\",\n                                                \"shape2\",\n                                                \"shape3\",\n                                                \"shape4\",\n                                                \"shape5\",\n                                            ]}\n                                            itemRenderer={CommonItemRenderer}\n                                            filterable={false}\n                                            onItemSelect={(it) => {\n                                                console.log(it); //used for test\n                                                // State.graph.overrideConfig.shape = it;\n                                                // this.batchTwoLayerUpdate(\n                                                //   State.graph.selectedNodes,\n                                                //   \"shape\",\n                                                //   it\n                                                // );\n                                            }}\n                                        >\n                                            {/* <Button text={State.graph.overrideConfig.shape} /> */}\n                                            <Button text={\"change\"} />\n                                            {/* upper is used for test */}\n                                        </Select>\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </SwitchCollapsable>\n                </div>\n            );\n        }\n    }\n);\n// export default SelectionPanel;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport State from \"../../state\";\nimport GlobalPanel from \"./GlobalPanel\";\nimport SelectionPanel from \"./SelectionPanel\";\n\nexport default observer(\n    class NodesPanel extends React.Component {\n        getRenderedNodes = () => {\n            if (State.graph.selectedNodes.length === 0) {\n                return (\n                    <div>\n                        <p>Modifying All Nodes</p>\n                    </div>\n                );\n            }\n            return (\n                <p>{`Modifying ${pluralize(\n                    \"Node\",\n                    State.graph.selectedNodes.length,\n                    true\n                )}`}</p>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    {this.getRenderedNodes()}\n                    {State.graph.selectedNodes.length === 0 ? (\n                        <GlobalPanel />\n                    ) : (\n                        <SelectionPanel />\n                    )}\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport {\n    Button,\n    Classes,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n    Slider,\n} from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\n\nexport default observer(\n    class EdgesPanel extends React.Component {\n        state = {\n            sizeOptionOpen: false,\n            thicknessOptionOpen: false,\n            colorOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        render() {\n            return (\n                <div>\n                    <p>{`Modifying All Edges`}</p>\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Select Edge Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <Popover\n                                            interactionKind={\n                                                PopoverInteractionKind.CLICK\n                                            }\n                                            popoverClassName=\"bp3-popover-content-sizing\"\n                                            position={Position.RIGHT}\n                                        >\n                                            <Button\n                                                text=\"  \"\n                                                style={{\n                                                    backgroundImage: \"inherit\",\n                                                    backgroundColor:\n                                                        State.css.config.edges\n                                                            .color,\n                                                }}\n                                            />\n                                            <div>\n                                                <SketchPicker\n                                                    color={\n                                                        State.css.config.edges\n                                                            .color\n                                                    }\n                                                    onChange={(it) => {\n                                                        // State.graph.process.graph.forEachNode(n => {\n\n                                                        //     let red = new THREE.Color(State.graph.edges.color).r;\n                                                        //     let blue = new THREE.Color(State.graph.edges.color).g;\n                                                        //     let green = new THREE.Color(State.graph.edges.color).b;\n                                                        //     n.renderData.linecolor.r = red;\n                                                        //     n.renderData.linecolor.g = blue;\n                                                        //     n.renderData.linecolor.b = green;\n                                                        // });\n\n                                                        State.css.config.edges.color =\n                                                            it.hex;\n                                                        console.log(it.hex);\n                                                        /**update edge color in real time*/\n                                                        // State.graph.process.onHover();\n                                                    }}\n                                                />\n                                            </div>\n                                        </Popover>\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n\n                    <Collapsable\n                        name=\"Cluster force\"\n                        isOpen={this.state.forceOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                forceOptionOpen: !this.state.forceOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Toggle cluster :\n                                    <Slider\n                                        min={0}\n                                        max={100}\n                                        stepSize={10}\n                                        onChange={(value) => {\n                                            State.css.clusterForce = value;\n                                            State.graphDelegate.updateClusterForce(\n                                                value,\n                                                20\n                                            );\n                                        }}\n                                        value={State.css.clusterForce}\n                                        initialValue={20}\n                                    />\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n\n                    {/* Collapsable Option: Thickness */}\n                    {/* <Collapsable\n                    name=\"Thickness\"\n                    isOpen={this.state.thicknessOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\n                        })\n                    }\n                    >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <section>\n                            <p>Select Edge Thickness: </p>\n                            <div style={{display: \"inline\", float: \"right\"}}>\n\n                            </div>\n                        </section>\n                    </div>\n                </Collapsable> */}\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\n\nexport default observer(\n    class LabelsPanel extends React.Component {\n        render() {\n            return (\n                <div>\n                    <span style={{ display: \"inline-block\" }}>\n                        <Button\n                            style={{ width: \"100px\" }}\n                            id=\"hideAll\"\n                            icon=\"eye-off\"\n                            className={Classes.FILL}\n                            // onClick={() => State.graph.frame.hideAllLabels()}\n                        >\n                            Hide All\n                        </Button>\n                        <Button\n                            style={{ width: \"100px\", display: \"none\" }}\n                            id=\"showAll\"\n                            icon=\"eye-on\"\n                            className={Classes.FILL}\n                            // onClick={() => State.graph.frame.showAllLabels()}\n                        >\n                            Show All\n                        </Button>\n                        <Button\n                            style={{ width: \"140px\", marginLeft: \"10px\" }}\n                            id=\"hideSelected\"\n                            icon=\"eye-off\"\n                            className={Classes.FILL}\n                            // onClick={() =>\n                            //     State.graph.frame.hideSelectedLabels()\n                            // }\n                        >\n                            Hide Selected\n                        </Button>\n                        <Button\n                            style={{\n                                width: \"140px\",\n                                marginLeft: \"10px\",\n                                display: \"none\",\n                            }}\n                            id=\"showSelected\"\n                            icon=\"eye-on\"\n                            className={Classes.FILL}\n                            // onClick={() =>\n                            //     State.graph.frame.showSelectedLabels()\n                            // }\n                        >\n                            Show Selected\n                        </Button>\n                    </span>\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label Size</h6>\n                    <Slider\n                        min={0.5}\n                        max={3}\n                        stepSize={0.1}\n                        // onChange={value => {\n                        //   State.graph.nodes.labelSize = value;\n                        // }}\n                        // value={State.graph.nodes.labelSize}\n                        initialValue={2}\n                        value={2}\n                    />\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label Length</h6>\n                    <Slider\n                        min={1}\n                        max={32}\n                        stepSize={0.1}\n                        labelStepSize={5}\n                        // onChange={value => {\n                        //   State.graph.nodes.labelLength = value;\n                        // }}\n                        // value={State.graph.nodes.labelLength}\n                        value={10}\n                    />\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label By</h6>\n                    {/* <Select\n            items={State.graph.allPropertiesKeyList}\n            itemRenderer={CommonItemRenderer}\n            filterable={false}\n            onItemSelect={it => (State.graph.nodes.labelBy = it)}\n          >\n            <Button text={State.graph.nodes.labelBy} />\n          </Select> */}\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, EditableCell, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state/index\";\nimport ComponentRef from \"../ComponentRef\";\n\ninterface Props {\n    /**\n     * the node id of the select node\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class NodeDetail extends React.Component<Props, {}> {\n        cellRenderer_property = (rowIndex: number) => {\n            return <Cell>{State.graph.metadata.nodeProperties[rowIndex]}</Cell>;\n        };\n\n        cellRenderer_value = (rowIndex: number) => {\n            let data = State.graph.rawGraph.getNodeAttribute(\n                this.props.onNode,\n                State.graph.metadata.nodeProperties[rowIndex]\n            );\n            // return a Editable Cell where user can edit the value of certain property;\n            return (\n                <EditableCell\n                    value={data}\n                    onChange={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    onConfirm={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    tooltip={data}\n                />\n            );\n        };\n\n        formatLongFloat = (nodeAttributeValue: any) => {\n            const num = Number(nodeAttributeValue);\n            if (Number.isNaN(num) || num > 1 || num < 0) {\n                // Do not format just return original\n                return nodeAttributeValue;\n            }\n            // Format to no more than 3 significant digit.\n            return Number.parseFloat(num.toString()).toPrecision(3);\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"node-details-table\"\n                        )}\n                    >\n                        <Table\n                            numRows={State.graph.metadata.nodeProperties.length}\n                            enableRowHeader={false}\n                        >\n                            <Column\n                                name=\"Properties\"\n                                cellRenderer={this.cellRenderer_property}\n                            />\n                            <Column\n                                name=\"Value\"\n                                cellRenderer={this.cellRenderer_value}\n                            />\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.nodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    class MultipleNodeDetail extends React.Component {\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"left-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"nodes-details-table\"\n                        )}\n                    >\n                        <Table numRows={State.graph.selectedNodes.length}>\n                            {State.graph.metadata.nodeProperties.map((it) => (\n                                <Column\n                                    key={it}\n                                    name={it}\n                                    cellRenderer={(i) => (\n                                        <Cell>\n                                            {State.graph.rawGraph.getNodeAttribute(\n                                                State.graph.selectedNodes[\n                                                    i\n                                                ] as string,\n                                                it as string\n                                            )}\n                                        </Cell>\n                                    )}\n                                />\n                            ))}\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.multiNodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { InputGroup, Menu, MenuItem } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\n\nexport default observer(\n    class SearchPanel extends React.Component {\n        renderSearchResults = () => {\n            return State.search.candidates.map((it) => {\n                return (\n                    <MenuItem\n                        text={it}\n                        onMouseOver={() => {\n                            State.search.isPreviewing = true;\n                            State.graph.currentlyHoveredId = it;\n                            State.graphDelegate.cameraFocusOn(it);\n                        }}\n                    />\n                );\n            });\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div className={classnames(\"search\")}>\n                        {State.search.candidates.length !== 0 && (\n                            <Menu\n                                large={true}\n                                className={classnames(\"search-menu\")}\n                                onMouseLeave={() => {\n                                    State.search.isPreviewing = false;\n                                }}\n                            >\n                                {this.renderSearchResults()}\n                            </Menu>\n                        )}\n                        <InputGroup\n                            asyncControl={true}\n                            large={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange(\n                                (value) => (State.search.searchStr = value)\n                            )}\n                            placeholder=\"Search any Node...\"\n                            value={State.search.searchStr}\n                        />\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport { Classes, Menu, MenuDivider, MenuItem } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { computed, makeObservable } from \"mobx\";\n\nexport default observer(\n    class RightClickNodePanel extends React.Component {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        render() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem icon=\"graph-remove\" text=\"Delete Node\" onClick={() =>{\n                        State.graph.mutating.dropNode(State.graph.currentlyHoveredId as string);\n                        State.preferences.rightClickNodePanelOpen = false;\n                    }}/>\n                    <MenuDivider />\n                    <MenuItem icon=\"new-link\" text=\"Add Edge\" />\n                    <MenuItem\n                        icon=\"cross\"\n                        text=\"Delete Edge\"\n                        onClick={() => {\n                            State.preferences.deleteEdgePanelOpen = true;\n                            State.preferences.rightClickNodePanelOpen = false;\n                        }}\n                    />\n                </Menu>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Menu, MenuDivider, MenuItem } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { computed, makeObservable } from \"mobx\";\n\nexport default observer(\n    class RightClickBackgroundPanel extends React.Component {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        render() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem\n                        icon=\"new-object\"\n                        text=\"Add Node\"\n                        onClick={() => {\n                            State.preferences.AddNodeDialogOpen = true;\n                            State.preferences.rightClickBackgroundPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                </Menu>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Alert, Button, Card, Code, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\nimport Graph from \"graphology\";\n\ninterface Props {\n    /**\n     * the node id of the select node to delete Edge\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class DeleteEdgeInteractionPanel extends React.Component<Props, {}> {\n        state = {\n            edgeToDelete: \"\",\n            deleteAlertOpen: false,\n        };\n\n        get neighbors(): string[] {\n            if (this.props.onNode === \"\") {\n                return [];\n            }\n            let neighbors: string[] = [];\n            State.graph.rawGraph.forEachNeighbor(\n                this.props.onNode,\n                (neighbor) => {\n                    neighbors.push(neighbor);\n                }\n            );\n            return neighbors;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            let targetNode = this.neighbors[rowIndex];\n            let edgeKey = State.graph.rawGraph.edge(\n                this.props.onNode,\n                targetNode\n            );\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: edgeKey as string,\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            if (this.state.edgeToDelete === \"\") {\n                return null;\n            }\n\n            let source, target;\n\n            try {\n                source = State.graph.rawGraph.source(this.state.edgeToDelete);\n                target = State.graph.rawGraph.target(this.state.edgeToDelete);\n            } catch (error) {\n                return null;\n            }\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(this.state.edgeToDelete);\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete}</Code> between Node ID{\" \"}\n                        <Code>{source}</Code> and Node ID <Code>{target}</Code>.\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        neighborsRenderer: ICellRenderer = (rowIndex: number) => {\n            return (\n                <Cell interactive={true}>\n                    <div\n                        onClick={() => {\n                            State.graphDelegate.cameraFocusOn(\n                                this.props.onNode,\n                                400\n                            );\n                            State.graphDelegate.highlightLink = {\n                                source: this.props.onNode,\n                                target: this.neighbors[rowIndex],\n                            };\n                            State.graphDelegate.graphDelegateMethods.refresh(); // update color of selected edges\n                        }}\n                    >\n                        {this.neighbors[rowIndex]}\n                    </div>\n                </Cell>\n            );\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card className={classnames(\"node-details-table\")}>\n                        <Button\n                            icon=\"cross\"\n                            onClick={() => {\n                                State.preferences.deleteEdgePanelOpen = false;\n                                State.graphDelegate.highlightLink = null;\n                                State.graphDelegate.graphDelegateMethods.refresh(); // update color of selected edges\n                            }}\n                        >\n                            Close\n                        </Button>\n                        <Table\n                            numRows={this.neighbors.length}\n                            defaultRowHeight={30}\n                            renderMode={RenderMode.NONE}\n                        >\n                            <Column\n                                name=\"\"\n                                cellRenderer={this.deleteEdgeRenderer}\n                                //@ts-ignore\n                                style={this.style}\n                            />\n                            <Column\n                                name=\"Node ID\"\n                                //@ts-ignore\n                                intent={Intent.PRIMARY}\n                                cellRenderer={this.neighborsRenderer}\n                            />\n                        </Table>\n                        {this.deleteEdgeAlert()}\n                    </Card>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Tab, Tabs } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport NodesPanel from \"./panels/NodesPanel\";\nimport EdgesPanel from \"./panels/EdgesPanel\";\nimport LabelsPanel from \"./panels/LabelsPanel\";\nimport NodeDetailPanel from \"./panels/NodeDetailPanel\";\nimport MultiDetailPanel from \"./panels/MultiDetailPanel\";\nimport SearchPanel from \"./panels/SearchPanel\";\nimport RightClickNodePanel from \"./panels/RightClickNodePanel\";\nimport RightClickBackgroundPanel from \"./panels/RightClickBackgroundPanel\";\nimport DeleteEdgeInteractionPanel from \"./panels/DeleteEdgeInteractionPanel\";\n\nlet RenderOptionsCard = observer(\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <h2>Graph Options</h2>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n//\n\nexport default observer(\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.isRenderOptionsCardHidden = !State.preferences\n                .isRenderOptionsCardHidden;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"left-overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.isRenderOptionsCardHidden\n                                    ? this.optionsInvisible\n                                    : this.optionsVisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            />\n                            <br />\n                            <RenderOptionsCard />\n                        </div>\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.isRenderOptionsCardHidden\n                                        ? this.sideButtonVis\n                                        : this.sideButtonInv\n                                }\n                            />\n                        </div>\n                    </div>\n\n                    {/* single selected */}\n                    {/* {State.graph.selectedNodes.length === 1 && (\n                        <NodeDetail node={State.graph.currentlyHoveredId} />\n                    )} */}\n                    {State.graph.currentlyHoveredId &&\n                        State.graph.selectedNodes.length === 0 && (\n                            <NodeDetailPanel\n                                onNode={State.graph.currentlyHoveredId}\n                            />\n                        )}\n\n                    {/* multiple selected */}\n                    {/* {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n                        <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n                    )} */}\n                    {State.graph.selectedNodes.length !== 0 && (\n                        <MultiDetailPanel />\n                    )}\n\n                    <SearchPanel />\n                    {State.preferences.rightClickNodePanelOpen && (\n                        <RightClickNodePanel />\n                    )}\n\n                    {State.preferences.rightClickBackgroundPanelOpen && (\n                        <RightClickBackgroundPanel />\n                    )}\n                    {State.preferences.deleteEdgePanelOpen &&\n                        State.graph.selectedNode && (\n                            <DeleteEdgeInteractionPanel\n                                onNode={State.graph.selectedNode}\n                            />\n                        )}\n                </div>\n            );\n        }\n    }\n);\n\n// export default FloatingCards;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/visualizer\";\n// import NodeDetail from \"./components/panels/NodeDetailPanel\";\n// import State from \"./state\";\n// import EdgesPanel from \"./components/panels/EdgesPanel\";\n// import LabelsPanel from \"./components/panels/LabelsPanel\";\n// import SelectionPanel from \"./components/panels/SelectionPanel\";\n// import GlobalPanel from \"./components/panels/GlobalPanel\";\n// import NodesPanel from \"./components/panels/NodesPanel\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}