{"version":3,"sources":["state/PreferencesStore.ts","state/Cluster3dObjectStore.ts","state/GraphDelegate.ts","components/ComponentRef.tsx","state/GraphMutation.ts","state/GraphStore.ts","state/ImportStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/CssStore.ts","constants/index.ts","state/ClusterInteractionStore.ts","state/NodeInteractionStore.ts","state/HelperStackPanelStore.ts","state/SignalStore.tsx","state/index.ts","components/utils/InputFormUtils.ts","state/utils/ToasterUtils.ts","components/utils/ClusterChooser.tsx","images/icon.png","components/panels/SearchPanel.tsx","components/Navbar.tsx","components/utils/SimpleSelect.tsx","components/dialogs/importDialog.tsx","components/dialogs/ExportDialog.tsx","components/utils/DataSheetDialogWrapper.tsx","components/dialogs/NodeDataSheetDialog.tsx","components/utils/NodeChooser.tsx","components/dialogs/EdgeDataSheetDialog.tsx","components/utils/NodeAdder.tsx","components/dialogs/AddNodeDialog.tsx","components/dialogs/AddEdgeDialog.tsx","components/dialogs/ImportGEXFDialog.tsx","components/Dialogs.tsx","components/panels/SelectionBox.tsx","state/utils/MouseEventUtils.ts","components/panels/CanvasDraw/CanvasDrawFreehandPanel.tsx","components/panels/CanvasDraw/CanvasDrawStraightLinePanel.tsx","components/panels/CanvasDraw/CanvasDrawFreeCirclePanel.tsx","components/panels/CanvasDraw/CanvasDrawCenterCirclePanel.tsx","components/panels/CanvasDraw/CanvasDrawPanel.tsx","components/visualize/Visualizer.tsx","components/panels/NodeDetailPanel.tsx","components/panels/MultiDetailPanel.tsx","components/panels/DeleteEdgeInteractionPanel.tsx","components/utils/Collapsable.tsx","components/panels/GraphOptions/ClusterPanel.tsx","components/utils/ColorPicker.tsx","components/panels/GraphOptions/EdgesPanel.tsx","components/panels/GraphOptions/LabelsPanel.tsx","components/panels/GraphOptions/NodesPanel.tsx","components/panels/GraphOptions/GraphOptionsCard.tsx","components/utils/FormClusterOptionsCard.tsx","components/utils/FormTwoClusterOptionsCard.tsx","components/panels/InteractionModePanel/ClusterSplittingPanelStack.tsx","components/panels/InteractionModePanel/NodeSelectionPanel.tsx","components/panels/InteractionModePanel/InteractionModePanel.tsx","components/utils/MenuItemWithTooltip.tsx","components/panels/RightClickPanel/RightClickNodeMenu.tsx","components/panels/RightClickPanel/RightClickClusterMenu.tsx","components/panels/RightClickPanel/RightClickBackgroundMenu.tsx","components/panels/RightClickPanel/RightClickPanel.tsx","components/FloatingCards.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["VisualizationMode","PreferencesStore","rightClickPositionX","rightClickPositionY","exportDialogOpen","preferenceDialogOpen","statisticsDialogOpen","AddNodeDialogOpen","AddEdgeDialogOpen","nodeDataSheetDialogOpen","edgeDataSheetDialogOpen","rightClickOn","rightClickPanelOpen","deleteEdgePanelOpen","graphOptionsCardOpen","visualizationMode","Normal","makeAutoObservable","this","except","Cluster3dObjectStore","threeScene","fusionClusterObjects","clusterObjectsMap","UUID2ClusterValueMap","canAlterNodePosition","remove","dispose","State","cluster","clusterBy","Map","initialMap","attributePoints","forEach","value","key","set","createMesh","THREE","add","convexHullObjects","initEmptyMapAndFusion","mesh","geometry","copy","convexHullObject","uuid","res","children","every","item","material","newMap","points","get","length","sphere","SphereGeometry","css","node","size","resolution","translate","x","y","z","tempArray","vector","push","positions","Float32Array","setAttribute","computeBoundingSphere","sphereGeo","boundingSphere","radius","center","shape","ConvexGeometry","Array","from","convexGeometry","geom","name","color","attributeColor","meshMaterial","transparent","opacity","side","depthWrite","oldOpacity","setTimeout","blending","shininess","_object","meshId","clusterInteraction","currentlyHoveredClusterId","selectedClusters","includes","meshSelectedMaterial","meshNormalMaterial","meshHighlightMaterial","chaserListX","chaserListY","chaserListZ","attributeKeys","sphereGeometry","position","computeNodeSphereDistribution","index","attribute","graph","rawGraph","getNodeAttribute","chaserX","chaser","initialValue","duration","target","chaserY","chaserZ","interval","setInterval","graphDelegate","graphDelegateMethods","refresh","clearInterval","numberOfPoints","dlong","Math","PI","sqrt","dz","long","ptsOnSphere","r","ptNew","cos","sin","createCustomNodeObject","_id","_cluster","id","hovered","chosen","multiSelected","isClusterNode","createCustomLinkObject","_source","_target","source","isClusterLink","GraphDelegate","clusterObject","_graphDelegateMethods","scene","newGraph","addInvisibleClusterNode","decorateRawGraph","tempGraph","nodes","links","forEachNode","attributes","forEachEdge","edge","oldGraph","graphCopy","names","getAttributeValues","clusterID","addNode","_visualize","addEdgeWithKey","nodeObject","linkObject","nodeId","distance","distRatio","hypot","cameraPosition","d3Force","link","clusterForce","normalForce","d3ReheatSimulation","ComponentRef","nodeDetail","multiNodeDetail","visualizer","clusterSplittingPanelStack","_instance","instance","reaction","interaction","currentlyHoveredNodeId","forceUpdate","GraphMutation","_this","that","newAttributes","hasOwnProperty","decorateRawNode","refreshGraph","dropNode","decorateRawEdge","addEdge","dropEdge","GraphStore","Graph","allowSelfLoops","multi","type","mutating","metadata","snapshotName","nodeProperties","_rawGraph","_metadata","flush","updateVisualizationGraph","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","result","replace","parse","comment","trim","auto_parse","skip_empty_lines","undefined","err","Toaster","create","Position","TOP","show","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","readNodeCSV","toString","Object","assign","readEdgeCSV","idx","hasNode","keys","readGEXF","entries","getNodeAttributes","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","join","console","log","it","onerror","error","action","onClick","window","location","reload","text","nodeFileConfig","SearchStore","isPreviewing","searchStr","filterProps","outputList","searchStrIgnoreCase","toLocaleLowerCase","searchAttr","ClusterStore","to","setCluster","keyValueMap","Set","keyAttribute","values","attributeKeysMap","colors","randomcolor","seed","count","NodeGlobalConfig","defaultColor","chosenColor","multiSelectedColor","highlightColor","EdgeGlobalConfig","selectedColor","defaultWidth","highlightWidth","LabelConfig","ClusterConfig","CssStore","label","isAnimating","DrawMode","NAVBAR_HEIGHT","InteractionStore","chosenNode","selectedNodes","selectedEdge","boxSelectionOpen","boxSelection_startPoint","boxSelection_endPoint","left","min","top","right","max","down","Attributes","coords","graph2ScreenCoords","neighbors","neighbor","getEdgeKey","node1","node2","go","back","oldAttributeVisualize","updateVisualizeAttributeParser","getEdgeAttribute","newAttribute","oldAttributes","ClusterInteractionStore","chosenCluster","drawPanelActivate","drawMode","FreeLine","lineSegment","confirmClusterSplittingTempData","event","meshSpotlightMaterial","getObjectById","indexOf","splice","signal","setIsRightClickingCluster","preferences","closeAllPanel","clusterValue","setNodeAttribute","screenCoords","coord","tempLineSegment","point","polygonContains","updateNodeVisualizeAttribute","centerX","centerY","pow","valueInWhite","valueInRed","nodesToAlter","HelperStackPanelStore","clusterSplittingPanelStackOpen","clusterSplittingCurrentStep","NodeSelectionPanelOpen","SignalStore","isRightClickingCluster","AppState","import","search","helper","NodeInteractionStore","privateConstructor","_state","autorun","renderImportEdgePreview","renderImportNodePreview","resumeAnimation","pauseAnimation","ClusterSplitting","step","order","number","fireImmediately","updateAllMaterials","selectedNode","updateEdgeVisualizeAttribute","currentlyHoveredNodeNeighborEdges","handleStringChange","handler","stringifyNodeDetail","parseNumberOrString","numberVal","Number","isNaN","createToaster","NONE","observer","itemRenderer","props","handleClick","propertiesWithNone","unshift","items","showNone","fullProperties","filterable","onItemSelect","selected","onSelect","syncWith","React","Component","defaultProps","ClusterAdder","state","style","display","justifyContent","leftElement","icon","onChange","setState","placeholder","fill","_","onCreate","PRIMARY","filter","prefix","disabled","FILTER_OPTIONS","inputValueRenderer","a","query","onQueryChange","itemListPredicate","candidates","onMouseOver","cameraFocusOn","onMouseLeave","openOnKeyDown","noResults","popoverProps","minimal","zIndex","align","Alignment","LEFT","title","src","logo","width","height","alt","placement","BOTTOM","marginTop","marginLeft","checked","RIGHT","marginRight","open","CommonItemRenderer","itemPredicate","object","toLowerCase","small","PreviewTable","renderWrapper","className","numRows","selectedRegions","rows","cols","cellRenderer","i","multiDialogRef","createRef","canImport","renderNodesSelection","onInputChange","files","renderEdgesSelection","newDelimiter","ref","classnames","isOpen","onClose","finalButtonProps","importGraphFromCSV","then","setGraph","hasAttribute","getAttribute","panel","Classes","DIALOG_BODY","alignItems","maxWidth","renderDelimiterSelection","nextButtonProps","large","ready","_node","_edge","write","headers","exportData","export","data","edges","interactive","elevation","Elevation","ONE","computeGEXFFile","filename","computeNodeFile","separator","computeEdgeFile","loading","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","for","onOpened","minWidth","renderTable","GraphNodeTable","filterQuery","addNodeDialogOpen","deleteAlertOpen","nodeToDelete","renderColumns","rowIndex","columnIndex","renderCell","element","cell","filteredTable","newVal","setValue","onConfirm","tooltip","deleteNodeRenderer","deleteNodeAlert","cancelButtonText","confirmButtonText","onCancel","textAlign","newTable","asyncControl","leftIcon","defaultRowHeight","SUCCESS","select","labelFor","labelInfo","rightIcon","GraphEdgeTable","addEdgeDialogOpen","edgeToDelete","chosenSource","chosenTarget","deleteEdgeRenderer","deleteEdgeAlert","addEdgeDialog","onClosed","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","hasEdge","renderMode","RenderMode","newNodeId","canImportTag","renderAttributesForm","newValue","componentDidMount","prop","autoFocus","rightElement","onAdded","fileIsSelect","importGraphFromGEXF","renderImportButton","Dialogs","boxStyle","startPoint","endPoint","mouseDown","onMouseDownCallback","startpoint","clientX","clientY","onMouseMoveCallback","_calculateSelectionBox","onMouseUpCallback","boxSelectNode","abs","onMouseDown","onMouseMove","onMouseUp","onDocumentLeftClick","evt","ReactDOM","findDOMNode","box","getBoundingClientRect","camera","unproject","intersects","sub","normalize","intersectObjects","clusterLeftClickCallback","onDocumentRightClick","clusterRightClickCallback","onDocumentMouseMove","clusterHoverCallback","canvasRef","clearDrawing","componentWillUnmount","current","JSON","canvasMethods","getSaveData","exportDrawing","boundingRect","canvasHeight","canvasWidth","lazyRadius","brushRadius","brushColor","catenaryColor","drawPoints","reverse","computeSplitCluster","clear","ctx","lineJoin","lineCap","clearRect","canvas","lineWidth","beginPath","moveTo","lineTo","strokeStyle","stroke","getContext","centerPoint","computeSplitClusterInCircle","arc","StraightLine","FreeCircle","CenterCircle","CanvasDrawCenterCirclePanel","visualizationGraph","nodePointerInteraction","clicking","graphRef","hoverNodeCallback","previousNode","nodeLeftClickCallback","NodeSelection","nodeRightClickCallback","graphMethods","backgroundClickCallback","backgroundRightClickCallback","renderGraph","graphData","nodeLabel","nodeRelSize","nodeColor","computeNodeColor","nodeVisibility","nodeResolution","nodeThreeObjectExtend","nodeThreeObject","sprite","SpriteText","textHeight","backgroundColor","visible","translateX","onNodeHover","onNodeClick","onNodeRightClick","onNodeDragEnd","fx","fy","fz","linkVisibility","linkWidth","computeEdgeWidth","linkColor","computeEdgeColor","onBackgroundRightClick","onBackgroundClick","enablePointerInteraction","onEngineTick","clusterDelegation","cooldownTicks","onEngineStop","alterNodePosition","debouncedMouseMoveCallback","DOM","fn","timer","args","clearTimeout","apply","debounce","CustomMouseEvent","addEventListener","document","removeEventListener","mountDelegateMethods","clusterInteractionListener","updateClusterForce","nodeInteractionListener","ClusterSelection","cellRenderer_property","cellRenderer_value","onNode","formatLongFloat","nodeAttributeValue","num","parseFloat","toPrecision","enableRowHeader","targetNode","neighborsRenderer","onMouseEnter","LARGE","FILL","onToggle","shapeOptionOpen","forceOptionOpen","forceCollapse","stepSize","labelStepSize","shapeCollapse","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","sizeOptionOpen","thicknessOptionOpen","colorOptionOpen","hex","timeOutRef","colorCollapse","sizeCollapse","animate","Expander","selectedAttribute","callback","background","Colors","DARK_GRAY3","marginBottom","renderInput","anotherValue","FormClusterOptionsCard","titles","renderFirstPanel","renderSecondPanel","selectedValue","renderThirdPanel","value1","value2","splitCluster","renderWhichPanel","currentStep","renderWhichBack","PANEL_STACK_HEADER_BACK","renderPanelStack","PANEL_STACK_VIEW","minHeight","PANEL_STACK_HEADER","HEADING","ellipsize","usePortal","getMessage","BUTTON","MINIMAL","active","WARNING","mode","getIntent","MenuItemWithTooltip","tooltipText","formNewClusterOpen","clusterName","multiline","formNewCluster","releaseFromCluster","mergeSelectedClustersOpen","mergeNeighborsOpen","mergeNearestClustersOpen","nodeIds","forEachNeighbor","computeDistance","distanceTo","objects","shortest","mergeSelectedClusters","previewClusterNeighbors","previewNearestNeighbors","releaseSelectedClusters","deleteSelectedClusters","makeObservable","stylePosition","computed","on","RightClickNodeMenu","RightClickClusterMenu","RightClickBackgroundMenu","ELEVATION_1","renderMenuContent","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","TWO","GraphOptionsCard","paddingTop","paddingRight","paddingBottom","NodeDetailPanel","MultiDetailPanel","App","DARK","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.384286eb.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\n/**\n * @description the four interaction modes\n * @author Zichen XU, Zhiyuan LYU\n * @export\n * @enum {number}\n */\nexport enum VisualizationMode {\n    Normal = \"Normal\", // normal state\n    ClusterSelection = \"Cluster Selection\", // selecting the cluster to be Merged\n    NodeSelection = \"Node Selection\", // multi-selecting the node\n    ClusterSplitting = \"Cluster Splitting\", // drawing the line to split the cluster\n}\n\n/**\n * @description it controls the open/close of dialogs/panels\n * and the VisualizationMode(Normal/NodeSelection/ClusterSelection/ClusterSplitting) as well\n * @author Zichen XU\n * @export\n * @class PreferencesStore\n */\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // Right Click Position\n\n    rightClickPositionX = 30;\n    rightClickPositionY = 30;\n\n    // Dialog\n\n    exportDialogOpen = false;\n    private preferenceDialogOpen = false;\n    private statisticsDialogOpen = false;\n\n    AddNodeDialogOpen = false;\n    AddEdgeDialogOpen = false;\n\n    nodeDataSheetDialogOpen = false;\n    edgeDataSheetDialogOpen = false;\n\n    // Panel\n\n    rightClickOn = null as null | \"Node\" | \"Cluster\" | \"Background\";\n    rightClickPanelOpen = false;\n    deleteEdgePanelOpen = false;\n\n    graphOptionsCardOpen = false;\n\n    closeAllPanel(except?: string) {\n        this.deleteEdgePanelOpen = false;\n        this.graphOptionsCardOpen = false;\n        if (except !== \"rightClickPanel\") {\n            this.rightClickPanelOpen = false;\n        }\n    }\n\n    // 3D Graph\n\n    visualizationMode: VisualizationMode = VisualizationMode.Normal;\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport { SphereGeometry } from \"three\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport State from \".\";\nimport chaser from \"chaser\";\n\n/**\n * @description the code in this file basically initialize the corresponding Object3D for each cluster\n * control the addition/deletion/disposition/accessing/updatePosition/updateMaterial of clusters inside the scene\n * according to the updated map from ClusterStore\n * @author Zichen XU\n * @export\n * @class Cluster3dObjectStore\n */\nexport default class Cluster3dObjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description the THREE.js WebGL Scene of the visualization\n     * @author Zichen XU\n     * @type {THREE.Scene}\n     */\n    threeScene!: THREE.Scene;\n\n    /**\n     * @description all the clusters should form a 3D Group to be imported into Scene\n     * if no cluster attribute is set, this will be set to null\n     *\n     * each children is a THREE.Mesh\n     * @author Zichen XU\n     * @type {(THREE.Group | null)}\n     */\n    fusionClusterObjects: THREE.Group | null = null;\n\n    /**\n     * @description the map between attribute value and its corresponding Mesh Group\n     * if you want to update the geometry, plz update all the children inside which Mesh Group\n     * if no cluster attribute is set, this will be set to null\n     * @author Zichen XU\n     * @type {(Map<string | number, THREE.Mesh> | null)}\n     */\n    clusterObjectsMap: Map<string | number, THREE.Mesh> | null = null;\n\n    /**\n     * @description create empty BufferGeometry and mesh with colour\n     * then initialize $fusionClusterObjects and $clusterObjectsMap with it\n     * and then add the THREE.Group to the Scene\n     * @author Zichen XU\n     * @returns {*}\n     */\n    initEmptyMapAndFusion() {\n        if (this.fusionClusterObjects) {\n            this.threeScene.remove(this.fusionClusterObjects);\n            this.dispose();\n        }\n        if (State.cluster.clusterBy === null) {\n            return;\n        }\n        this.UUID2ClusterValueMap = new Map<string, string | number>();\n        let initialMap = new Map<string | number, THREE.Mesh>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            initialMap.set(\n                key,\n                this.createMesh(new THREE.BufferGeometry(), key)\n            );\n        });\n\n        this.clusterObjectsMap = initialMap;\n        this.fusionClusterObjects = new THREE.Group();\n        initialMap.forEach((value) => {\n            this.fusionClusterObjects?.add(value);\n        });\n        this.threeScene.add(this.fusionClusterObjects);\n    }\n\n    /**\n     * @description should be called on each render frame\n     * will update the geometry inside each cluster object\n     *\n     * if is the first time (both are null), will run initEmptyMapAndFusion() first\n     *\n     * if meet with clusterBy == null, will dispose all Object3d\n     * @author Zichen XU\n     * @returns {*}\n     */\n    clusterDelegation() {\n        if (State.cluster.clusterBy === null) {\n            return;\n        } else {\n            if (\n                this.fusionClusterObjects == null ||\n                this.convexHullObjects == null\n            ) {\n                this.initEmptyMapAndFusion();\n            }\n            this.clusterObjectsMap?.forEach(\n                (mesh: THREE.Mesh, key: string | number) => {\n                    mesh.geometry.copy(this.convexHullObject(key));\n                }\n            );\n        }\n    }\n\n    /**\n     * @description get the THREE.Mesh object by its uuid\n     * @author Zichen XU\n     * @param {string} uuid\n     * @returns {*}  {(THREE.Mesh | null)}\n     */\n    getObjectById(uuid: string): THREE.Mesh | null {\n        let res: THREE.Object3D | null = null;\n        this.fusionClusterObjects?.children.every((item: THREE.Object3D) => {\n            if (item.uuid === uuid) {\n                res = item;\n                return false;\n            } else {\n                return true;\n            }\n        });\n        return res;\n    }\n\n    /**\n     * @description dispose the geometries and materials in every clusterObject\n     * and set these props to be null, which indicates that no additional 3d object is added into Scene\n     * @author Zichen XU\n     */\n    private dispose() {\n        this.clusterObjectsMap?.forEach((mesh: THREE.Mesh) => {\n            let material = mesh.material as THREE.Material;\n            material.dispose();\n            mesh.geometry.dispose();\n        });\n        this.clusterObjectsMap = null;\n        this.fusionClusterObjects = null;\n        this.UUID2ClusterValueMap = new Map<string, string | number>();\n    }\n\n    /**\n     * @description the map between the value of the cluster and the BufferGeometry that this cluster created\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string | number, THREE.BufferGeometry>)}\n     */\n    get convexHullObjects(): Map<string | number, THREE.BufferGeometry> {\n        let newMap = new Map<string | number, THREE.BufferGeometry>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            newMap.set(key, this.convexHullObject(key));\n        });\n        return newMap;\n    }\n\n    /**\n     * @description get the computed convexHull BufferGeometry of the specified attribute value\n     * @author Zichen XU\n     * @param {(string | number)} key\n     * @returns {*}  {THREE.BufferGeometry}\n     */\n    private convexHullObject(key: string | number): THREE.BufferGeometry {\n        let points = State.cluster.attributePoints.get(key) as THREE.Vector3[];\n\n        if (!points || points.length === 0) {\n            return new THREE.BufferGeometry();\n        } else if (points.length === 1) {\n            let sphere = new SphereGeometry(\n                State.css.node.size + 5,\n                State.css.cluster.resolution,\n                State.css.cluster.resolution\n            );\n            sphere.translate(points[0].x, points[0].y, points[0].z);\n            return sphere;\n        } else if (points.length < 4) {\n            // there are 2 or 3 points in this cluster\n            let geometry = new THREE.BufferGeometry();\n            let tempArray: number[] = [];\n            points.forEach((vector) => {\n                tempArray.push(vector.x, vector.y, vector.z);\n            });\n            const positions = new Float32Array(tempArray);\n            geometry.setAttribute(\n                \"position\",\n                new THREE.BufferAttribute(positions, 3)\n            );\n            geometry.computeBoundingSphere();\n            let sphereGeo = geometry.boundingSphere as THREE.Sphere;\n            let sphere = new SphereGeometry(\n                sphereGeo.radius + 5,\n                State.css.cluster.resolution,\n                State.css.cluster.resolution\n            );\n            sphere.translate(\n                sphereGeo.center.x,\n                sphereGeo.center.y,\n                sphereGeo.center.z\n            );\n            return sphere;\n        } else {\n            if (State.css.cluster.shape === \"convexHull\") {\n                // when there are more than 3 points, simply gnerate a convexgeometry\n                return new ConvexGeometry(Array.from(points));\n            } else {\n                // State.css.clusterShape === \"Sphere\"\n                let convexGeometry = new ConvexGeometry(Array.from(points));\n                convexGeometry.computeBoundingSphere();\n                let sphereGeo = convexGeometry.boundingSphere as THREE.Sphere;\n                let sphere = new SphereGeometry(\n                    sphereGeo.radius + 5,\n                    State.css.cluster.resolution,\n                    State.css.cluster.resolution\n                );\n                sphere.translate(\n                    sphereGeo.center.x,\n                    sphereGeo.center.y,\n                    sphereGeo.center.z\n                );\n                return sphere;\n            }\n        }\n    }\n\n    /**\n     * @description create a Three.Group, which contains 2 Three.Mesh, of the input geometry\n     * @author Zichen XU\n     * @private\n     * @param {THREE.BufferGeometry} geom\n     * @param {(string | number)} name\n     * @returns {*}  {THREE.Mesh}\n     */\n    private createMesh(\n        geom: THREE.BufferGeometry,\n        name: string | number\n    ): THREE.Mesh {\n        const color = State.cluster.attributeColor.get(name);\n        const meshMaterial = new THREE.MeshBasicMaterial({\n            color: color,\n            transparent: true,\n            opacity: 0.15,\n        });\n        meshMaterial.side = THREE.DoubleSide;\n        meshMaterial.depthWrite = false;\n\n        let mesh = new THREE.Mesh(geom, meshMaterial);\n        //@ts-ignore\n        mesh[\"_color\"] = color;\n        this.UUID2ClusterValueMap.set(mesh.uuid, name);\n        mesh.name = \"THREE_CLUSTER_\" + name;\n        return mesh;\n    }\n\n    /**\n     * @description a map from (the uuid that get from the WebGL) to (the cluster value of this cluster)\n     * @author Zichen XU\n     * @type {(Map<string, string | number>)}\n     */\n    UUID2ClusterValueMap!: Map<string, string | number>;\n\n    /**\n     * @description add the mesh material a short highlight\n     * @author Zichen XU\n     * @param {THREE.Mesh} mesh\n     */\n    meshSpotlightMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        const oldOpacity = material.opacity;\n        material.opacity = 1;\n        setTimeout(() => {\n            material.opacity = oldOpacity;\n        }, 50);\n    }\n\n    /**\n     * @description set the mesh material to be highlighted\n     * @author Zichen XU\n     * @private\n     * @static\n     * @param {THREE.Mesh} mesh\n     */\n    private meshHighlightMaterial(mesh: THREE.Mesh) {\n        mesh.material = new THREE.MeshBasicMaterial({\n            //@ts-ignore\n            color: mesh[\"_color\"],\n            transparent: true,\n            opacity: 0.7,\n            blending: THREE.AdditiveBlending,\n        });\n    }\n\n    /**\n     * @description set the mesh material to be as selected\n     * @author Zichen XU\n     * @private\n     * @static\n     * @param {THREE.Mesh} mesh\n     */\n    private meshSelectedMaterial(mesh: THREE.Mesh) {\n        mesh.material = new THREE.MeshPhongMaterial({\n            //@ts-ignore\n            color: mesh[\"_color\"],\n            shininess: 10,\n            opacity: 0.7,\n            transparent: true,\n        });\n    }\n\n    /**\n     * @description set the mesh material back to normal\n     * @author Zichen XU\n     * @private\n     * @static\n     * @param {THREE.Mesh} mesh\n     */\n    private meshNormalMaterial(mesh: THREE.Mesh) {\n        mesh.material = new THREE.MeshBasicMaterial({\n            //@ts-ignore\n            color: mesh[\"_color\"],\n            transparent: true,\n            opacity: 0.15,\n        });\n        mesh.material.side = THREE.DoubleSide;\n        mesh.material.depthWrite = false;\n    }\n\n    /**\n     * @description update and refresh all materials of all the cluster objects\n     * @author Zichen XU\n     */\n    updateAllMaterials() {\n        this.fusionClusterObjects?.children.forEach((_object) => {\n            let mesh = _object as THREE.Mesh;\n            const meshId = mesh.uuid;\n            if (State.clusterInteraction.currentlyHoveredClusterId === meshId) {\n                this.meshHighlightMaterial(mesh);\n                return;\n            } else if (\n                State.clusterInteraction.selectedClusters.includes(meshId)\n            ) {\n                this.meshSelectedMaterial(mesh);\n                return;\n            } else {\n                this.meshNormalMaterial(mesh);\n            }\n        });\n    }\n\n    /**\n     * @description determine whether at this time can the node to be auto-altered to the surface of the sphere\n     * if the engine reheat, will set this to true.\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    canAlterNodePosition: boolean = false;\n\n    /**\n     * @description alter the nodes onto the surface of the sphere in 1s\n     * using the computeNodeSphereDistribution() to compute the position\n     * @author Zichen XU\n     */\n    alterNodePosition() {\n        interface chaserAndPosition {\n            chaser: any;\n            position: { x: number; y: number; z: number };\n        }\n\n        let chaserListX: chaserAndPosition[] = [];\n        let chaserListY: chaserAndPosition[] = [];\n        let chaserListZ: chaserAndPosition[] = [];\n\n        State.cluster.attributeKeys.forEach((points, cluster) => {\n            const sphereGeometry = this.clusterObjectsMap?.get(\n                cluster\n            ) as THREE.Mesh;\n            const radius = sphereGeometry.geometry.boundingSphere?.radius!;\n            let position = sphereGeometry.geometry.boundingSphere?.center!;\n            let newPositions = this.computeNodeSphereDistribution(\n                radius,\n                points.length\n            );\n\n            newPositions.forEach((value, index) => {\n                let attribute = State.graph.rawGraph.getNodeAttribute(\n                    points[index],\n                    \"_visualize\"\n                );\n                const chaserX = chaser({\n                    initialValue: attribute.x,\n                    duration: 1000,\n                });\n                chaserX.target = value.x + position.x;\n                chaserListX.push({ chaser: chaserX, position: attribute });\n\n                const chaserY = chaser({\n                    initialValue: attribute.y,\n                    duration: 1000,\n                });\n                chaserY.target = value.y + position.y;\n                chaserListY.push({ chaser: chaserY, position: attribute });\n\n                const chaserZ = chaser({\n                    initialValue: attribute.z,\n                    duration: 1000,\n                });\n                chaserZ.target = value.z + position.z;\n                chaserListZ.push({ chaser: chaserZ, position: attribute });\n            });\n        });\n\n        let interval = setInterval(() => {\n            chaserListX.forEach((value) => {\n                value.position.x = value.chaser.value;\n            });\n            chaserListY.forEach((value) => {\n                value.position.y = value.chaser.value;\n            });\n            chaserListZ.forEach((value) => {\n                value.position.z = value.chaser.value;\n            });\n            State.graphDelegate.graphDelegateMethods.refresh();\n        }, 50);\n        setTimeout(() => clearInterval(interval), 1000);\n    }\n\n    /**\n     * @description using a algorithm to compute a array of points that distribute on the sphere specified by the radius\n     * @author Zichen XU\n     * @private\n     * @param {number} radius\n     * @param {number} [numberOfPoints=45]\n     * @returns {*}  {{ x: number; y: number; z: number }[]}\n     */\n    private computeNodeSphereDistribution(\n        radius: number,\n        numberOfPoints = 45\n    ): { x: number; y: number; z: number }[] {\n        let dlong = Math.PI * (3.0 - Math.sqrt(5.0));\n        let dz = 2.0 / numberOfPoints;\n        let long = 0.0;\n        let z = 1.0 - dz / 2.0;\n        let ptsOnSphere: { x: number; y: number; z: number }[] = [];\n        for (let index = 0; index < numberOfPoints; index++) {\n            let r = Math.sqrt(1.0 - z * z);\n            let ptNew = {\n                x: Math.cos(long) * r * radius,\n                y: Math.sin(long) * r * radius,\n                z: z * radius,\n            };\n            ptsOnSphere.push(ptNew);\n            z = z - dz;\n            long = long + dlong;\n        }\n        return ptsOnSphere;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport State from \".\";\nimport {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport Cluster3dObjectStore from \"./Cluster3dObjectStore\";\n\nexport type Partial<T> = {\n    [P in keyof T]?: T[P];\n};\n\n/**\n * @description\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n * @author Zichen XU\n * @export\n * @interface ICustomNodeObject\n * @extends {NodeObject}\n */\nexport interface ICustomNodeObject extends NodeObject {\n    hovered: boolean;\n    chosen: boolean;\n    multiSelected: boolean;\n    isClusterNode?: boolean;\n}\n\n/**\n * @description\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n * @author Zichen XU\n * @export\n * @interface ICustomLinkObject\n * @extends {LinkObject}\n */\nexport interface ICustomLinkObject extends LinkObject {\n    chosen: boolean;\n    hovered: boolean;\n    isClusterLink?: boolean;\n}\n\n/**\n * @description create a default CustomNodeObject by specifying the id\n * and whether this node is the cluster node\n * @author Zichen XU\n * @export\n * @param {string} _id\n * @param {boolean} [_cluster=false]\n * @returns {*}  {ICustomNodeObject}\n */\nexport function createCustomNodeObject(\n    _id: string,\n    _cluster: boolean = false\n): ICustomNodeObject {\n    return {\n        id: _id,\n        hovered: false,\n        chosen: false,\n        multiSelected: false,\n        isClusterNode: _cluster,\n    };\n}\n\n/**\n * @description create a default CustomLinkObject by specifying the source and target id\n * and whether this node is the cluster link\n * @author Zichen XU\n * @export\n * @param {string} _source\n * @param {string} _target\n * @param {boolean} [_cluster=false]\n * @returns {*}  {ICustomLinkObject}\n */\nexport function createCustomLinkObject(\n    _source: string,\n    _target: string,\n    _cluster: boolean = false\n): ICustomLinkObject {\n    return {\n        source: _source,\n        target: _target,\n        hovered: false,\n        chosen: false,\n        isClusterLink: _cluster,\n    };\n}\n\n/**\n * @description acts as a bridge between the graphology graph data structure and the 3d-force-graph we use to render the 3D scene\n * The visualizationGraph() will compute the clustered graph to be send to 3d-renderer\n * The cluster data generated by ClusterStore will be used in this process.\n *\n * we define some customized interfaces ICustomNodeObject and ICustomLinkObject which extends from the Node/LinkObject of 3d-force-graph\n * with adding fields like hovered, selected and multiSelected to deal with the WebGL mouse interaction.\n * This class also includes reference to the React.Ref of 3d-renderer\n * with providing functions like auto-focus the camera as well as update the force inside the cluster.\n * @author Zichen XU\n * @export\n * @class GraphDelegate\n */\nexport default class GraphDelegate {\n    constructor() {\n        makeAutoObservable(this);\n        this.clusterObject = new Cluster3dObjectStore();\n    }\n\n    /**\n     * @description assign the force-graph methods to this class\n     * should be called as long as the visualizer react component is mounted\n     * @author Zichen XU\n     * @param {ForceGraphMethods} _graphDelegateMethods\n     */\n    mountDelegateMethods(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.clusterObject.threeScene = this.graphDelegateMethods.scene();\n    }\n\n    /**\n     * @description the ForceGraphMethods exposed by the visualization force-graph\n     * @author Zichen XU\n     * @see ForceGraphMethods\n     * @type {ForceGraphMethods}\n     */\n    graphDelegateMethods!: ForceGraphMethods;\n\n    /**\n     * @description compute the delegate graph that will be used by the ForceGraph3D\n     * will add invisible cluster nodes and edges to balance the clustered graph and adjust force\n     * the NodeObject and LinkObject inside attributes (named _visualize) will be used.\n     *\n     * @author Zichen XU\n     * @returns {*}\n     */\n    visualizationGraph() {\n        let newGraph: Graph;\n        if (State.cluster.clusterBy === null) {\n            newGraph = State.graph.rawGraph;\n        } else {\n            newGraph = this.addInvisibleClusterNode(\n                State.graph.decorateRawGraph(State.graph.rawGraph)\n            );\n        }\n        let tempGraph = {\n            nodes: [] as ICustomLinkObject[],\n            links: [] as ICustomLinkObject[],\n        };\n        newGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        newGraph.forEachEdge((edge, attributes) => {\n            tempGraph.links.push(attributes[\"_visualize\"]);\n        });\n        return tempGraph;\n    }\n\n    /**\n     * @description return a new graph that contains the invisible clusters, formed as nodes\n     * as well as the edges that connected to the cluster node to simulate the force within the same cluster\n     * the new graph is a deep copy of the old node, so no worries of the original graph DS\n     * @author Zichen XU\n     * @private\n     * @param {Graph} oldGraph\n     * @returns {*}  {Graph}\n     */\n    private addInvisibleClusterNode(oldGraph: Graph): Graph {\n        let graphCopy = oldGraph.copy();\n        let names = [\n            \"_CLUSTER_1_\",\n            \"_CLUSTER_2_\",\n            \"_CLUSTER_3_\",\n            \"_CLUSTER_4_\",\n            \"_CLUSTER_5_\",\n            \"_CLUSTER_6_\",\n            \"_CLUSTER_7_\",\n            \"_CLUSTER_8_\",\n            \"_CLUSTER_9_\",\n            \"_CLUSTER_10_\",\n        ];\n        for (let index = 0; index < names.length; index++) {\n            State.cluster.getAttributeValues.forEach(\n                (attribute: string | number) => {\n                    // if a node does not belong to any cluster, a undefined will be formed with no cluster to generate\n                    if (attribute === \"undefined\") return;\n\n                    let clusterID = names[index] + attribute;\n                    graphCopy.addNode(clusterID, {\n                        _visualize: createCustomNodeObject(clusterID, true),\n                    });\n\n                    // add edges to simulate the force of the same cluster\n                    State.cluster.attributeKeys\n                        .get(attribute)\n                        ?.forEach((target) => {\n                            graphCopy.addEdgeWithKey(\n                                `${clusterID}-${target}`,\n                                clusterID,\n                                target,\n                                {\n                                    _visualize: createCustomLinkObject(\n                                        clusterID,\n                                        target,\n                                        true\n                                    ),\n                                }\n                            );\n                        });\n                }\n            );\n        }\n\n        return graphCopy;\n    }\n\n    /**\n     * @description determine whether this Node is the cluster delegate node\n     * @author Zichen XU\n     * @param {NodeObject} nodeObject\n     * @returns {*}\n     */\n    nodeVisibility(nodeObject: NodeObject) {\n        let node = nodeObject as ICustomNodeObject;\n        return !node.isClusterNode;\n    }\n\n    /**\n     * @description determine whether this edge is the cluster delegate edge\n     * @author Zichen XU\n     * @param {LinkObject} linkObject\n     * @returns {*}\n     */\n    linkVisibility(linkObject: LinkObject) {\n        let link = linkObject as ICustomLinkObject;\n        return !link.isClusterLink;\n    }\n\n    ////\n\n    /**\n     * @description the link to Cluster3dObjectStore to manipulate the cluster related to WebGL\n     * @author Zichen XU\n     * @type {Cluster3dObjectStore}\n     */\n    clusterObject: Cluster3dObjectStore;\n\n    ////\n\n    /**\n     * @description this will re-position the camera to focus on the specified node\n     * if distance not specified, a default of 40 will be used\n     * @author Zichen XU\n     * @param {string} nodeId the node to be focused\n     * @param {number} [distance=40] the ending distance between the camera and the node\n     * @returns {*}\n     */\n    cameraFocusOn(nodeId: string, distance: number = 80) {\n        let node = State.graph.rawGraph.getNodeAttribute(nodeId, \"_visualize\");\n        if (!(node.x && node.y && node.z)) return;\n        // Aim at node from outside it\n        const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n        this.graphDelegateMethods.cameraPosition(\n            {\n                x: node.x * distRatio,\n                y: node.y * distRatio,\n                z: node.z * distRatio,\n            }, // new position\n            { x: node.x, y: node.y, z: node.z }, // lookAt ({ x, y, z })\n            3000 // ms transition duration\n        );\n    }\n\n    ////\n\n    /**\n     * @description set the force inside each cluster in the ForceGraph\n     * @author Zichen XU\n     */\n    updateClusterForce() {\n        this.graphDelegateMethods\n            ?.d3Force(\"link\")\n            //@ts-ignore\n            ?.distance((link: CustomLinkObject) => {\n                return link.isClusterLink\n                    ? State.css.cluster.clusterForce\n                    : State.css.cluster.normalForce;\n            });\n        this.graphDelegateMethods.d3ReheatSimulation();\n    }\n}\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport State from \"../state\";\n\n/**\n * @description the React.ref for storing the components that may be used by others\n * @author Zichen XU\n * @class ComponentRef\n */\nclass ComponentRef {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    static _instance: ComponentRef | null = null;\n\n    nodeDetail!: React.Component | any;\n\n    multiNodeDetail!: React.Component | any;\n\n    visualizer!: React.Component | any;\n\n    // canvasDrawPanel!: React.Component | any;\n\n    // canvasDrawStraightLinePanel!: React.Component | any;\n\n    clusterSplittingPanelStack!: React.Component | any;\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (ComponentRef._instance === null) {\n            let instance = new ComponentRef();\n            ComponentRef._instance = instance;\n            return instance;\n        } else {\n            return ComponentRef._instance;\n        }\n    }\n}\n\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    () => ComponentRef.instance.nodeDetail?.forceUpdate()\n);\n\nexport default ComponentRef.instance;\n","import { Attributes, EdgeKey, NodeKey } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\nimport GraphStore from \"./GraphStore\";\n\n/**\n * the wrapper mutating function that relates to the mutation of the rawGraph DS\n * all the mutation of the Graph should all go through this API rather than calling on rawGraph directly.\n *\n * @export\n * @class GraphMutation\n */\nexport default class GraphMutation {\n    constructor(_this: GraphStore) {\n        makeAutoObservable(this);\n        this.that = _this;\n    }\n\n    /**\n     * @description the graph store\n     * @see GraphStore\n     * @author Zichen XU\n     * @private\n     * @type {GraphStore}\n     */\n    private that!: GraphStore;\n\n    /**\n     * @description add the node with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     * @author Zichen XU\n     * @param {NodeKey} node\n     * @param {Attributes} [attributes]\n     */\n    public addNode(node: NodeKey, attributes?: Attributes): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addNode(node, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * @description delete the node with this nodeId in the Graph and refresh the 3d Graph\n     * @author Zichen XU\n     * @param {string} nodeId\n     */\n    public dropNode(nodeId: string): void {\n        this.that.rawGraph.dropNode(nodeId);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * @description add the edge with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     * @author Zichen XU\n     * @param {NodeKey} source\n     * @param {NodeKey} target\n     * @param {Attributes} [attributes]\n     */\n    public addEdge(\n        source: NodeKey,\n        target: NodeKey,\n        attributes?: Attributes\n    ): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addEdge(source, target, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * @description delete the edge with this key in the Graph and refresh the 3d Graph\n     * @author Zichen XU\n     * @param {EdgeKey} edge\n     */\n    public dropEdge(edge: EdgeKey): void {\n        this.that.rawGraph.dropEdge(edge);\n        this.that.refreshGraph();\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { Attributes } from \"graphology-types\";\nimport {\n    createCustomNodeObject,\n    createCustomLinkObject,\n} from \"./GraphDelegate\";\nimport ComponentRef from \"../components/ComponentRef\";\nimport State from \".\";\nimport GraphMutation from \"./GraphMutation\";\n\n/**\n * @description the metadata that importDialog should update to this\n * @author Zichen XU\n * @export\n * @interface IMetaData\n */\nexport interface IMetaData {\n    snapshotName: string;\n\n    // attributes of nodes in imported graph\n    nodeProperties: string[];\n}\n\n/**\n * @description define a class for storing the raw graph (graphology object),\n * the related metadata information, the public api for setting, refreshing\n * and decorating(change the barebone graph into the appropriate instances that we use to send to 3d-graph renderer)\n * the graph as well as the entry of GraphMutation for manipulating the graph.\n * @author Zichen XU\n * @export\n * @class GraphStore\n */\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.mutating = new GraphMutation(this);\n    }\n\n    /**\n     * @description the graphology data structure to store a graph.\n     * has a lot of APIs to manipulate as well as iterate through the graph\n     * @author Zichen XU\n     * @type {Graph}\n     */\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: false,\n        multi: false,\n        type: \"undirected\",\n    });\n\n    /**\n     * @description should be called when individual nodes are added to the graph.\n     * add the CustomNodeObject to node attributes stored in the data structure\n     * @author Zichen XU\n     * @see CustomNodeObject\n     * @param {string} node\n     * @param {Attributes} attributes\n     */\n    decorateRawNode(node: string, attributes: Attributes) {\n        attributes._visualize = createCustomNodeObject(node, false);\n    }\n\n    /**\n     * should be called when individual edges are added to the graph.\n     *\n     * add the CustomLinkObject to node attributes stored in the data structure\n     * @see CustomLinkObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} source\n     * @param {string} target\n     * @param {Attributes} attributes\n     */\n    decorateRawEdge(source: string, target: string, attributes: Attributes) {\n        attributes._visualize = createCustomLinkObject(source, target, false);\n    }\n\n    /**\n     * should be called on every graph import\n     * add the the _visualize to every links inside the specified graph\n     *\n     * the _visualize is for storing the object to be send to front-end to render the graph\n     *\n     * @param {Graph} _rawGraph\n     * @return {*}  {Graph}\n     */\n    decorateRawGraph(_rawGraph: Graph): Graph {\n        _rawGraph.forEachNode((node, attributes) =>\n            this.decorateRawNode(node, attributes)\n        );\n\n        _rawGraph.forEachEdge((edge, attributes, source, target) =>\n            this.decorateRawEdge(source, target, attributes)\n        );\n        return _rawGraph;\n    }\n\n    /**\n     * proxy method to set the new graph\n     * if intend to set a new graph, please use this method instead of directly modify GraphStore\n     *\n     * @param {Graph} _rawGraph\n     * @param {IMetaData} _metadata\n     */\n    public setGraph(_rawGraph: Graph, _metadata: IMetaData | null = null) {\n        this.rawGraph = this.decorateRawGraph(_rawGraph);\n        if (_metadata) {\n            this.metadata = _metadata;\n        }\n        State.interaction.flush();\n        State.cluster.clusterBy = null;\n        State.graphDelegate.clusterObject.initEmptyMapAndFusion();\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * @description should be called when the graph gets updated\n     * (the data inside the graph gets updated, or the attribute to be clustered has changed)\n     * @author Zichen XU\n     */\n    public refreshGraph() {\n        State.interaction.flush();\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * @description the wrapper methods to mutate the graph\n     * all the mutations of the graph should go through this API rather than calling this.rawGraph.[mutate]\n     * has basic functions like addNode, dropNode, addEdge, dropEdge...\n     * @author Zichen XU\n     * @see {GraphMutation}\n     * @type {GraphMutation}\n     */\n    mutating: GraphMutation;\n\n    /**\n     * @description the metadata related to the raw graph\n     * should be updated if a new graph is imported\n     * @author Zichen XU\n     * @type {IMetaData}\n     */\n    metadata: IMetaData = {\n        snapshotName: \"SNAPSHOT\",\n        nodeProperties: [],\n    };\n}\n","import { Intent, Position, Toaster } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\nimport { IMetaData } from \"./GraphStore\";\n\n/**\n * @description interface for the node file being configured\n * @author Zichen XU\n * @export\n * @interface INodeFileConfig\n */\nexport interface INodeFileConfig {\n    // the file is successfully parsed and ready for display\n    isReady: boolean;\n    parseError: boolean;\n    path: string;\n\n    // has header at the top\n    hasHeader: boolean;\n\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n    topN: any[];\n    //names for the columns of this csv\n    columns: string[];\n    mapping: {\n        id: string;\n    };\n    delimiter: string;\n}\n/**\n * @description interface for the edge file being configured\n * @author Zichen XU\n * @export\n * @interface IEdgeFileConfig\n */\nexport interface IEdgeFileConfig {\n    isReady: boolean;\n    parseError: boolean;\n\n    // should save the csv to temp for further change the cluster attribute\n    path: string;\n    hasHeader: boolean;\n\n    // array of objects storing the\n    topN: any[];\n    columns: string[];\n    mapping: {\n        fromId: string;\n        toId: string;\n    };\n    delimiter: string;\n}\n\n/**\n * @description this class defines some necessary configs for the graph-importing procedures\n * such as the `INodeFileConfig` and `IEdgeFileConfig` for customizing the csv/gexf file parsing procedure\n * Other functions like `renderImportNode/EdgePreview` renders the preview table in the ImportDialog\n * and `importGraphFromCSV/GEXF` reads the file input and produce the `graphology` object to be assigned to `GraphStore`\n * with some basic error handling strategies\n * These functions are designed to be synchronized to prevent frozen of UI.\n * @author Zichen XU\n * @export\n */\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    importDialogOpen = false;\n\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as INodeFileConfig,\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as IEdgeFileConfig,\n    };\n\n    /**\n     * @description read the CSV file specified by fileObject, with options defined by other paras\n     * and return a list of objects containing the key-value pair of attribute-value\n     * @author Zichen XU\n     * @private\n     * @param {File} fileObject\n     * @param {boolean} hasHeader\n     * @param {string} delimiter\n     * @returns {*}  {Promise<any[]>}\n     *      * where Object is of { attribute: number | string, anotherAttribute: number | string, ... } type\n\n     */\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    /**\n     * @description parse the graph from import GEXF file specified in selectedGEXFFileFromInput\n     * and return a Graph object\n     * @author Zichen XU\n     * @private\n     * @returns {*}  {Promise<Graph>}\n     */\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, reader.result as string));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    this.isLoading = false;\n                }\n            };\n        });\n    }\n\n    /**\n     * @description helper function to read edge csv and call this.readCSV()\n     * @author Zichen XU\n     * @returns {*}  {Promise<any[]>}\n     */\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    /**\n     * @description helper function to read node csv and call this.readCSV()\n     * @author Zichen XU\n     * @returns {*}  {Promise<any[]>}\n     */\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    /**\n     * @description will create a Graph structure to store the nodes and edges in the imported File\n     * should handle whether or not have the NodeFile, whether or not have the header of each file\n     * if successfully imported, change the .isReady to be true\n     * @author Zichen XU\n     * @returns {*}\n     */\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: false,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            if (this.importConfig.nodeFile.hasHeader) {\n                // if has header, then tempNodes returns an array of objects\n                tempNodes = (await this.readNodeCSV()) as Object[];\n                tempNodes.forEach((node) => {\n                    let nodeId = node[config.nodeFile.mapping.id].toString();\n                    delete node[config.nodeFile.mapping.id];\n                    graph.addNode(nodeId, node);\n                });\n            } else {\n                // if no header, then tempNodes returns an array of array\n                tempNodes = (await this.readNodeCSV()) as any[][];\n                tempNodes.forEach((node) => {\n                    let nodeId = node[config.nodeFile.mapping.id].toString();\n                    let attributes = Object.assign({}, node);\n                    delete attributes[config.nodeFile.mapping.id];\n                    graph.addNode(nodeId, attributes);\n                });\n            }\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge, idx) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, {});\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, {});\n            }\n            graph.addEdgeWithKey(idx, fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            } as IMetaData,\n        };\n    }\n\n    /**\n     * @description will create a Graph structure to store the nodes and edges in the imported File\n     * please use try catch to avoid any invalid GEXF file\n     * @author Zichen XU\n     * @returns {*}\n     */\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n        for (const [key] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            } as IMetaData,\n        };\n    }\n\n    /**\n     * @description change the importConfig.edgeFile.topN to be the top 10 parsed elements in the input edge file\n     * change the importConfig.edgeFile.columns to be the attributes of the imported edge file\n     * set the .mapping.fromId and .mapping.toId to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedEdgeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @author Zichen XU\n     * @returns {*}\n     */\n    public async renderImportEdgePreview() {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter: delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter: delimiter,\n                          });\n                    edgeFileConfig.topN = it;\n                    edgeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (edgeFileConfig.columns.length >= 2) {\n                        edgeFileConfig.mapping.fromId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                        edgeFileConfig.isReady = true;\n                    } else if (edgeFileConfig.columns.length === 1) {\n                        edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        edgeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n\n    /**\n     * @description change the importConfig.nodeFile.topN to be the top 10 parsed elements in the input node file\n     * change the importConfig.nodeFile.columns to be the attributes of the imported node file\n     * set the .mapping.id .mapping.cluster to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedNodeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n\n     * @author Zichen XU\n     * @returns {*} \n     */\n    public async renderImportNodePreview() {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter,\n                          });\n                    nodeFileConfig.topN = it;\n                    nodeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (nodeFileConfig.columns.length >= 1) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                        nodeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        nodeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport State from \".\";\n\n/**\n * @description this file is the backend support for the NodeSearch feature\n * and will compute the possible searching candidates according to the query parameters\n * @author Zichen XU\n * @export\n * @class SearchStore\n */\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description if is previewing, ignore all mouse hovers detected by NodeDetailPanel\n     * because it is showing the detail of selected node\n     * @author Zichen XU\n     */\n    isPreviewing = false;\n\n    /**\n     * @description the search string typed in by user\n     * can use defined regex like:\n     * id:123\n     * attr:color:red\n     * @author Zichen XU\n     */\n    searchStr = \"\";\n\n    /**\n     * @description if filter search is selected\n     * null will be to search on id, and others will be to search based on that attribute value\n     * @author Zichen XU\n     * @type {(string | null)}\n     */\n    filterProps: string | null = null;\n\n    // contains node ids\n\n    /**\n     * @description compute a list of nodeids queried by the searchStr\n     * @author Zichen XU\n     * @type {string[]}\n     */\n    get candidates(): string[] {\n        let outputList: string[] = [];\n        let searchStrIgnoreCase = this.searchStr.toLocaleLowerCase();\n        if (this.filterProps === null) {\n            // search on id\n            State.graph.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(searchStrIgnoreCase)) {\n                    outputList.push(node);\n                }\n            });\n        } else {\n            // have specify the attribute\n            const searchAttr = this.filterProps as string;\n            State.graph.rawGraph.forEachNode((node, attributes) => {\n                if (attributes.hasOwnProperty(searchAttr)) {\n                    let attribute = attributes[searchAttr];\n                    if (\n                        attribute\n                            .toString()\n                            .toLocaleLowerCase()\n                            .includes(searchStrIgnoreCase)\n                    ) {\n                        outputList.push(node);\n                    }\n                }\n            });\n        }\n        return outputList;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\nimport State from \".\";\n\n/**\n * this store handles the cluster generating according to the clusterBy defined by user\n * by applying the computed value in MobX\n * the keyAttributes, getAttributeValues, attributeKeys, attributeColor and attributePoints will auto-compute accordingly in code reference order\n * and ultimately produce a mapping from (the cluster value) to (a array of node points)\n * which shall be used by Cluster3DObjectStore to compute the 3D-convex hull used in the 3d-renderer\n *\n * @export\n * @class ClusterStore\n */\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description specify which attribute to be clustered\n     * the default value should be null, and front-end graph will interpret this to Not-Cluster\n     *\n     * @summary attention: please use setCluster() to alter this data\n     * @author Zichen XU\n     * @type {(string | null)}\n     */\n    clusterBy: string | null = null;\n\n    /**\n     * @description the setter of clusterBy\n     * will update the front-end 3d graph about the cluster changes\n     * @author Zichen XU\n     * @param {(string | null)} to\n     * @param {boolean} [forceUpdate=false]\n     */\n    setCluster(to: string | null, forceUpdate: boolean = false) {\n        if (forceUpdate) {\n            this.setCluster(null);\n            this.setCluster(to);\n        } else {\n            this.clusterBy = to;\n            State.graphDelegate.clusterObject.initEmptyMapAndFusion();\n            State.graph.refreshGraph();\n            State.graph.rawGraph.setAttribute(\"default\", to);\n        }\n    }\n\n    /**\n     * @computed\n     * @description a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the id of a Node -> the value of the attribute specified by $clusterBy]\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string, string | number>)}\n     */\n    get keyAttribute(): Map<string, string | number> {\n        const keyValueMap = new Map<string, string | number>();\n        if (this.clusterBy === null) {\n            return keyValueMap;\n        }\n        const attribute = this.clusterBy as string;\n\n        State.graph.rawGraph.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                if (attributes[attribute] === \"\") {\n                    // ignore those which empty attribute\n                } else {\n                    keyValueMap.set(key, attributes[attribute]);\n                }\n            } else {\n                // this attribute is undefined in this node\n            }\n        });\n        return keyValueMap;\n    }\n\n    /**\n     * @computed\n     * @description the possible attribute values of the attribute defined by $clusterBy\n     * @author Zichen XU\n     * @readonly\n     * @type {((string | number)[])}\n     */\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    /**\n     * @computed\n     * @description a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> a list of Node ids]\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string | number, string[]>)}\n     */\n    get attributeKeys(): Map<string | number, string[]> {\n        const attributeKeysMap = new Map<string | number, string[]>();\n        this.getAttributeValues.forEach((value) => {\n            attributeKeysMap.set(value, []);\n        });\n        this.keyAttribute.forEach((value, key) => {\n            attributeKeysMap.get(value)?.push(key);\n        });\n        return attributeKeysMap;\n    }\n\n    /**\n     * @computed\n     * @description a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the random colour of this cluster]\n     * used to avoid re-compute the colours on every frame refresh\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string | number, string>)}\n     */\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.forEach((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    /**\n     * @computed\n     * @description a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the Nodes points in that cluster]\n     * will change on every frame refresh as the Node's position keeps changing.\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string | number, THREE.Vector3[]>)}\n     */\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.forEach((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        State.graph.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * @description the global configurations for the css of all nodes\n * @author Zichen XU\n * @class NodeGlobalConfig\n */\nclass NodeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n    defaultColor: string = \"#808080\";\n    chosenColor: string = \"#ffffAA\";\n    multiSelectedColor: string = \"#ffffff\";\n    highlightColor: string = \"#ff6060\";\n\n    resolution = 12;\n\n    size = 4;\n}\n\n/**\n * @description the global configurations for the css of all edges\n * @author Zichen XU\n * @class EdgeGlobalConfig\n */\nclass EdgeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    defaultColor = \"#ffffff\";\n    selectedColor = \"#ffff00\";\n    highlightColor = \"#ff8E8E\";\n\n    defaultWidth: number = 1;\n\n    highlightWidth: number = 2;\n\n    resolution = 6;\n}\n/**\n * @description the global configurations for the css of all labels\n * @author Zichen XU\n * @class LabelConfig\n */\nclass LabelConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    show = true;\n    color = \"#d3d3d3\";\n    size = 4;\n}\n/**\n * @description the global configurations for the css of all clusters\n * @author Zichen XU\n * @class ClusterConfig\n */\nclass ClusterConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    clusterForce = 30;\n    normalForce = 50;\n    resolution = 10;\n    shape: \"convexHull\" | \"sphere\" = \"sphere\";\n}\n\n/**\n * @description as the name indicates, it stores the customized style of Nodes/Edges/Label/Clusters\n * and any change on it should then call State.graphDelegate.graphDelegateMethods.refresh() to apply changes\n * @author Zichen XU, Zhiyuan LYU\n * @export\n * @class CssStore\n */\nexport default class CssStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.node = new NodeGlobalConfig();\n        this.edge = new EdgeGlobalConfig();\n        this.label = new LabelConfig();\n        this.cluster = new ClusterConfig();\n    }\n\n    node!: NodeGlobalConfig;\n\n    edge!: EdgeGlobalConfig;\n\n    label!: LabelConfig;\n\n    cluster!: ClusterConfig;\n\n    isAnimating: boolean = true;\n}\n","import convert from \"xml-js\";\n\nexport const GITHUB_URL = \"\";\n\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\n    [\n        \"Les Miserables\",\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\n    ],\n    [\"COVID-19 Citation Graph 06-02\", \"../samples/json/a.json\"],\n];\n\nexport async function fetchSampleGraph(url: string) {\n    try {\n        let response = await fetch(url, { mode: \"no-cors\" });\n        let gexfJson = await response.json();\n        return new File([convert.json2xml(gexfJson)], \"sample.gexf\", {\n            type: \"text/xml\",\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const NAVBAR_HEIGHT = 50;\n\nexport const NODE_AND_EDGE_FILE = \"import both nodes and edges file\";\nexport const ONLY_EDGE_FILE = \"only import edges file\";\n\nexport const COLOR_LIST = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32,\n};\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport { polygonContains } from \"d3-polygon\";\nimport State from \".\";\n\nexport enum DrawMode {\n    StraightLine,\n    FreeLine,\n    FreeCircle,\n    CenterCircle,\n}\n\n/**\n * @description the cluster-mouse-interaction related filed and functions are hereby written in this class\n * such as `currentlyHoveredClusterId`, `selectedCluster` and `selectedClusters`,\n * these selection should be `flush()` after using(or before entering another interaction mode)\n * the callback functions of mouse events are presented as well to handle events like hover/left/rightClick.\n * There are also helper methods to deal with features like mergeCluster and SplitCluster.\n *\n * In the cluster splitting procedure, after user draw a curved link,\n * the segment of that line will be stored in the `lineSegment` and `computeSplitCluster` will be called to compute the two stack of split nodes,\n * the result will be stored inside `confirmClusterSplittingTempData` waiting for the final `splitCluster()` function to confirm this operation\n * @author Zichen XU\n * @export\n * @class ClusterInteractionStore\n *\n */\nexport default class ClusterInteractionStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description the cluster UUID (assigned by THREE.js) of the hovered cluster\n     * @author Zichen XU\n     * @type {(string | null)}\n     */\n\n    currentlyHoveredClusterId: string | null = null;\n\n    /**\n     * @description the selected Cluster UUID used in choosing which cluster to be split\n     * @author Zichen XU\n     * @type {(string | null)}\n     */\n    chosenCluster: string | null = null;\n\n    /**\n     * @description the selected Clusters UUID used in choosing which clusters to be merged\n     * @author Zichen XU\n     * @type {string[]}\n     */\n    selectedClusters: string[] = [];\n\n    /**\n     * @description flush the above fields in situations like switching VisualizationMode\n     * re-import or after graph mutation\n     * @author Zichen XU\n     */\n    flush() {\n        this.currentlyHoveredClusterId = null;\n        this.chosenCluster = null;\n        this.selectedClusters = [];\n    }\n\n    /**\n     * @description this will only be active in the ClusterSelection and ClusterSplit\n     * it will set the selectedCluster and add/remove this cluster in the selectedClusters list\n     * @author Zichen XU\n     * @param {string} uuid uuid of the custer on left-click\n     * @param {MouseEvent} event\n     */\n    clusterLeftClickCallback(uuid: string, event: MouseEvent) {\n        State.graphDelegate.clusterObject.meshSpotlightMaterial(\n            State.graphDelegate.clusterObject.getObjectById(uuid) as THREE.Mesh\n        );\n        // multi-selection\n        let index;\n\n        State.clusterInteraction.chosenCluster = uuid;\n\n        // if already in the list of selected, remove\n        if (\n            (index = State.clusterInteraction.selectedClusters.indexOf(\n                uuid\n            )) !== -1\n        ) {\n            State.clusterInteraction.selectedClusters.splice(index, 1);\n        } else {\n            // if not in the list, add\n            State.clusterInteraction.selectedClusters.push(uuid);\n        }\n    }\n\n    /**\n     * @description this will only be active in the ClusterSelection and ClusterSplit\n     * it will set the currentlyHoveredClusterId to this cluster\n     * @author Zichen XU\n     * @param {(string | null)} uuid of the custer on mouse hover\n     * @param {MouseEvent} event\n     */\n    clusterHoverCallback(uuid: string | null, event: MouseEvent) {\n        State.clusterInteraction.currentlyHoveredClusterId = uuid;\n    }\n\n    /**\n     * @description this will only be active in the ClusterSelection\n     * it will set the selectedCluster to this cluster and open the rightClickPanel\n     * @author Zichen XU\n     * @param {(string | null)} uuid of the custer on mouse hover\n     * @param {MouseEvent} event\n     */\n    clusterRightClickCallback(uuid: string | null, event: MouseEvent) {\n        State.signal.setIsRightClickingCluster();\n\n        State.clusterInteraction.chosenCluster = uuid;\n        State.preferences.rightClickPositionX = event.x;\n        State.preferences.rightClickPositionY = event.y;\n        // if selected cluster is not in the list, then add\n        if (uuid) {\n            if (!this.selectedClusters.includes(uuid)) {\n                this.selectedClusters.push(uuid);\n            }\n            State.preferences.rightClickOn = \"Cluster\";\n        } else {\n            State.preferences.rightClickOn = \"Background\";\n        }\n        State.preferences.rightClickPanelOpen = true;\n        State.preferences.closeAllPanel(\"rightClickPanel\");\n    }\n\n    /**\n     * @description loop through the selected clusters and set the nodes within that cluster\n     * @author Zichen XU\n     */\n    releaseSelectedClusters() {\n        if (\n            this.selectedClusters.length === 0 &&\n            this.currentlyHoveredClusterId\n        ) {\n            this.selectedClusters.push(this.currentlyHoveredClusterId);\n        }\n        this.selectedClusters.forEach((uuid) => {\n            const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                uuid\n            ) as string | number;\n            const keys = State.cluster.attributeKeys.get(clusterValue);\n            keys?.forEach((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(\n                    nodeId,\n                    State.cluster.clusterBy as string,\n                    \"\"\n                );\n            });\n        });\n        State.cluster.setCluster(State.cluster.clusterBy, true);\n        this.flush();\n    }\n\n    /* --------------- The below content is for cluster splitting --------------- */\n\n    /**\n     * @description whether the drawing panel used in ClusterSplit is active\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    drawPanelActivate: boolean = false;\n\n    /**\n     * @description whether to draw a straight line or a curved line when clustering\n     *\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    drawMode: DrawMode = DrawMode.FreeLine;\n\n    /**\n     * @description the line segments returned by drawing a line\n     * it has the left/right-top points as well to form a polygon\n     * @author Zichen XU\n     * @type {any[]}\n     */\n    lineSegment!: any[];\n\n    /**\n     * @description the temp data returned by splitting the cluster\n     * the value attribute is either 0 or 1 to form two clusters\n     * this data is saved to preview the split to user and wait for final confirmation\n     * @author Zichen XU\n     * @type {({\n     *               value: number;\n     *               id: string;\n     *               x: number;\n     *               y: number;\n     *           }[]\n     *         | null)}\n     */\n    confirmClusterSplittingTempData:\n        | {\n              value: number;\n              id: string;\n              x: number;\n              y: number;\n          }[]\n        | null = null;\n\n    /**\n     * @description compute the clusterSplittingTempData based on the lineSegment data\n     * using the polygonContains to determine which node is in selection\n     * the value attribute is either 0 or 1 to form two clusters\n     * this data is saved to preview the split to user and wait for final confirmation\n     * @author Zichen XU\n     */\n    computeSplitCluster() {\n        let screenCoords = [] as {\n            id: string;\n            x: number;\n            y: number;\n            value: number;\n        }[];\n        const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n            State.clusterInteraction.chosenCluster as string\n        );\n        let keys = State.cluster.attributeKeys.get(clusterValue!) as string[];\n        keys.forEach((node) => {\n            let attribute = State.graph.rawGraph.getNodeAttributes(node);\n            let coord = State.graphDelegate.graphDelegateMethods.graph2ScreenCoords(\n                attribute._visualize.x,\n                attribute._visualize.y,\n                attribute._visualize.z\n            );\n            screenCoords.push({ id: node, x: coord.x, y: coord.y, value: 0 });\n        });\n\n        let tempLineSegment: [number, number][] = this.lineSegment.map(\n            (value) => {\n                return [value.x, value.y];\n            }\n        );\n\n        screenCoords.forEach((point) => {\n            let inside = polygonContains(tempLineSegment, [point.x, point.y]);\n\n            if (inside) {\n                State.interaction.updateNodeVisualizeAttribute(point.id, {\n                    hovered: true,\n                });\n                point.value = 1;\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(point.id, {\n                    hovered: false,\n                });\n                point.value = 0;\n            }\n        });\n\n        State.graphDelegate.graphDelegateMethods.refresh();\n        this.confirmClusterSplittingTempData = screenCoords;\n    }\n\n    computeSplitClusterInCircle(\n        centerX: number,\n        centerY: number,\n        radius: number\n    ) {\n        let screenCoords = [] as {\n            id: string;\n            x: number;\n            y: number;\n            value: number;\n        }[];\n        const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n            State.clusterInteraction.chosenCluster as string\n        );\n        let keys = State.cluster.attributeKeys.get(clusterValue!) as string[];\n        keys.forEach((node) => {\n            let attribute = State.graph.rawGraph.getNodeAttributes(node);\n            let coord = State.graphDelegate.graphDelegateMethods.graph2ScreenCoords(\n                attribute._visualize.x,\n                attribute._visualize.y,\n                attribute._visualize.z\n            );\n            screenCoords.push({ id: node, x: coord.x, y: coord.y, value: 0 });\n        });\n\n        screenCoords.forEach((point) => {\n            let distance = Math.sqrt(\n                Math.pow(point.x - centerX, 2) + Math.pow(point.y - centerY, 2)\n            );\n\n            if (distance < radius) {\n                // in the drawn area\n                State.interaction.updateNodeVisualizeAttribute(point.id, {\n                    hovered: true,\n                });\n                point.value = 1;\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(point.id, {\n                    hovered: false,\n                });\n                point.value = 0;\n            }\n        });\n\n        State.graphDelegate.graphDelegateMethods.refresh();\n        this.confirmClusterSplittingTempData = screenCoords;\n    }\n\n    /**\n     * @description this will be called when user confirm the cluster split\n     * it will set the attribute of these two groups to be different\n     * and clear the tempData\n     * @author Zichen XU\n     */\n    splitCluster(\n        attribute: string,\n        valueInWhite: number | string,\n        valueInRed: number | string\n    ) {\n        const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n            this.chosenCluster as string\n        ) as string | number;\n        const nodesToAlter = State.cluster.attributeKeys.get(\n            clusterValue\n        ) as string[];\n        this.confirmClusterSplittingTempData?.forEach((node) => {\n            if (nodesToAlter.includes(node.id)) {\n                State.graph.rawGraph.setNodeAttribute(\n                    node.id,\n                    attribute,\n                    node.value === 1 ? valueInRed : valueInWhite\n                );\n            }\n        });\n        this.confirmClusterSplittingTempData = null;\n        State.cluster.setCluster(attribute, true);\n    }\n}\n","import { Attributes } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\nimport { NAVBAR_HEIGHT } from \"../constants\";\nimport { ICustomLinkObject, ICustomNodeObject } from \"./GraphDelegate\";\nexport default class InteractionStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description the currently selected node\n     * represents the node being right-clicked on\n     * @author Zhiyuan LYU\n     * @type {(string | null)}\n     */\n    chosenNode: string | null = null;\n\n    /**\n     * @description the currently selected nodes id\n     * the singleNodeDetailPanel will render and refresh if this changes\n     * used in NodeSelection panel to do actions on those selected nodes\n     * @author Zhiyuan LYU\n     * @type {string[]}\n     */\n    selectedNodes: string[] = [];\n\n    /**\n     * @description the currently selected edge id\n     * @author Zhiyuan LYU\n     * @type {(string | null)}\n     */\n    selectedEdge: string | null = null;\n\n    /**\n     * @description when the menuItem 'box-select Node' of RightClickPanel is clicked, then this will be set to true,\n     *  and the component 'SelectionBox' will be  visualized only the mode is 'Node Selection' and this variable is true\n     * @author Zhiyuan LYU\n     * @type {boolean}\n     */\n    boxSelectionOpen: boolean = false;\n\n    /**\n     * @description this stores the x and y coordinates when mouse clicked down for box selection\n     * @author Zhiyuan LYU\n     * @type {Attributes}\n     */\n    boxSelection_startPoint: Attributes = {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * @description this stores the x and y coordinates when mouse clicked up for box selection\n     * @author Zhiyuan LYU\n     * @type {Attributes}\n     */\n    boxSelection_endPoint: Attributes = {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * @description compute the selected node within this selection box\n     * @author Zhiyuan LYU\n     */\n    boxSelectNode() {\n        //clear selectedNodes\n        State.interaction.selectedNodes = [];\n\n        //calculate the box\n        let left = Math.min(\n            this.boxSelection_startPoint.x,\n            this.boxSelection_endPoint.x\n        );\n        let top =\n            Math.min(\n                this.boxSelection_startPoint.y,\n                this.boxSelection_endPoint.y\n            ) - NAVBAR_HEIGHT;\n        let right = Math.max(\n            this.boxSelection_startPoint.x,\n            this.boxSelection_endPoint.x\n        );\n        let down =\n            Math.max(\n                this.boxSelection_startPoint.y,\n                this.boxSelection_endPoint.y\n            ) - NAVBAR_HEIGHT;\n\n        //check which node is inside the box,if true push them into selectedNodes\n        State.graph.rawGraph.forEachNode((node, Attributes) => {\n            let coords = State.graphDelegate.graphDelegateMethods.graph2ScreenCoords(\n                Attributes._visualize.x,\n                Attributes._visualize.y,\n                Attributes._visualize.z\n            );\n            if (\n                left <= coords.x &&\n                coords.x <= right &&\n                top <= coords.y &&\n                down >= coords.y\n            ) {\n                State.interaction.selectedNodes.push(node);\n            }\n        });\n    }\n\n    /**\n     * @description the currently hovered node id\n     * the multiNodeDetailPanel will render and refresh if this changes\n     * @author Zhiyuan LYU\n     * @type {(string | null)}\n     */\n    currentlyHoveredNodeId: string | null = null;\n\n    /**\n     * @description compute the neighbors of the currently hovered node id\n     * @author Zichen XU\n     * @readonly\n     * @type {(string[] | null)}\n     */\n    get currentlyHoveredNodeNeighborEdges(): string[] | null {\n        if (this.currentlyHoveredNodeId === null) {\n            return null;\n        } else {\n            let neighbors = State.graph.rawGraph.neighbors(\n                this.currentlyHoveredNodeId\n            );\n            return neighbors?.map((neighbor: string) => {\n                return this.getEdgeKey(\n                    neighbor,\n                    this.currentlyHoveredNodeId as string\n                ) as string;\n            });\n        }\n    }\n\n    /**\n     * @description get the key of the edge with source and target bidirectional\n     * @author Zhiyuan LYU\n     * @param {string} node1\n     * @param {string} node2\n     * @returns {*}  {(string | null)}\n     */\n    getEdgeKey(node1: string, node2: string): string | null {\n        let go: string | undefined = State.graph.rawGraph.edge(node1, node2);\n        if (go === undefined) {\n            let back: string | undefined = State.graph.rawGraph.edge(\n                node2,\n                node1\n            );\n            if (back === undefined) {\n                return null;\n            } else {\n                return back;\n            }\n        } else {\n            return go;\n        }\n    }\n\n    /**\n     * @description update the _visualize object inside node attribute and calls graph refresh\n     * @author Zichen XU\n     * @param {string} id\n     * @param {Attributes} attribute\n     * @param {(Attributes | null)} [oldAttributeVisualize=null]\n     */\n    updateNodeVisualizeAttribute(\n        id: string,\n        attribute: Partial<ICustomNodeObject>,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getNodeAttribute(\n                id,\n                \"_visualize\"\n            );\n        }\n\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n\n    /**\n     * @description update the _visualize object inside edge attribute and calls graph refresh\n     * @author Zichen XU\n     * @param {string} key\n     * @param {Attributes} attribute\n     * @param {(Attributes | null)} [oldAttributeVisualize=null]\n     */\n    updateEdgeVisualizeAttribute(\n        key: string,\n        attribute: Partial<ICustomLinkObject>,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getEdgeAttribute(\n                key,\n                \"_visualize\"\n            );\n        }\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n\n    /**\n     * @description helper method to call by updateEdgeVisualizeAttribute and updateNodeVisualizeAttribute\n     * @author Zichen XU\n     * @private\n     * @param {*} newAttribute\n     * @param {*} oldAttributes\n     */\n    private updateVisualizeAttributeParser(\n        newAttribute: any,\n        oldAttributes: any\n    ) {\n        if (newAttribute.hasOwnProperty(\"hovered\")) {\n            oldAttributes.hovered = newAttribute.hovered;\n        } else if (newAttribute.hasOwnProperty(\"chosen\")) {\n            oldAttributes.chosen = newAttribute.chosen;\n        } else if (newAttribute.hasOwnProperty(\"multiSelected\")) {\n            oldAttributes.multiSelected = newAttribute.multiSelected;\n        }\n    }\n\n    /**\n     * @description should call this on every refresh of graph DS\n     * or simply change the InteractionMode\n     * @author Zichen XU\n     */\n    flush() {\n        this.chosenNode = null;\n        this.selectedNodes = [];\n        this.selectedEdge = null;\n        this.currentlyHoveredNodeId = null;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * @description you may notice that when selecting different VisualizationMode\n * a popover which contains either simple configs or helper messages will pop up\n * this class stores the necessary information to make that happen\n * @author Zichen XU\n * @export\n * @class HelperStackPanelStore\n */\nexport default class HelperStackPanelStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // Cluster Splitting\n\n    /**\n     * @description if the clusterSplittingPanelStackOpen is open\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    clusterSplittingPanelStackOpen: boolean = false;\n\n    /**\n     * @description can back to any step, and UI should refresh accordingly\n     *\n     * @author Zichen XU\n     * @type {(1 | 2 | 3)}\n     */\n    clusterSplittingCurrentStep: 1 | 2 | 3 = 1;\n\n    /**\n     * @description if the NodeSelectionPanelOpen is open\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    NodeSelectionPanelOpen: boolean = false;\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * @description this file is the backend support for the NodeSearch feature\n * and will compute the possible searching candidates according to the query parameters\n * @author Zichen XU\n * @export\n * @class SearchStore\n */\nexport default class SignalStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    isRightClickingCluster: boolean = false;\n\n    setIsRightClickingCluster() {\n        this.isRightClickingCluster = true;\n        setTimeout(() => (this.isRightClickingCluster = false), 500);\n    }\n}\n","import { autorun, reaction } from \"mobx\";\n\nimport PreferencesStore, { VisualizationMode } from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\nimport CssStore from \"./CssStore\";\nimport GraphDelegate from \"./GraphDelegate\";\nimport NodeInteractionStore from \"./NodeInteractionStore\";\nimport ClusterInteractionStore from \"./ClusterInteractionStore\";\nimport HelperStackPanelStore from \"./HelperStackPanelStore\";\nimport SignalStore from \"./SignalStore\";\n\n/**\n * @description the overall state to store all information of this project\n * use the observable and observer to refresh the React UI\n * @author Zichen XU\n * @class AppState\n */\nclass AppState {\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    graphDelegate!: GraphDelegate;\n    interaction!: NodeInteractionStore;\n    clusterInteraction!: ClusterInteractionStore;\n    import!: ImportStore;\n    search!: SearchStore;\n    cluster!: ClusterStore;\n    helper!: HelperStackPanelStore;\n    css!: CssStore;\n    signal!: SignalStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.graphDelegate = new GraphDelegate();\n        this.interaction = new NodeInteractionStore();\n        this.clusterInteraction = new ClusterInteractionStore();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.cluster = new ClusterStore();\n        this.helper = new HelperStackPanelStore();\n        this.css = new CssStore();\n        this.signal = new SignalStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// this is for easily debugging in runtime\n//@ts-ignore\nwindow._state = State;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\n// set the graph to suspend animating according to State.css.isAnimating\nautorun(() => {\n    if (State.css.isAnimating) {\n        State.graphDelegate.graphDelegateMethods?.resumeAnimation();\n    } else {\n        State.graphDelegate.graphDelegateMethods?.pauseAnimation();\n    }\n});\n\n// if cluster selected, goto step 2\nautorun(() => {\n    if (\n        State.preferences.visualizationMode ===\n        VisualizationMode.ClusterSplitting\n    ) {\n        if (State.clusterInteraction.chosenCluster) {\n            State.helper.clusterSplittingCurrentStep = 2;\n            console.log(\"cluster selected\");\n        }\n    } else {\n        State.clusterInteraction.drawPanelActivate = false;\n    }\n});\n\n// the preparation and cleaning when changing of Step\nreaction(\n    () => State.helper.clusterSplittingCurrentStep,\n    (step) => {\n        console.log(`Graph Splitting change to step ${step}`);\n        switch (step) {\n            case 1:\n                State.clusterInteraction.drawPanelActivate = false;\n                State.clusterInteraction.confirmClusterSplittingTempData = null;\n                State.interaction.flush();\n                State.clusterInteraction.flush();\n                State.graphDelegate.graphDelegateMethods.refresh();\n                break;\n\n            case 2:\n                State.clusterInteraction.drawPanelActivate = true;\n                State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n                    State.interaction.updateNodeVisualizeAttribute(\n                        node,\n                        { hovered: false, chosen: false, multiSelected: false },\n                        oldAttributes._visualize\n                    );\n                });\n                State.clusterInteraction.confirmClusterSplittingTempData = null;\n                State.interaction.flush();\n                State.graphDelegate.graphDelegateMethods.refresh();\n                break;\n\n            case 3:\n                State.clusterInteraction.drawPanelActivate = false;\n                break;\n        }\n    }\n);\n\n// if graph is empty, suspend the animation to save computing power\nreaction(\n    () => State.graph.rawGraph?.order,\n    (number) => {\n        if (number === 0) {\n            State.css.isAnimating = false;\n            console.log(\"Pause Animating\");\n        } else {\n            State.css.isAnimating = true;\n            console.log(\"Resume Animating\");\n        }\n    },\n    { fireImmediately: true }\n);\n\n// auto highlight the hovered Cluster\nreaction(\n    () => State.clusterInteraction.currentlyHoveredClusterId,\n    (currentlyHoveredClusterId) => {\n        console.log(\"currentlyHoveredNodeId\", currentlyHoveredClusterId);\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto highlight the selected Cluster\nreaction(\n    () => State.clusterInteraction.chosenCluster,\n    () => {\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto highlight the selected Clusters\nreaction(\n    () => State.clusterInteraction.selectedClusters,\n    () => {\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto color the hovered Node\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    (currentlyHoveredNodeId) => {\n        console.log(\"currentlyHoveredNodeId\", currentlyHoveredNodeId);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (node === currentlyHoveredNodeId) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n    }\n);\n\n// auto color the chosen node (right click on)\nreaction(\n    () => State.interaction.chosenNode,\n    (selectedNode) => {\n        console.log(\"chosenNode\", selectedNode);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNode === node) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { chosen: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { chosen: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto color the selected nodes\nreaction(\n    () => State.interaction.selectedNodes.map((node) => node),\n    (selectedNodes) => {\n        console.log(\"selectedNodes\", selectedNodes);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNodes.includes(node)) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { multiSelected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { multiSelected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto color the selected edge\nreaction(\n    () => State.interaction.selectedEdge,\n    (selectedEdge) => {\n        console.log(\"selectedEdge\", selectedEdge);\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (selectedEdge === edge) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { chosen: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { chosen: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto color the neighbor edges\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    () => {\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (\n                State.interaction.currentlyHoveredNodeNeighborEdges?.includes(\n                    edge\n                )\n            ) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\nexport default State;\n","import { Attributes } from \"graphology-types\";\nimport React from \"react\";\n\n/** Event handler that exposes the target element's value as a boolean. */\nexport function handleBooleanChange(handler: (checked: boolean) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).checked);\n}\n\n/** Event handler that exposes the target element's value as a string. */\nexport function handleStringChange(handler: (value: string) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).value);\n}\n\n/** Event handler that exposes the target element's value as an inferred generic type. */\nexport function handleValueChange<T>(handler: (value: T) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler(((event.target as HTMLInputElement).value as unknown) as T);\n}\n\n/** Event handler that exposes the target element's value as a number. */\nexport function handleNumberChange(handler: (value: number) => void) {\n    return handleStringChange((value) => handler(+value));\n}\n\nexport function stringifyNodeDetail(attributes: Attributes): string {\n    let res = \"\";\n    for (var attribute in attributes) {\n        if (\n            attributes.hasOwnProperty(attribute) &&\n            attribute !== \"_visualize\" &&\n            attribute !== \"_options\"\n        ) {\n            res += attribute + \" : \" + attributes[attribute] + \" ; \";\n        }\n    }\n\n    return res;\n}\n\nexport function parseNumberOrString(value: string): string | number {\n    if (value === \"\") {\n        return \"\";\n    }\n    let numberVal = Number(value);\n    if (isNaN(numberVal)) {\n        return value;\n    } else {\n        return numberVal;\n    }\n}\n","import { Intent, Position, Toaster, ToasterPosition } from \"@blueprintjs/core\";\nimport React from \"react\";\n\nexport function createToaster(\n    message: React.ReactNode,\n    position: ToasterPosition = Position.TOP,\n    timeout: number = 5000,\n    intent: Intent = Intent.NONE\n) {\n    Toaster.create({\n        position: position,\n    }).show({\n        message: message,\n        intent: intent,\n        timeout: timeout,\n    });\n}\n","import React, { MouseEventHandler } from \"react\";\nimport { Button, Icon, InputGroup, Intent, MenuItem } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { copy } from \"copy-anything\";\nimport { handleStringChange } from \"./InputFormUtils\";\nimport { createToaster } from \"../../state/utils/ToasterUtils\";\n\ninterface Props {\n    /**\n     * whether or not to show the None\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    showNone: boolean;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * if None is selected, the item props will be set to null\n     *\n     * @memberof Props\n     */\n    onSelect: (item: string | null) => void;\n\n    /**\n     * the selected to display will sync with this props\n     *\n     * @type {(string | null)}\n     * @memberof Props\n     */\n    syncWith: string | null;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\nexport default observer(\n    /**\n     * @description this component can be used to choose the attribute among all the attributes\n     * with addition none to choose (can be toggled to off)\n     *\n     * to use it, you have to specify whether to add additional None to the list\n     * and onChange function to call when a candidate is selected\n     * @author Zichen XU\n     * @class ClusterChooser\n     * @extends {React.Component<Props, {}>}\n     */\n    class ClusterChooser extends React.Component<Props, {}> {\n        static defaultProps = {\n            showNone: true,\n        };\n\n        get fullProperties(): string[] {\n            let propertiesWithNone = copy(State.graph.metadata.nodeProperties);\n            propertiesWithNone.unshift(\"None\");\n            return propertiesWithNone;\n        }\n\n        itemRenderer = (\n            item: any,\n            props: CustomIItemRendererProps\n        ): JSX.Element | null => {\n            if (item === \"None\") {\n                return (\n                    <MenuItem\n                        intent=\"primary\"\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            } else {\n                return (\n                    <MenuItem\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            }\n        };\n\n        render() {\n            return (\n                <Select\n                    items={\n                        this.props.showNone\n                            ? this.fullProperties\n                            : State.graph.metadata.nodeProperties\n                    }\n                    itemRenderer={this.itemRenderer}\n                    filterable={false}\n                    onItemSelect={(item: string) => {\n                        let selected = item === \"None\" ? null : item;\n                        this.props.onSelect(selected);\n                    }}\n                    {...this.props}\n                >\n                    <Button\n                        text={this.props.syncWith ?? this.fullProperties[0]}\n                    />\n                </Select>\n            );\n        }\n    }\n);\n\ninterface ClusterAdderProps {\n    onCreate: (attribute: string) => void;\n}\n\nexport const ClusterAdder = observer(\n    class ClusterAdder extends React.Component<ClusterAdderProps> {\n        state = {\n            attribute: \"\",\n        };\n\n        render() {\n            return (\n                <div\n                    style={{ display: \"flex\", justifyContent: \"space-between\" }}\n                >\n                    <InputGroup\n                        leftElement={<Icon icon=\"tag\" />}\n                        onChange={handleStringChange((value) => {\n                            this.setState({ attribute: value });\n                        })}\n                        placeholder=\"New Attribute Name\"\n                        fill={true}\n                        value={this.state.attribute}\n                    />\n                    <Button\n                        onClick={() => {\n                            if (\n                                this.state.attribute === \"\" ||\n                                State.graph.metadata.nodeProperties.includes(\n                                    this.state.attribute\n                                )\n                            ) {\n                                createToaster(\n                                    `Attribute name ${this.state.attribute} already exists`,\n                                    undefined,\n                                    undefined,\n                                    Intent.DANGER\n                                );\n                                return;\n                            }\n                            State.graph.metadata.nodeProperties.push(\n                                this.state.attribute\n                            );\n                            State.graph.rawGraph.forEachNode(\n                                (_, attributes) => {\n                                    attributes[this.state.attribute] = \"\";\n                                }\n                            );\n                            this.props.onCreate(this.state.attribute);\n                            this.setState({ attributes: \"\" });\n                        }}\n                        intent={Intent.PRIMARY}\n                    >\n                        Add\n                    </Button>\n                </div>\n            );\n        }\n    }\n);\n","export default __webpack_public_path__ + \"static/media/icon.d621d30f.png\";","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Button, ControlGroup, MenuItem } from \"@blueprintjs/core\";\nimport { Select, Suggest } from \"@blueprintjs/select\";\nimport { CustomIItemRendererProps } from \"../utils/SimpleSelect\";\n\ninterface IFilterOption {\n    text: React.ReactNode;\n    disabled: boolean;\n    attribute?: string;\n}\n\nexport default observer(\n    /**\n     * @description the search bar to be placed in the navigation bar\n     * @author Zichen XU\n     * @class SearchPanel\n     * @extends {React.Component}\n     */\n    class SearchPanel extends React.Component {\n        get FILTER_OPTIONS(): IFilterOption[] {\n            let prefix: IFilterOption[] = [\n                { text: \"ID includes\", disabled: false },\n                { text: <b>Or Search Attributes</b>, disabled: true },\n            ];\n            State.graph.metadata.nodeProperties.forEach((it) =>\n                prefix.push({\n                    text: `Attribute: ${it}`,\n                    disabled: false,\n                    attribute: it,\n                })\n            );\n            return prefix;\n        }\n\n        state = {\n            filter: \"ID includes\" as string,\n        };\n\n        private itemRenderer(\n            item: IFilterOption,\n            props: CustomIItemRendererProps\n        ): JSX.Element | null {\n            return (\n                <MenuItem\n                    key={item.text?.toString()}\n                    disabled={item.disabled}\n                    onClick={props.handleClick}\n                    text={item.text}\n                />\n            );\n        }\n\n        render() {\n            return (\n                <div>\n                    <ControlGroup>\n                        <Select\n                            items={this.FILTER_OPTIONS}\n                            itemRenderer={this.itemRenderer}\n                            filterable={false}\n                            onItemSelect={(item) => {\n                                this.setState({\n                                    filter: item.text,\n                                });\n                                State.search.filterProps =\n                                    item.attribute ?? null;\n                            }}\n                        >\n                            <Button icon=\"filter\">{this.state.filter}</Button>\n                        </Select>\n                        <Suggest\n                            inputValueRenderer={(a) => a}\n                            query={State.search.searchStr}\n                            onQueryChange={(value) =>\n                                (State.search.searchStr = value)\n                            }\n                            itemListPredicate={() => State.search.candidates}\n                            itemRenderer={(value: string) => (\n                                <MenuItem\n                                    text={value}\n                                    onMouseOver={() => {\n                                        State.search.isPreviewing = true;\n                                        State.interaction.currentlyHoveredNodeId = value;\n                                        State.graphDelegate.cameraFocusOn(\n                                            value\n                                        );\n                                    }}\n                                    onMouseLeave={() => {\n                                        State.search.isPreviewing = false;\n                                    }}\n                                />\n                            )}\n                            items={State.search.candidates}\n                            openOnKeyDown={true}\n                            noResults={\n                                <MenuItem disabled={true} text=\"No results.\" />\n                            }\n                            popoverProps={{ minimal: true }}\n                        />\n                    </ControlGroup>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport {\n    Button,\n    Menu,\n    MenuDivider,\n    MenuItem,\n    Position,\n    Switch,\n    Navbar as BlueprintNavbar,\n    NavbarGroup,\n    Alignment,\n    NavbarHeading,\n    NavbarDivider,\n} from \"@blueprintjs/core\";\nimport ClusterChooser from \"./utils/ClusterChooser\";\nimport logo from \"../images/icon.png\";\nimport State from \"../state\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport SearchPanel from \"./panels/SearchPanel\";\n\nexport default observer(\n    /**\n     * @description the navigation bar on the top\n     * @author Zichen XU\n     * @class Navbar\n     * @extends {React.Component}\n     */\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <BlueprintNavbar\n                    //@ts-ignore\n                    style={{ zIndex: 2 }}\n                >\n                    <NavbarGroup align={Alignment.LEFT}>\n                        <img\n                            title=\"ClusterGrapher\"\n                            id=\"ClusterGrapher Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                            alt=\"ClusterGrapher Logo\"\n                        />\n                        <MenuDivider />\n                        <NavbarHeading>ClusterGrapher</NavbarHeading>\n                        <Popover2\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Open GEXF\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Import from CSV\"\n                                        icon=\"import\"\n                                        onClick={() => {\n                                            State.import.importDialogOpen = true;\n                                        }}\n                                    >\n                                        {/* {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        disabled={true}\n                                                        onClick={() => {\n                                                            fetchSampleGraph(\n                                                                sampleSnapshotUrl\n                                                            ).then((file) => {\n                                                                State.import.selectedGEXFFileFromInput = file;\n                                                                State.import\n                                                                    .importGraphFromGEXF()\n                                                                    .then(\n                                                                        (\n                                                                            res\n                                                                        ) => {\n                                                                            State.graph.rawGraph =\n                                                                                res.graph;\n                                                                            State.graph.metadata =\n                                                                                res.metadata;\n                                                                        }\n                                                                    );\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )} */}\n                                    </MenuItem>\n\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Export Graph\"\n                                        onClick={() => {\n                                            State.preferences.exportDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            placement={Position.BOTTOM}\n                        >\n                            <Button minimal={true} icon=\"document\">\n                                Graph\n                            </Button>\n                        </Popover2>\n                        <Popover2\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Node DataSheet\"\n                                        icon=\"ungroup-objects\"\n                                        onClick={() => {\n                                            State.preferences.nodeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Edge DataSheet\"\n                                        icon=\"link\"\n                                        onClick={() => {\n                                            State.preferences.edgeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            placement={Position.BOTTOM}\n                        >\n                            <Button minimal={true} icon=\"wrench\">\n                                Tools\n                            </Button>\n                        </Popover2>\n                        <Switch\n                            style={{ marginTop: 10, marginLeft: 8 }}\n                            label=\"Graph Animation\"\n                            checked={State.css.isAnimating}\n                            onChange={() =>\n                                (State.css.isAnimating = !State.css.isAnimating)\n                            }\n                        />\n                    </NavbarGroup>\n\n                    {/* <ButtonGroup>\n                        <SimpleSelect\n                            className={classnames([Classes.ALERT_CONTENTS])}\n                            items={[\"3D\", \"2D\"]}\n                            value={State.preferences.view}\n                            onSelect={(it) => (State.preferences.view = it)}\n                        />\n                        <Divider />\n                    </ButtonGroup> */}\n\n                    <NavbarGroup align={Alignment.RIGHT}>\n                        <SearchPanel />\n                        <NavbarDivider />\n                        <div style={{ marginRight: 6 }}>Clustered by</div>\n                        <ClusterChooser\n                            onSelect={(cluster) => {\n                                State.cluster.setCluster(cluster);\n                            }}\n                            syncWith={State.cluster.clusterBy}\n                        />\n                        {/* <NavbarDivider />\n                        <SimpleSelect\n                            items={[\"trackball\", \"orbit\", \"fly\"]}\n                            text={State.preferences.controlType}\n                            onSelect={(it) => {\n                                State.preferences.controlType = it;\n                                ComponentRef.visualizer.updateVisualizationGraph();\n                            }}\n                        /> */}\n                        <Button\n                            minimal={true}\n                            icon=\"code\"\n                            onClick={() => {\n                                window.open(\n                                    \"https://github.com/grp202004/PiperNet\"\n                                );\n                            }}\n                        />\n                    </NavbarGroup>\n                </BlueprintNavbar>\n            );\n        }\n    }\n);\n","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { ItemPredicate, Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    items: any[];\n    onSelect: (\n        item: any,\n        event?: React.SyntheticEvent<HTMLElement, Event> | undefined\n    ) => void;\n    text: string;\n    small: boolean;\n    search: boolean;\n}\n\nexport interface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\nexport function CommonItemRenderer(\n    item: any,\n    props: CustomIItemRendererProps\n): JSX.Element | null {\n    return <MenuItem key={item} onClick={props.handleClick} text={item} />;\n}\n\nexport default observer(\n    /**\n     * @description provides a interface for choosing between elements\n     * @author Zichen XU\n     * @class SimpleSelect\n     * @extends {React.Component<Props, {}>}\n     */\n    class SimpleSelect extends React.Component<Props, {}> {\n        static defaultProps = {\n            small: false,\n            search: false,\n        };\n\n        itemPredicate: ItemPredicate<string> = (\n            query: string,\n            object: string\n        ) => {\n            return object.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n        };\n        render() {\n            if (this.props.search) {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemPredicate={this.itemPredicate}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={true}\n                        onItemSelect={this.props.onSelect}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            } else {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={false}\n                        onItemSelect={this.props.onSelect}\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            }\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Callout,\n    Classes,\n    FileInput,\n    Spinner,\n    Switch,\n    Tag,\n    MultistepDialog,\n    DialogStep,\n    H4,\n    H2,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport { IEdgeFileConfig, INodeFileConfig } from \"../../state/ImportStore\";\n\ninterface PreviewTableProps {\n    file: INodeFileConfig | IEdgeFileConfig;\n}\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component<PreviewTableProps, {}> {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top {this.file.topN.length} rows of the\n                        selected file are displayed.\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    /**\n     * @description The multistep dialog for importing csv Node and Edge files\n     * @author Chenghao SHI\n     * @extends {React.Component}\n     */\n    class ImportDialog extends React.Component {\n        private multiDialogRef = React.createRef<MultistepDialog>();\n\n        state = {\n            delimiter: \",\",\n            step: 0,\n        };\n\n        canImport = () => {\n            if (State.import.importConfig.hasNodeFile) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            return State.import.importConfig.hasNodeFile ? (\n                <>\n                    <FileInput\n                        text={State.import.nodeFileName}\n                        onInputChange={(event) => {\n                            let target = event.target as HTMLInputElement;\n                            if (!target.files || target.files.length < 1) {\n                                return;\n                            }\n                            State.import.importConfig.hasNodeFile = true;\n                            State.import.nodeFileName = target.files[0].name;\n                            // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                            State.import.selectedNodeFileFromInput =\n                                target.files[0];\n                        }}\n                    />\n\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                text={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                        </div>\n                    )}\n                </>\n            ) : (\n                <H4>You don't need to import node file</H4>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <>\n                    <FileInput\n                        text={State.import.edgeFileName}\n                        onInputChange={(event) => {\n                            let target = event.target as HTMLInputElement;\n                            if (!target.files || target.files.length < 1) {\n                                return;\n                            }\n                            State.import.edgeFileName = target.files[0].name;\n                            State.import.selectedEdgeFileFromInput =\n                                target.files[0];\n                        }}\n                    />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div>\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </>\n            );\n        };\n\n        renderDelimiterSelection() {\n            return (\n                <div>\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        text={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter === \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter === \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <MultistepDialog\n                    ref={this.multiDialogRef}\n                    className={classnames(\"multistep-dialog-box\")}\n                    icon=\"import\"\n                    isOpen={State.import.importDialogOpen}\n                    onClose={() => {\n                        State.import.importDialogOpen = false;\n                    }}\n                    finalButtonProps={{\n                        intent: \"primary\",\n                        onClick: () => {\n                            State.import.isLoading = true;\n                            State.import.importGraphFromCSV().then((res) => {\n                                State.graph.setGraph(res.graph, res.metadata);\n                                if (\n                                    State.graph.rawGraph.hasAttribute(\"default\")\n                                ) {\n                                    State.cluster.setCluster(\n                                        State.graph.rawGraph.getAttribute(\n                                            \"default\"\n                                        )\n                                    );\n                                }\n                                State.import.isLoading = false;\n                                State.import.importDialogOpen = false;\n                            });\n                        },\n                        disabled: !(\n                            !State.import.importConfig.hasNodeFile ||\n                            (State.import.importConfig.hasNodeFile &&\n                                State.import.importConfig.nodeFile.isReady)\n                        ),\n                        text: \"Import\",\n                    }}\n                    onChange={(id) => {\n                        this.setState({\n                            step: id,\n                        });\n                    }}\n                    title=\"Open Files\"\n                >\n                    <DialogStep\n                        id=\"csv_edge\"\n                        title=\"Choose a Edge file\"\n                        panel={\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"multistep-dialog-body\"\n                                )}\n                                style={{\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    display: \"flex\",\n                                }}\n                            >\n                                {State.import.isLoading ? (\n                                    <Spinner />\n                                ) : (\n                                    <div>\n                                        <div\n                                            className={classnames(\n                                                Classes.DIALOG_BODY,\n                                                \"import-dialog\"\n                                            )}\n                                            style={{ maxWidth: \"40vw\" }}\n                                        >\n                                            {this.renderEdgesSelection()}\n                                            <br />\n                                            {this.renderDelimiterSelection()}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        }\n                        nextButtonProps={{\n                            disabled: !State.import.importConfig.edgeFile\n                                .isReady,\n                        }}\n                    />\n                    <DialogStep\n                        id=\"csv_node_need\"\n                        title=\"Do I need to import node file ?\"\n                        panel={\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"multistep-dialog-body\"\n                                )}\n                                style={{\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                }}\n                            >\n                                <H2>Do I need to import node file?</H2>\n                                <H4>\n                                    You can import nodes file to add node\n                                    attributes to this graph\n                                </H4>\n                                <p>\n                                    To import attributes we will need to proceed\n                                    another csv files: a list of nodes, Nodes\n                                    must have at least an ID, other fields are\n                                    optional\n                                </p>\n                                <br />\n                                <Switch\n                                    large={true}\n                                    checked={\n                                        State.import.importConfig.hasNodeFile\n                                    }\n                                    label=\"I want to import node file\"\n                                    onChange={() =>\n                                        (State.import.importConfig.hasNodeFile = !State\n                                            .import.importConfig.hasNodeFile)\n                                    }\n                                />\n                            </div>\n                        }\n                    />\n                    <DialogStep\n                        id=\"csv_node\"\n                        title=\"Choose a Node file\"\n                        panel={\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"multistep-dialog-body\"\n                                )}\n                                style={{\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    display: \"flex\",\n                                }}\n                            >\n                                {State.import.isLoading ? (\n                                    <Spinner />\n                                ) : (\n                                    <div>\n                                        <div\n                                            className={classnames(\n                                                Classes.DIALOG_BODY,\n                                                \"import-dialog\"\n                                            )}\n                                            style={{ maxWidth: \"40vw\" }}\n                                        >\n                                            {this.renderNodesSelection()}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        }\n                    />\n                </MultistepDialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Card,\n    Classes,\n    Dialog,\n    Divider,\n    Elevation,\n    H3,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport gexf from \"graphology-gexf/browser\";\nimport State from \"../../state\";\nimport { CSVLink } from \"react-csv\";\n\nexport default observer(\n    /**\n     * @description Dialog used to export the graph into GEXF file or CSV Node/Edge files\n     * @author Chenghao SHI\n     * @extends {React.Component}\n     */\n    class ExportDialog extends React.Component {\n        state = {\n            ready: true,\n        };\n\n        /**\n         * compute the GEXF file from rawGraph\n         * delete the temporary _visualize attribute from the graph\n         *\n         * @returns {*}\n         */\n        computeGEXFFile() {\n            let graphCopy = State.graph.rawGraph.copy();\n            graphCopy.forEachNode((_node, attributes: any) => {\n                delete attributes[\"_visualize\"];\n            });\n            graphCopy.forEachEdge((_edge, attributes: any) => {\n                delete attributes[\"_visualize\"];\n            });\n            return gexf.write(graphCopy);\n        }\n\n        computeNodeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [];\n            headers.push({ label: \"_id\", key: \"_id\" });\n            State.graph.metadata.nodeProperties.map((value) => {\n                headers.push({ label: value, key: value });\n                return null;\n            });\n\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.nodes.forEach((node) => {\n                data.push({\n                    _id: node.key,\n                    ...node.attributes,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        computeEdgeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [\n                { label: \"source\", key: \"source\" },\n                { label: \"target\", key: \"target\" },\n            ];\n\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.edges.forEach((edge) => {\n                data.push({\n                    source: edge.source,\n                    target: edge.target,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"projects\"\n                    isOpen={State.preferences.exportDialogOpen}\n                    onClose={() => {\n                        State.preferences.exportDialogOpen = false;\n                    }}\n                    title={`Export Graph`}\n                >\n                    {!this.state.ready ? (\n                        <Spinner />\n                    ) : (\n                        <div className={classnames(Classes.DIALOG_BODY)}>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    GEXF Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://gephi.org/gexf/format/\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n                                <Divider />\n\n                                <CSVLink\n                                    data={this.computeGEXFFile()}\n                                    filename={\"Snapshot-GEXF.gexf\"}\n                                    className=\"btn btn-primary\"\n                                    target=\"_blank\"\n                                >\n                                    <Button>Download GEXF File</Button>\n                                </CSVLink>\n                            </Card>\n                            <br />\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    CSV Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://github.com/grp202004/PiperNet#data-import\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n\n                                <Divider />\n                                <ButtonGroup>\n                                    <CSVLink\n                                        data={this.computeNodeFile().data}\n                                        headers={this.computeNodeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Node.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Node File</Button>\n                                    </CSVLink>\n                                    <Divider />\n                                    <CSVLink\n                                        data={this.computeEdgeFile().data}\n                                        headers={this.computeEdgeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Edge.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Edge File</Button>\n                                    </CSVLink>\n                                </ButtonGroup>\n                            </Card>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Dialog } from \"@blueprintjs/core\";\nimport { Column, Table, TableLoadingOption } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\ninterface Props {\n    for: string;\n    children: React.ReactNode;\n}\n\nexport default observer(\n    /**\n     * @description the wrapper for data sheet dialog, provides a loading state before the data shows\n     * @author Zichen XU\n     * @class DataSheetDialogWrapper\n     * @extends {React.Component<Props, {}>}\n     */\n    class DataSheetDialogWrapper extends React.Component<Props, {}> {\n        state = {\n            loading: true,\n        };\n\n        renderTable() {\n            if (this.state.loading) {\n                return (\n                    <div className=\"argo-table-container\">\n                        <Table\n                            className=\"pt-bordered pt-striped\"\n                            numRows={20}\n                            loadingOptions={[\n                                TableLoadingOption.CELLS,\n                                TableLoadingOption.COLUMN_HEADERS,\n                                TableLoadingOption.ROW_HEADERS,\n                            ]}\n                        >\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                        </Table>\n                    </div>\n                );\n            } else {\n                return this.props.children;\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"database\"\n                    isOpen={\n                        this.props.for === \"node\"\n                            ? State.preferences.nodeDataSheetDialogOpen\n                            : State.preferences.edgeDataSheetDialogOpen\n                    }\n                    onOpened={() => {\n                        setTimeout(() => {\n                            this.setState({\n                                loading: false,\n                            });\n                        }, 100);\n                    }}\n                    onClose={() => {\n                        if (this.props.for === \"node\") {\n                            State.preferences.nodeDataSheetDialogOpen = false;\n                        } else {\n                            State.preferences.edgeDataSheetDialogOpen = false;\n                        }\n                        this.setState({\n                            loading: true,\n                        });\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        {this.renderTable()}\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Code,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    EditableCell,\n    ICellRenderer,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport {\n    handleStringChange,\n    parseNumberOrString,\n    stringifyNodeDetail,\n} from \"../utils/InputFormUtils\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\n\nlet GraphNodeTable = observer(\n    class GraphNodeTable extends React.Component {\n        state = {\n            filterQuery: \"\",\n            addNodeDialogOpen: false,\n            deleteAlertOpen: false,\n            nodeToDelete: null as SerializedNode | null,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedNode[] = [];\n            State.graph.rawGraph.export().nodes.forEach((node) => {\n                if (\n                    node.key\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(node);\n                }\n            });\n            return newTable;\n        }\n\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        renderColumns: any = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it !== \"_options\") {\n                    return (\n                        <Column\n                            name={it}\n                            cellRenderer={(\n                                rowIndex: number,\n                                columnIndex: number\n                            ) => this.renderCell(rowIndex, it)}\n                        />\n                    );\n                }\n                return null;\n            });\n            return columns.filter((element) => {\n                return element !== undefined;\n            });\n        };\n\n        renderCell = (rowIndex: number, attribute: string) => {\n            let cellAttributes = this.filteredTable[rowIndex].attributes!!;\n            let cell = cellAttributes[attribute];\n\n            return (\n                <EditableCell\n                    value={cell}\n                    onChange={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    onConfirm={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    tooltip={cell}\n                />\n            );\n        };\n\n        // if the input is a number in string, it will convert the string into number to store\n        setValue = (value: string, rowIndex: number, attribute: string) => {\n            let id = this.filteredTable[rowIndex].key;\n            State.graph.rawGraph.setNodeAttribute(\n                id,\n                attribute,\n                parseNumberOrString(value)\n            );\n        };\n\n        deleteNodeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                nodeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteNodeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropNode(\n                            this.state.nodeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                    style={{ minWidth: \"60vw\" }}\n                >\n                    <p>\n                        Are you sure you want to delete the node with ID{\" \"}\n                        <Code>{this.state.nodeToDelete?.key}</Code> with\n                        attributes:\n                        <Code>\n                            {stringifyNodeDetail(\n                                this.state.nodeToDelete\n                                    ?.attributes as Attributes\n                            )}\n                        </Code>\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <Callout\n                        title={\n                            \"Try to click on a cell and type in something...\"\n                        }\n                        intent=\"primary\"\n                        icon=\"edit\"\n                    >\n                        The corresponding value of a node's attribute can be\n                        modified by clicking the cell and type in\n                    </Callout>\n\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() => {\n                                State.preferences.AddNodeDialogOpen = true;\n                            }}\n                            icon=\"new-object\"\n                            intent=\"primary\"\n                            text=\"Add Node\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Node...\"\n                            value={this.state.filterQuery}\n                            fill={true}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n\n                    <Table\n                        className=\"argo-table\"\n                        defaultRowHeight={30}\n                        numRows={this.filteredTable.length}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteNodeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"ID\"\n                            //@ts-ignore\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.filteredTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                    {this.deleteNodeAlert()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    /**\n     * @description the node data sheet table\n     * @author Zichen XU\n     * @class NodeDataSheetDialog\n     * @extends {React.Component}\n     */\n    class NodeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"node\">\n                    <GraphNodeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, FormGroup, MenuItem, Tooltip } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { stringifyNodeDetail } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the text to be shown above the selectButton\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    text: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * the {nodeId} is the id of the selected node\n     *\n     * @memberof Props\n     */\n    onChange: (nodeId: string) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    /**\n     * @description this component can be used to choose the node among all the nodes\n     * with basic search filters available\n     *\n     * to use it, you have to specify the text shown above the selectButton\n     * as well as the onChange function to call when a candidate is selected\n     * @author Zichen XU\n     * @class NodeChooser\n     * @extends {React.Component<Props, {}>}\n     */\n    class NodeChooser extends React.Component<Props, {}> {\n        state = {\n            select: \"Choose \" + this.props.text,\n        };\n\n        render() {\n            return (\n                <FormGroup\n                    label={this.props.text}\n                    labelFor=\"text-input\"\n                    labelInfo=\"(required)\"\n                >\n                    <Select\n                        filterable={true}\n                        items={State.graph.rawGraph.export().nodes}\n                        itemPredicate={(\n                            query: string,\n                            item: SerializedNode<Attributes>\n                        ) => {\n                            return item.key.includes(query);\n                        }}\n                        itemRenderer={(item: SerializedNode<Attributes>) => {\n                            return (\n                                <Tooltip\n                                    content={stringifyNodeDetail(\n                                        item.attributes ?? {}\n                                    )}\n                                >\n                                    <MenuItem\n                                        key={item.key}\n                                        text={item.key}\n                                        onClick={() => {\n                                            let key = item.key;\n                                            this.setState({ select: key });\n                                            this.props.onChange(key);\n                                        }}\n                                    />\n                                </Tooltip>\n                            );\n                        }}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                        onItemSelect={() => {}}\n                    >\n                        <Button\n                            text={this.state.select}\n                            rightIcon=\"double-caret-vertical\"\n                        />\n                    </Select>\n                </FormGroup>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Code,\n    Dialog,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport { Attributes, SerializedEdge } from \"graphology-types\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\nimport NodeChooser from \"../utils/NodeChooser\";\n\nlet GraphEdgeTable = observer(\n    class GraphEdgeTable extends React.Component {\n        state = {\n            addEdgeDialogOpen: false,\n            deleteAlertOpen: false,\n            edgeToDelete: null as null | SerializedEdge<Attributes>,\n            filterQuery: null as null | string,\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedEdge<Attributes>[] = [];\n            State.graph.rawGraph.export().edges.forEach((edge) => {\n                if (\n                    !this.state.filterQuery ||\n                    edge.source\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    edge.target\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(edge);\n                }\n            });\n            return newTable;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(\n                            this.state.edgeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.key}</Code> from Node ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.source}</Code> to Node\n                        ID <Code>{this.state.edgeToDelete?.target}</Code>. This\n                        action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        addEdgeDialog = () => {\n            return (\n                <Dialog\n                    isOpen={this.state.addEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => this.setState({ addEdgeDialogOpen: false })}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() =>\n                                    this.setState({ addEdgeDialogOpen: false })\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.setState({ addEdgeDialogOpen: false });\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() =>\n                                this.setState({ addEdgeDialogOpen: true })\n                            }\n                            icon=\"new-link\"\n                            intent=\"primary\"\n                            text=\"Add Edge\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Source or Target of an Edge...\"\n                            value={this.state.filterQuery ?? \"\"}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n                    <Table\n                        className=\"argo-table\"\n                        numRows={this.filteredTable.length}\n                        defaultRowHeight={30}\n                        renderMode={RenderMode.NONE}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteEdgeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"Source\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].source}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                        <Column\n                            name=\"Target\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].target}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                    </Table>\n                    {this.deleteEdgeAlert()}\n                    {this.addEdgeDialog()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    /**\n     * @description the edge data sheet table\n     * @author Zichen XU\n     * @class EdgeDataSheetDialog\n     * @extends {React.Component}\n     */\n    class EdgeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"edge\">\n                    <GraphEdgeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import {\n    Button,\n    Card,\n    Elevation,\n    FormGroup,\n    H5,\n    InputGroup,\n    Tooltip,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport State from \"../../state\";\nimport { Attributes } from \"graphology-types\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * function to call when a new node is successfully added\n     * the {nodeId} is the id of the newly added node, {attributes} is the attributes of the newly added node\n     *\n     * @memberof Props\n     */\n    onAdded: (nodeId: string, attributes: Attributes) => void;\n}\n\nexport default observer(\n    /**\n     * @description This component will be used to be part of addNodeDialog\n     * @author Zichen XU,Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class NodeAdder extends React.Component<Props, {}> {\n        state = {\n            newNodeId: \"\",\n            attributes: {} as Attributes,\n        };\n\n        get canImport() {\n            return (\n                !State.graph.rawGraph.hasNode(this.state.newNodeId) &&\n                this.state.newNodeId !== \"\"\n            );\n        }\n\n        canImportTag = () => {\n            return this.canImport ? (\n                <Tooltip\n                    content={\n                        \"This Node Id is not used by any existing node yet\"\n                    }\n                    intent=\"success\"\n                >\n                    <Button icon=\"tick\" intent=\"success\" minimal={true} />\n                </Tooltip>\n            ) : (\n                <Tooltip\n                    content={\n                        \"This Node Id is currently in use by other nodes, try with another one instead\"\n                    }\n                    intent=\"warning\"\n                >\n                    <Button icon=\"cross\" intent=\"warning\" minimal={true} />\n                </Tooltip>\n            );\n        };\n\n        renderAttributesForm = (attributes: string[]) => {\n            return attributes.map((attribute) => {\n                if (attribute !== \"_options\" && attribute !== \"_visualize\") {\n                    return (\n                        <FormGroup label={attribute}>\n                            <InputGroup\n                                asyncControl={true}\n                                placeholder={\n                                    \"Enter the value for attribute: \" +\n                                    attribute\n                                }\n                                onChange={handleStringChange((value) => {\n                                    let newValue = this.state.attributes;\n                                    newValue[attribute] = parseNumberOrString(\n                                        value\n                                    );\n                                    this.setState({ attributes: newValue });\n                                })}\n                                value={this.state.attributes[attribute]}\n                            />\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        };\n\n        render() {\n            return (\n                <Card elevation={Elevation.ONE}>\n                    <FormGroup label=\"New Node ID\" labelInfo=\"(required)\">\n                        <InputGroup\n                            autoFocus={true}\n                            asyncControl={true}\n                            placeholder=\"Enter the new Node Id...\"\n                            intent={this.canImport ? \"success\" : \"warning\"}\n                            rightElement={this.canImportTag()}\n                            onChange={handleStringChange((value) =>\n                                this.setState({ newNodeId: value })\n                            )}\n                            value={this.state.newNodeId}\n                        />\n                    </FormGroup>\n                    <Card elevation={Elevation.ONE}>\n                        <H5>Attributes</H5>\n                        {this.renderAttributesForm(\n                            State.graph.metadata.nodeProperties\n                        )}\n                    </Card>\n                    <hr />\n                    <Button\n                        intent=\"primary\"\n                        onClick={() => {\n                            State.graph.decorateRawNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.graph.mutating.addNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            this.props.onAdded(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.preferences.AddNodeDialogOpen = false;\n                            // State.preferences.rightClickBackgroundPanelOpen = false;\n                            // this.forceUpdate();\n                            // State.graphDelegate.cameraFocusOn(this.state.newNodeId);\n                        }}\n                        disabled={!this.canImport}\n                    >\n                        Confirm\n                    </Button>\n                </Card>\n            );\n        }\n        componentDidMount = () => {\n            State.graph.metadata.nodeProperties.forEach((prop) => {\n                let newValue = this.state.attributes;\n                newValue[prop] = \"\";\n                this.setState({ attributes: newValue });\n            });\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Classes, Dialog, Tag } from \"@blueprintjs/core\";\nimport NodeAdder from \"../utils/NodeAdder\";\nimport State from \"../../state\";\n\nexport default observer(\n    /**\n     * @description the dialog for adding nodes with fields for the user to fill in\n     * @author Zichen XU\n     * @class AddNodeDialog\n     * @extends {React.Component}\n     */\n    class AddNodeDialog extends React.Component {\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddNodeDialogOpen}\n                    icon=\"new-object\"\n                    onClose={() => {\n                        State.preferences.AddNodeDialogOpen = false;\n                    }}\n                    title=\"Add Node\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add node with unique node id to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> node means there should only exist\n                            one node that has the respective node id.\n                        </p>\n                        <Tag>New nodes are added to the end of the table</Tag>\n                        <hr />\n                        <NodeAdder\n                            onAdded={() => {\n                                this.setState({ addNodeDialogOpen: false });\n                                this.forceUpdate();\n                            }}\n                        />\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Dialog,\n    Divider,\n    Intent,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport NodeChooser from \"../utils/NodeChooser\";\nexport default observer(\n    /**\n     * @description This component will be used when adding a edge\n     * @author Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class AddEdgeDialog extends React.Component {\n        state = {\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => {\n                        State.preferences.AddEdgeDialogOpen = false;\n                    }}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() => {\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                            {/* //todo:\n                            <Button\n                                onClick={() => {\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                            >\n                                Preview\n                            </Button> */}\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.forceUpdate();\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Classes,\n    ControlGroup,\n    Dialog,\n    FileInput,\n    Intent,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\nexport default observer(\n    /**\n     * @description the dialog for GEXF import\n     * @author Zichen XU\n     * @class ImportGEXFDialog\n     * @extends {React.Component}\n     */\n    class ImportGEXFDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <ButtonGroup>\n                            <Button\n                                disabled={!this.state.fileIsSelect}\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.import.isLoading = true;\n                                    State.import\n                                        .importGraphFromGEXF()\n                                        .then((res) => {\n                                            State.graph.setGraph(\n                                                res.graph,\n                                                res.metadata\n                                            );\n\n                                            if (\n                                                State.graph.rawGraph.hasAttribute(\n                                                    \"default\"\n                                                )\n                                            ) {\n                                                State.cluster.setCluster(\n                                                    State.graph.rawGraph.getAttribute(\n                                                        \"default\"\n                                                    )\n                                                );\n                                            }\n\n                                            State.import.isLoading = false;\n                                            State.import.importGEXFDialogOpen = false;\n                                        });\n                                }}\n                                text=\"Import\"\n                            />\n                        </ButtonGroup>\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"document-open\"\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;\n                    }}\n                    title=\"Open GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <ControlGroup>\n                                    <FileInput\n                                        text={State.import.gexfFileName}\n                                        onInputChange={(event) => {\n                                            let target = event.target as HTMLInputElement;\n                                            if (\n                                                !target.files ||\n                                                target.files.length < 1\n                                            ) {\n                                                return;\n                                            }\n                                            State.import.gexfFileName =\n                                                target.files[0].name;\n                                            // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                            State.import.selectedGEXFFileFromInput =\n                                                target.files[0];\n\n                                            this.setState({\n                                                fileIsSelect: true,\n                                            });\n                                        }}\n                                    />\n                                </ControlGroup>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\n\nimport ImportDialog from \"./dialogs/importDialog\";\nimport ExportDialog from \"./dialogs/ExportDialog\";\nimport NodeDataSheetDialog from \"./dialogs/NodeDataSheetDialog\";\nimport EdgeDataSheetDialog from \"./dialogs/EdgeDataSheetDialog\";\nimport AddNodeDialog from \"./dialogs/AddNodeDialog\";\nimport AddEdgeDialog from \"./dialogs/AddEdgeDialog\";\nimport ImportGEXFDialog from \"./dialogs/ImportGEXFDialog\";\n\n/**\n * @description all the dialogs that may appear\n * @author Zichen XU, Zhiyuan LYU\n * @export\n * @class Dialogs\n * @extends {React.Component}\n */\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                <ImportGEXFDialog />\n                <ImportDialog />\n                <AddNodeDialog />\n                <AddEdgeDialog />\n                <NodeDataSheetDialog />\n                <EdgeDataSheetDialog />\n                <ExportDialog />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Attributes } from \"graphology-types\";\nimport classnames from \"classnames\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    /**\n     * @description This component will be used when multi-select in the mode 'node selection'.\n     * @author Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class SelectionBox extends React.Component {\n        state = {\n            boxStyle: {\n                left: 0,\n                top: 0,\n                width: 0,\n                height: 0,\n            },\n            startPoint: { x: 0, y: 0 },\n            endPoint: { x: 0, y: 0 },\n            mouseDown: false,\n        };\n\n        onMouseDownCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            let startpoint = { x: event.clientX, y: event.clientY };\n            this.setState({\n                startPoint: startpoint,\n                endPoint: startpoint,\n                mouseDown: true,\n            });\n        };\n\n        onMouseMoveCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            if (this.state.mouseDown) {\n                let endPoint = { x: event.clientX, y: event.clientY };\n                this.setState({\n                    endPoint: endPoint,\n                    boxStyle: this._calculateSelectionBox(\n                        this.state.startPoint,\n                        this.state.endPoint\n                    ),\n                });\n            }\n        };\n\n        onMouseUpCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            State.interaction.boxSelection_endPoint = {\n                x: this.state.endPoint.x,\n                y: this.state.endPoint.y,\n            };\n            State.interaction.boxSelection_startPoint = {\n                x: this.state.startPoint.x,\n                y: this.state.startPoint.y,\n            };\n\n            this.setState({\n                startPoint: { x: 0, y: 0 },\n                endPoint: { x: 0, y: 0 },\n                boxStyle: {\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                },\n                mouseDown: false,\n            });\n            State.interaction.boxSelectionOpen = false;\n            State.interaction.boxSelectNode();\n        };\n\n        _calculateSelectionBox(\n            startPoint: Attributes,\n            endPoint: Attributes\n        ): Attributes {\n            let left = Math.min(startPoint.x, endPoint.x);\n            let top = Math.min(startPoint.y, endPoint.y);\n            let width = Math.abs(startPoint.x - endPoint.x);\n            let height = Math.abs(startPoint.y - endPoint.y);\n            return { left: left, top: top, width: width, height: height };\n        }\n\n        render() {\n            return (\n                <div\n                    className={classnames(\"boxCanvas\")}\n                    onMouseDown={this.onMouseDownCallback}\n                    onMouseMove={this.onMouseMoveCallback}\n                    onMouseUp={this.onMouseUpCallback}\n                >\n                    <div\n                        className={classnames(\"selectionBox\")}\n                        style={this.state.boxStyle}\n                    ></div>\n                </div>\n            );\n        }\n    }\n);\n","import ReactDOM from \"react-dom\";\nimport State from \"..\";\nimport * as THREE from \"three\";\nimport { Object3D } from \"three\";\nimport ComponentRef from \"../../components/ComponentRef\";\n\nexport const debounce = (fn: Function): any => {\n    let timer: any = null;\n    return (...args: any[]) => {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(() => {\n            fn.apply(this, args);\n            timer = null;\n        }, 50);\n    };\n};\n\nexport const onDocumentLeftClick: EventListener = (evt: Event) => {\n    const event = evt as MouseEvent;\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterLeftClickCallback(\n            intersects[0].object.uuid,\n            event\n        );\n        console.log(\"currently Clicked ClusterId\", intersects[0].object.uuid);\n    }\n};\n\nexport const onDocumentRightClick: EventListener = (evt: Event) => {\n    const event = evt as MouseEvent;\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterRightClickCallback(\n            intersects[0].object.uuid,\n            event\n        );\n    } else {\n        State.clusterInteraction.clusterRightClickCallback(null, event);\n    }\n    console.log(\n        \"currently Right-Clicked ClusterId\",\n        intersects[0]?.object?.uuid ?? null\n    );\n};\n\nexport function onDocumentMouseMove(this: Element, event: MouseEvent) {\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        State.clusterInteraction.currentlyHoveredClusterId = null;\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterHoverCallback(\n            intersects[0].object.uuid,\n            event\n        );\n    } else {\n        State.clusterInteraction.clusterHoverCallback(null, event);\n    }\n    console.log(\n        \"currentlyHoveredClusterId\",\n        intersects[0]?.object?.uuid ?? null\n    );\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport State from \"../../../state\";\nimport { NAVBAR_HEIGHT } from \"../../../constants\";\nimport { ICanvasDrawProps } from \"./CanvasDrawPanel\";\n\nexport default observer(\n    /**\n     * @description another canvas to draw free-hand gesture when cluster splitting\n     * @author Zichen XU\n     * @class CanvasDrawFreehandPanel\n     * @extends {React.Component}\n     */\n    class CanvasDrawFreehandPanel extends React.Component<\n        ICanvasDrawProps,\n        {}\n    > {\n        //@ts-ignore\n        canvasRef: React.MutableRefObject<CanvasDraw> = React.createRef();\n\n        get canvasMethods() {\n            return this.canvasRef.current;\n        }\n\n        render() {\n            return (\n                <div\n                    onMouseUp={() => {\n                        const data = JSON.parse(\n                            this.canvasMethods.getSaveData()\n                        );\n                        if (data.lines[0].points.length > 4) {\n                            this.exportDrawing();\n                        }\n                    }}\n                >\n                    <CanvasDraw\n                        ref={this.canvasRef}\n                        style={{\n                            position: \"absolute\",\n                            top: this.props.boundingRect.y,\n                        }}\n                        canvasHeight={this.props.boundingRect.height}\n                        canvasWidth={this.props.boundingRect.width}\n                        lazyRadius={0}\n                        brushRadius={3}\n                        brushColor={\"#F6B26B\"}\n                        catenaryColor={\"#F6B26B\"}\n                    />\n                </div>\n            );\n        }\n\n        exportDrawing() {\n            State.helper.clusterSplittingCurrentStep = 3;\n            const data = JSON.parse(this.canvasMethods.getSaveData());\n            let drawPoints = data?.lines[0]?.points as {\n                x: number;\n                y: number;\n            }[];\n            if (!drawPoints) {\n                return;\n            }\n            drawPoints.forEach((value) => {\n                value.y += NAVBAR_HEIGHT;\n            });\n\n            // line was drawn left to right\n            if (drawPoints[0].x < drawPoints[drawPoints.length - 1].x) {\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.props.boundingRect.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            } else {\n                drawPoints.reverse();\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.props.boundingRect.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            }\n\n            State.clusterInteraction.lineSegment = drawPoints;\n            State.clusterInteraction.computeSplitCluster();\n        }\n\n        clearDrawing() {\n            this.canvasMethods.clear();\n        }\n\n        componentDidMount = () => {\n            this.clearDrawing();\n        };\n\n        componentWillUnmount = () => {\n            this.clearDrawing();\n        };\n    }\n);\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport State from \"../../../state\";\nimport { ICanvasDrawProps } from \"./CanvasDrawPanel\";\n\nexport default observer(\n    /**\n     * @description the canvas to draw a straight line when splitting the cluster\n     * @author Zichen XU\n     * @class CanvasDrawStraightLinePanel\n     * @extends {React.Component}\n     */\n\n    class CanvasDrawStraightLinePanel extends React.Component<ICanvasDrawProps> {\n        private startPoint = { x: 0, y: 0 };\n        private endPoint = { x: 100, y: 100 };\n        private mouseDown = false;\n\n        onMouseDownCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            this.startPoint = { x: event.clientX, y: event.clientY - 50 };\n            this.endPoint = { x: event.clientX, y: event.clientY - 50 };\n            this.mouseDown = true;\n        };\n\n        onMouseMoveCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            if (this.mouseDown) {\n                this.endPoint = { x: event.clientX, y: event.clientY - 50 };\n                this.drawPoints();\n            }\n        };\n\n        onMouseUpCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            if (this.mouseDown) {\n                this.mouseDown = false;\n                this.exportDrawing();\n            }\n        };\n\n        exportDrawing() {\n            State.helper.clusterSplittingCurrentStep = 3;\n            let drawPoints = [\n                { x: this.startPoint.x, y: this.startPoint.y },\n                { x: this.endPoint.x, y: this.endPoint.y },\n            ] as {\n                x: number;\n                y: number;\n            }[];\n\n            // line was drawn left to right\n            if (drawPoints[0].x < drawPoints[1].x) {\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.props.boundingRect.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            } else {\n                drawPoints.reverse();\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.props.boundingRect.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            }\n\n            State.clusterInteraction.lineSegment = drawPoints;\n            State.clusterInteraction.computeSplitCluster();\n        }\n\n        ctx!: CanvasRenderingContext2D;\n\n        drawPoints() {\n            this.ctx.lineJoin = \"round\";\n            this.ctx.lineCap = \"round\";\n            this.ctx.clearRect(\n                0,\n                0,\n                this.ctx.canvas.width,\n                this.ctx.canvas.height\n            );\n            this.ctx.lineWidth = 5;\n\n            this.ctx.beginPath();\n\n            this.ctx.moveTo(this.startPoint.x, this.startPoint.y);\n            this.ctx.lineTo(this.endPoint.x, this.endPoint.y);\n\n            this.ctx.strokeStyle = \"#F6B26B\";\n            this.ctx.stroke();\n        }\n\n        clearDrawing() {\n            this.ctx?.clearRect(\n                0,\n                0,\n                this.ctx.canvas.width,\n                this.ctx.canvas.height\n            );\n        }\n\n        render() {\n            return (\n                <canvas\n                    style={{\n                        position: \"absolute\",\n                        zIndex: 20,\n                    }}\n                    width={this.props.boundingRect.width}\n                    height={this.props.boundingRect.height}\n                    ref={(canvas) => {\n                        if (canvas) {\n                            this.ctx = canvas.getContext(\n                                \"2d\"\n                            ) as CanvasRenderingContext2D;\n                        }\n                    }}\n                    onMouseDown={this.onMouseDownCallback}\n                    onMouseMove={this.onMouseMoveCallback}\n                    onMouseUp={this.onMouseUpCallback}\n                />\n            );\n        }\n\n        componentDidMount = () => {\n            this.clearDrawing();\n        };\n\n        componentWillUnmount = () => {\n            this.clearDrawing();\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport State from \"../../../state\";\nimport { NAVBAR_HEIGHT } from \"../../../constants\";\nimport { ICanvasDrawProps } from \"./CanvasDrawPanel\";\n\nexport default observer(\n    /**\n     * @description another canvas to draw free-hand gesture when cluster splitting\n     * @author Zichen XU\n     * @class CanvasDrawFreehandPanel\n     * @extends {React.Component}\n     */\n    class CanvasDrawFreeCirclePanel extends React.Component<\n        ICanvasDrawProps,\n        {}\n    > {\n        //@ts-ignore\n        canvasRef: React.MutableRefObject<CanvasDraw> = React.createRef();\n\n        get canvasMethods() {\n            return this.canvasRef.current;\n        }\n\n        render() {\n            return (\n                <div\n                    onMouseUp={() => {\n                        const data = JSON.parse(\n                            this.canvasMethods.getSaveData()\n                        );\n                        if (data.lines[0].points.length > 4) {\n                            this.exportDrawing();\n                        }\n                    }}\n                >\n                    <CanvasDraw\n                        ref={this.canvasRef}\n                        style={{\n                            position: \"absolute\",\n                            top: this.props.boundingRect.y,\n                        }}\n                        canvasHeight={this.props.boundingRect.height}\n                        canvasWidth={this.props.boundingRect.width}\n                        lazyRadius={0}\n                        brushRadius={3}\n                        brushColor={\"#F6B26B\"}\n                        catenaryColor={\"#F6B26B\"}\n                    />\n                </div>\n            );\n        }\n\n        exportDrawing() {\n            State.helper.clusterSplittingCurrentStep = 3;\n            const data = JSON.parse(this.canvasMethods.getSaveData());\n            let drawPoints = data?.lines[0]?.points as {\n                x: number;\n                y: number;\n            }[];\n            if (!drawPoints) {\n                return;\n            }\n            drawPoints.forEach((value) => {\n                value.y += NAVBAR_HEIGHT;\n            });\n\n            // form a circle\n            drawPoints.push(drawPoints[0]);\n\n            State.clusterInteraction.lineSegment = drawPoints;\n            State.clusterInteraction.computeSplitCluster();\n        }\n\n        clearDrawing() {\n            this.canvasMethods.clear();\n        }\n\n        componentDidMount = () => {\n            this.clearDrawing();\n        };\n\n        componentWillUnmount = () => {\n            this.clearDrawing();\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { NAVBAR_HEIGHT } from \"../../../constants\";\nimport { ICanvasDrawProps } from \"./CanvasDrawPanel\";\n\nexport default observer(\n    /**\n     * @description another canvas to draw free-hand gesture when cluster splitting\n     * @author Zichen XU\n     * @class CanvasDrawFreehandPanel\n     * @extends {React.Component}\n     */\n    class CanvasDrawFreeCirclePanel extends React.Component<\n        ICanvasDrawProps,\n        {}\n    > {\n        private centerPoint = { x: 0, y: 0 } as { x: number; y: number };\n        private radius = 0 as number;\n        private mouseDown = false;\n\n        onMouseDownCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            this.centerPoint = {\n                x: event.clientX,\n                y: event.clientY - NAVBAR_HEIGHT,\n            };\n            this.mouseDown = true;\n        };\n\n        onMouseMoveCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            if (this.mouseDown) {\n                this.radius = Math.sqrt(\n                    Math.pow(event.clientX - this.centerPoint.x, 2) +\n                        Math.pow(\n                            event.clientY - NAVBAR_HEIGHT - this.centerPoint.y,\n                            2\n                        )\n                );\n                this.drawPoints();\n            }\n        };\n\n        onMouseUpCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            if (this.mouseDown) {\n                this.mouseDown = false;\n                this.exportDrawing();\n            }\n        };\n\n        exportDrawing() {\n            State.helper.clusterSplittingCurrentStep = 3;\n\n            // State.clusterInteraction.lineSegment = drawPoints;\n            State.clusterInteraction.computeSplitClusterInCircle(\n                this.centerPoint.x,\n                this.centerPoint.y,\n                this.radius\n            );\n        }\n\n        ctx!: CanvasRenderingContext2D;\n\n        drawPoints() {\n            this.ctx.lineJoin = \"round\";\n            this.ctx.lineCap = \"round\";\n            this.ctx.clearRect(\n                0,\n                0,\n                this.ctx.canvas.width,\n                this.ctx.canvas.height\n            );\n            this.ctx.lineWidth = 5;\n\n            this.ctx.beginPath();\n\n            this.ctx.arc(\n                this.centerPoint.x,\n                this.centerPoint.y,\n                this.radius,\n                0,\n                2 * Math.PI\n            );\n\n            this.ctx.strokeStyle = \"#F6B26B\";\n            this.ctx.stroke();\n        }\n\n        clearDrawing() {\n            this.ctx?.clearRect(\n                0,\n                0,\n                this.ctx.canvas.width,\n                this.ctx.canvas.height\n            );\n        }\n\n        render() {\n            return (\n                <canvas\n                    style={{\n                        position: \"absolute\",\n                        zIndex: 20,\n                    }}\n                    width={this.props.boundingRect.width}\n                    height={this.props.boundingRect.height}\n                    ref={(canvas) => {\n                        if (canvas) {\n                            this.ctx = canvas.getContext(\n                                \"2d\"\n                            ) as CanvasRenderingContext2D;\n                        }\n                    }}\n                    onMouseDown={this.onMouseDownCallback}\n                    onMouseMove={this.onMouseMoveCallback}\n                    onMouseUp={this.onMouseUpCallback}\n                />\n            );\n        }\n\n        componentDidMount = () => {\n            this.clearDrawing();\n        };\n\n        componentWillUnmount = () => {\n            this.clearDrawing();\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport ReactDOM from \"react-dom\";\nimport ComponentRef from \"../../ComponentRef\";\nimport { DrawMode } from \"../../../state/ClusterInteractionStore\";\nimport CanvasDrawFreehandPanel from \"./CanvasDrawFreehandPanel\";\nimport CanvasDrawStraightLinePanel from \"./CanvasDrawStraightLinePanel\";\nimport CanvasDrawFreeCirclePanel from \"./CanvasDrawFreeCirclePanel\";\nimport CanvasDrawCenterCirclePanel from \"./CanvasDrawCenterCirclePanel\";\nimport State from \"../../../state\";\n\nexport interface ICanvasDrawProps {\n    boundingRect: DOMRect;\n}\n\nexport default observer(\n    /**\n     * @description another canvas to draw free-hand gesture when cluster splitting\n     * @author Zichen XU\n     * @class CanvasDrawPanel\n     * @extends {React.Component}\n     */\n    class CanvasDrawPanel extends React.Component {\n        get canvas() {\n            let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n            return (element as Element)?.getBoundingClientRect();\n        }\n\n        render() {\n            switch (State.clusterInteraction.drawMode) {\n                case DrawMode.StraightLine:\n                    return (\n                        <CanvasDrawStraightLinePanel\n                            boundingRect={this.canvas}\n                        />\n                    );\n\n                case DrawMode.FreeLine:\n                    return (\n                        <CanvasDrawFreehandPanel boundingRect={this.canvas} />\n                    );\n\n                case DrawMode.FreeCircle:\n                    return (\n                        <CanvasDrawFreeCirclePanel boundingRect={this.canvas} />\n                    );\n\n                case DrawMode.CenterCircle:\n                    return (\n                        <CanvasDrawCenterCirclePanel\n                            boundingRect={this.canvas}\n                        />\n                    );\n            }\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state\";\nimport SpriteText from \"three-spritetext\";\nimport {\n    ICustomLinkObject,\n    ICustomNodeObject,\n} from \"../../state/GraphDelegate\";\nimport { reaction } from \"mobx\";\nimport { VisualizationMode } from \"../../state/PreferencesStore\";\nimport SelectionBox from \"../panels/SelectionBox\";\nimport * as CustomMouseEvent from \"../../state/utils/MouseEventUtils\";\nimport CanvasDrawPanel from \"../panels/CanvasDraw/CanvasDrawPanel\";\nimport { createToaster } from \"../../state/utils/ToasterUtils\";\nimport { Position } from \"@blueprintjs/core\";\nimport { debounce } from \"../../state/utils/MouseEventUtils\";\nimport ReactDOM from \"react-dom\";\n\nexport default observer(\n    class ThreeJSVis extends React.Component {\n        state = {\n            visualizationGraph: State.graphDelegate.visualizationGraph(),\n            nodePointerInteraction: true,\n        };\n\n        clicking = false;\n\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        graphDelegate = State.graphDelegate;\n\n        hoverNodeCallback = (\n            node: NodeObject | null,\n            previousNode: NodeObject | null\n        ) => {\n            if (State.search.isPreviewing) return;\n            // to avoid frequent refresh\n\n            if (node === null) {\n                State.interaction.currentlyHoveredNodeId = null;\n            } else if (node !== previousNode) {\n                let current: string = node.id as string;\n                State.interaction.currentlyHoveredNodeId = current;\n            }\n            // console.log(State.graph.rawGraph);\n        };\n\n        nodeLeftClickCallback = (node: NodeObject, event: MouseEvent) => {\n            if (!this.state.nodePointerInteraction) {\n                return;\n            }\n            let nodeId = node.id as string;\n            if (\n                State.preferences.visualizationMode ===\n                VisualizationMode.NodeSelection\n            ) {\n                // multi-selection\n                let index;\n                // if already in the list of selected, remove\n                if (\n                    (index = State.interaction.selectedNodes.indexOf(\n                        nodeId\n                    )) !== -1\n                ) {\n                    State.interaction.selectedNodes.splice(index, 1);\n                } else {\n                    // if not in the list, add\n                    State.interaction.selectedNodes.push(nodeId);\n                }\n            } else {\n                // single select\n                State.interaction.selectedNodes = [node.id as string];\n            }\n        };\n\n        nodeRightClickCallback = (node: NodeObject, event: MouseEvent) => {\n            if (!this.state.nodePointerInteraction) {\n                return;\n            }\n            State.interaction.chosenNode = node.id as string;\n            // if selected node is not in the list, then add\n            if (\n                !State.interaction.selectedNodes.includes(\n                    State.interaction.chosenNode\n                )\n            ) {\n                State.interaction.selectedNodes.push(\n                    State.interaction.chosenNode\n                );\n            }\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickOn = \"Node\";\n            State.preferences.rightClickPanelOpen = true;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n            setTimeout(() => {\n                this.graphMethods.resumeAnimation();\n            }, 200);\n        };\n\n        backgroundClickCallback = () => {\n            // cancel all selection\n            State.interaction.flush();\n            State.interaction.selectedNodes = [];\n            State.preferences.rightClickPanelOpen = false;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n        };\n\n        backgroundRightClickCallback = (event: MouseEvent) => {\n            if (\n                !this.state.nodePointerInteraction ||\n                State.signal.isRightClickingCluster\n            ) {\n                return;\n            }\n            this.graphMethods.pauseAnimation();\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickOn = \"Background\";\n            State.preferences.rightClickPanelOpen = true;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n            setTimeout(() => {\n                this.graphMethods.resumeAnimation();\n            }, 200);\n        };\n\n        computeNodeColor(_node: NodeObject) {\n            let node = _node as ICustomNodeObject;\n            if (node.hovered) {\n                return State.css.node.highlightColor;\n            } else if (node.chosen) {\n                return State.css.node.chosenColor;\n            } else if (node.multiSelected) {\n                return State.css.node.multiSelectedColor;\n            } else {\n                return State.css.node.defaultColor;\n            }\n        }\n\n        computeEdgeColor(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightColor;\n            } else if (edge.chosen) {\n                return State.css.edge.selectedColor;\n            } else {\n                return State.css.edge.defaultColor;\n            }\n        }\n\n        computeEdgeWidth(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightWidth;\n            } else if (edge.chosen) {\n                return State.css.edge.highlightWidth;\n            } else {\n                return State.css.edge.defaultWidth;\n            }\n        }\n\n        renderGraph = () => {\n            return (\n                <div>\n                    {State.preferences.visualizationMode ===\n                        VisualizationMode.NodeSelection &&\n                        State.interaction.boxSelectionOpen && <SelectionBox />}\n                    {State.preferences.visualizationMode ===\n                        VisualizationMode.ClusterSplitting &&\n                        State.clusterInteraction.drawPanelActivate && (\n                            <CanvasDrawPanel />\n                        )}\n                    <ForceGraph3D\n                        // Data Segment\n                        ref={this.graphRef}\n                        graphData={this.state.visualizationGraph}\n                        // Node Visualization Segment\n                        nodeLabel=\"id\"\n                        nodeRelSize={State.css.node.size}\n                        nodeColor={this.computeNodeColor}\n                        nodeVisibility={this.graphDelegate.nodeVisibility}\n                        nodeResolution={State.css.node.resolution}\n                        nodeThreeObjectExtend={true}\n                        nodeThreeObject={(node) => {\n                            const sprite = new SpriteText(`${node.id}`);\n                            sprite.color = State.css.label.color;\n                            sprite.textHeight = State.css.label.size;\n                            sprite.backgroundColor = \"\";\n                            sprite.visible = State.css.label.show;\n                            sprite.translateX(State.css.node.size + 2);\n                            return sprite;\n                        }}\n                        // Node Manipulation Segment\n                        onNodeHover={this.hoverNodeCallback}\n                        onNodeClick={this.nodeLeftClickCallback}\n                        onNodeRightClick={this.nodeRightClickCallback}\n                        onNodeDragEnd={(node) => {\n                            node.fx = node.x;\n                            node.fy = node.y;\n                            node.fz = node.z;\n                        }}\n                        // Link Visualization Segment\n                        linkVisibility={this.graphDelegate.linkVisibility}\n                        linkWidth={this.computeEdgeWidth}\n                        linkColor={this.computeEdgeColor}\n                        // Graph Manipulation Segment\n                        onBackgroundRightClick={\n                            this.backgroundRightClickCallback\n                        }\n                        onBackgroundClick={this.backgroundClickCallback}\n                        enablePointerInteraction={\n                            this.state.nodePointerInteraction\n                        }\n                        // Engine\n                        onEngineTick={() => {\n                            State.graphDelegate.clusterObject.canAlterNodePosition = true;\n                            this.graphDelegate.clusterObject.clusterDelegation();\n                        }}\n                        cooldownTicks={100}\n                        onEngineStop={() => {\n                            if (\n                                State.css.cluster.shape === \"sphere\" &&\n                                State.graphDelegate.clusterObject\n                                    .canAlterNodePosition\n                            ) {\n                                console.log(\n                                    \"starts to plot points on the surface of the sphere\"\n                                );\n                                this.graphDelegate.clusterObject.alterNodePosition();\n                                State.graphDelegate.clusterObject.canAlterNodePosition = false;\n                            }\n                        }}\n                    />\n                </div>\n            );\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        updateVisualizationGraph() {\n            this.setState({\n                visualizationGraph: State.graphDelegate.visualizationGraph(),\n            });\n        }\n\n        nodeInteractionListener(set: boolean) {\n            this.setState({\n                nodePointerInteraction: set,\n            });\n        }\n\n        private debouncedMouseMoveCallback: any;\n\n        clusterInteractionListener(set: boolean) {\n            const DOM = ReactDOM.findDOMNode(this) as Element;\n            if (set) {\n                this.debouncedMouseMoveCallback = debounce(\n                    CustomMouseEvent.onDocumentMouseMove\n                );\n                DOM.addEventListener(\n                    \"mousemove\",\n                    this.debouncedMouseMoveCallback\n                );\n                DOM.addEventListener(\n                    \"click\",\n                    CustomMouseEvent.onDocumentLeftClick\n                );\n                document.addEventListener(\n                    \"contextmenu\",\n                    CustomMouseEvent.onDocumentRightClick\n                );\n            } else {\n                DOM.removeEventListener(\n                    \"mousemove\",\n                    this.debouncedMouseMoveCallback\n                );\n                DOM.removeEventListener(\n                    \"click\",\n                    CustomMouseEvent.onDocumentLeftClick\n                );\n                DOM.removeEventListener(\n                    \"contextmenu\",\n                    CustomMouseEvent.onDocumentRightClick\n                );\n            }\n        }\n\n        componentDidMount() {\n            this.graphDelegate.mountDelegateMethods(this.graphMethods);\n            this.clusterInteractionListener(true);\n            ComponentRef.visualizer = this;\n            this.graphDelegate.updateClusterForce();\n        }\n    }\n);\n\nreaction(\n    () => State.preferences.visualizationMode,\n    (visualizationMode) => {\n        State.preferences.closeAllPanel();\n        State.preferences.rightClickPanelOpen = false;\n        State.interaction.flush();\n        State.clusterInteraction.flush();\n        switch (visualizationMode) {\n            case VisualizationMode.Normal:\n                ComponentRef.visualizer?.nodeInteractionListener(true);\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                break;\n\n            case VisualizationMode.NodeSelection:\n                ComponentRef.visualizer?.nodeInteractionListener(true);\n                ComponentRef.visualizer?.clusterInteractionListener(false);\n                createToaster(\n                    <p>\n                        Select one or more <b>Nodes</b> and <b>Right-click</b>{\" \"}\n                        on one of them to open <b>Context Menu</b>\n                    </p>,\n                    Position.BOTTOM,\n                    10000\n                );\n                break;\n\n            case VisualizationMode.ClusterSelection:\n                ComponentRef.visualizer?.nodeInteractionListener(false);\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                createToaster(\n                    <p>\n                        Select one or more <b>Clusters</b> and{\" \"}\n                        <b>Right-click</b> on one of them to open{\" \"}\n                        <b>Context Menu</b>\n                    </p>,\n                    Position.BOTTOM,\n                    10000\n                );\n                break;\n\n            case VisualizationMode.ClusterSplitting:\n                ComponentRef.visualizer?.nodeInteractionListener(false);\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                State.helper.clusterSplittingPanelStackOpen = true;\n                break;\n        }\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Card } from \"@blueprintjs/core\";\nimport { Cell, Column, EditableCell, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state/index\";\nimport ComponentRef from \"../ComponentRef\";\n\ninterface Props {\n    /**\n     * the node id of the select node\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    /**\n     * @description Implementing a table showing the detail in formation of hovered Node\n     * in which the information could be changed by users\n     * @author Zhiyuan LYU Chenghao SHI\n     * @extends {React.Component<Props, {}>}\n     */\n    class NodeDetail extends React.Component<Props, {}> {\n        cellRenderer_property = (rowIndex: number) => {\n            return <Cell>{State.graph.metadata.nodeProperties[rowIndex]}</Cell>;\n        };\n\n        cellRenderer_value = (rowIndex: number) => {\n            let data = State.graph.rawGraph.getNodeAttribute(\n                this.props.onNode,\n                State.graph.metadata.nodeProperties[rowIndex]\n            );\n            // return a Editable Cell where user can edit the value of certain property;\n            return (\n                <EditableCell\n                    value={data}\n                    onChange={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    onConfirm={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    tooltip={data}\n                />\n            );\n        };\n\n        formatLongFloat = (nodeAttributeValue: any) => {\n            const num = Number(nodeAttributeValue);\n            if (Number.isNaN(num) || num > 1 || num < 0) {\n                // Do not format just return original\n                return nodeAttributeValue;\n            }\n            // Format to no more than 3 significant digit.\n            return Number.parseFloat(num.toString()).toPrecision(3);\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card className={\"node-details-table\"}>\n                        <Table\n                            numRows={State.graph.metadata.nodeProperties.length}\n                            enableRowHeader={false}\n                        >\n                            <Column\n                                name=\"Properties\"\n                                cellRenderer={this.cellRenderer_property}\n                            />\n                            <Column\n                                name=\"Value\"\n                                cellRenderer={this.cellRenderer_value}\n                            />\n                        </Table>\n                    </Card>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.nodeDetail = React.createRef();\n        };\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Card, Tag } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    /**\n     * @description This component will be used when multiple-choose nodes.\n     * @author Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class MultipleNodeDetail extends React.Component {\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"left-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card>\n                        <Table\n                            numRows={\n                                State.interaction.selectedNodes.length > 10\n                                    ? 10\n                                    : State.interaction.selectedNodes.length\n                            }\n                        >\n                            {State.graph.metadata.nodeProperties.map((it) => (\n                                <Column\n                                    key={it}\n                                    name={it}\n                                    cellRenderer={(i) => (\n                                        <Cell>\n                                            {State.graph.rawGraph.getNodeAttribute(\n                                                State.interaction.selectedNodes[\n                                                    i\n                                                ] as string,\n                                                it as string\n                                            )}\n                                        </Cell>\n                                    )}\n                                />\n                            ))}\n                        </Table>\n                        <Tag style={{ marginTop: \"3px\" }}>\n                            if select more than 10 nodes, only the top 10 nodes\n                            will be displayed\n                        </Tag>\n                    </Card>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.multiNodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { Alert, Button, Card, Code, H6, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\n\ninterface Props {\n    /**\n     * the node id of the select node to delete Edge\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    /**\n     * @description interactively delete or preview edge with a table shown at the right-bottom\n     * @author Zichen XU\n     * @class DeleteEdgeInteractionPanel\n     * @extends {React.Component<Props, {}>}\n     */\n    class DeleteEdgeInteractionPanel extends React.Component<Props, {}> {\n        state = {\n            targetNode: null as string | null,\n            deleteAlertOpen: false,\n        };\n\n        get neighbors(): string[] {\n            return State.graph.rawGraph.neighbors(this.props.onNode);\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            let targetNode = this.neighbors[rowIndex];\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                targetNode: targetNode,\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            if (this.state.targetNode === null) {\n                return null;\n            }\n\n            let edgeToDelete: string | undefined;\n\n            if (\n                (edgeToDelete = State.graph.rawGraph.edge(\n                    this.state.targetNode,\n                    this.props.onNode\n                )) === undefined\n            ) {\n                edgeToDelete = State.graph.rawGraph.edge(\n                    this.props.onNode,\n                    this.state.targetNode\n                );\n            }\n\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(edgeToDelete as string);\n                        this.setState({ deleteAlertOpen: false });\n                        State.preferences.deleteEdgePanelOpen = false;\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with Key{\" \"}\n                        <Code>{edgeToDelete as string}</Code> between Node ID{\" \"}\n                        <Code>{this.state.targetNode}</Code> and Node ID{\" \"}\n                        <Code>{this.props.onNode}</Code>. This action cannot be\n                        reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        neighborsRenderer: ICellRenderer = (rowIndex: number) => {\n            return (\n                <Cell interactive={true}>\n                    <div\n                        onMouseEnter={() => {\n                            State.graphDelegate.cameraFocusOn(\n                                this.props.onNode,\n                                400\n                            );\n                            State.interaction.selectedEdge = State.interaction.getEdgeKey(\n                                this.props.onNode,\n                                this.neighbors[rowIndex]\n                            ) as string;\n                        }}\n                    >\n                        {this.neighbors[rowIndex]}\n                    </div>\n                </Cell>\n            );\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card className={classnames(\"node-details-table\")}>\n                        <Button\n                            icon=\"cross\"\n                            onClick={() => {\n                                State.preferences.deleteEdgePanelOpen = false;\n                                State.interaction.selectedEdge = null;\n                                State.graphDelegate.graphDelegateMethods.refresh(); // update color of selected edges\n                            }}\n                        >\n                            Close\n                        </Button>\n                        <H6> Node ID: {this.props.onNode}</H6>\n                        <Table\n                            numRows={this.neighbors.length}\n                            defaultRowHeight={30}\n                            renderMode={RenderMode.NONE}\n                        >\n                            <Column\n                                name=\"\"\n                                cellRenderer={this.deleteEdgeRenderer}\n                                //@ts-ignore\n                                style={this.style}\n                            />\n                            <Column\n                                name=\"Node ID\"\n                                //@ts-ignore\n                                intent={Intent.PRIMARY}\n                                cellRenderer={this.neighborsRenderer}\n                            />\n                        </Table>\n                        {this.deleteEdgeAlert()}\n                    </Card>\n                </div>\n            );\n        }\n    }\n);\n","import React, { ReactNode } from \"react\";\nimport { Button, Card, Classes, Collapse, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    name: string;\n    isOpen: boolean;\n    onToggle: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n    children: ReactNode;\n}\n\nexport default observer(\n    /**\n     * @description the Collapsable HOC to wrap the content into a collapsable flip\n     * @author Zichen XU\n     * @class Collapsable\n     * @extends {React.Component<Props, {}>}\n     */\n    class Collapsable extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Card elevation={Elevation.THREE}>\n                    <Button\n                        className={classnames(\n                            Classes.LARGE,\n                            Classes.FILL,\n                            \"text-align-left\"\n                        )}\n                        rightIcon={\n                            this.props.isOpen ? \"chevron-up\" : \"chevron-down\"\n                        }\n                        onClick={this.props.onToggle}\n                    >\n                        {this.props.name}\n                    </Button>\n                    <Collapse isOpen={this.props.isOpen}>\n                        {this.props.children}\n                    </Collapse>\n                </Card>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { Card, Slider } from \"@blueprintjs/core\";\nimport Collapsable from \"../../utils/Collapsable\";\nimport SimpleSelect from \"../../utils/SimpleSelect\";\n\nexport default observer(\n    /**\n     * @description the sub-tab to alter the graph options of cluster\n     * @author Zichen XU, Zhiyuan LYU\n     * @class ClusterPanel\n     * @extends {React.Component}\n     */\n    class ClusterPanel extends React.Component {\n        state = {\n            shapeOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        forceCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Force\"\n                    isOpen={this.state.forceOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            forceOptionOpen: !this.state.forceOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        Cluster Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.clusterForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.clusterForce}\n                        />\n                    </Card>\n                    <Card className={\"sub-option\"}>\n                        Normal Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.normalForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.normalForce}\n                        />\n                    </Card>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        <p style={{ textAlign: \"left\" }}>\n                            Cluster Shape:\n                            <span style={{ float: \"right\" }}>\n                                <SimpleSelect\n                                    items={[\"convexHull\", \"sphere\"]}\n                                    text={State.css.cluster.shape}\n                                    onSelect={(it) => {\n                                        State.css.cluster.shape = it;\n                                        State.cluster.setCluster(\n                                            State.cluster.clusterBy,\n                                            true\n                                        );\n                                    }}\n                                    small={true}\n                                />\n                            </span>\n                        </p>\n                    </Card>\n                    {State.css.cluster.shape === \"sphere\" && (\n                        <Card className={\"sub-option\"}>\n                            Cluster Resolution:\n                            <br />\n                            <Slider\n                                min={2}\n                                max={20}\n                                stepSize={1}\n                                labelStepSize={5}\n                                onChange={(value) => {\n                                    State.css.cluster.resolution = value;\n                                    State.graphDelegate.graphDelegateMethods.refresh();\n                                }}\n                                value={State.css.cluster.resolution}\n                            />\n                        </Card>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Clusters</p>\n                    </div>\n                    {this.forceCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    PopoverInteractionKind,\n    Position,\n    Popover,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport { ColorResult, SketchPicker } from \"react-color\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the color to be previewed on the button\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    color: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     *\n     * @memberof Props\n     */\n    onChange: (color: ColorResult) => void;\n}\n\nexport default observer(\n    /**\n     * @description this component can be used to choose the node among all the nodes, with basic search filters available\n     *\n     * to use it, you have to specify the text shown above the selectButton\n     * as well as the onChange function to call when a candidate is selected\n     * @author Zichen XU\n     * @class ColorPicker\n     * @extends {React.Component<Props, {}>}\n     */\n    class ColorPicker extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Popover\n                    interactionKind={PopoverInteractionKind.CLICK}\n                    popoverClassName=\"bp3-popover-content-sizing\"\n                    placement={Position.RIGHT}\n                >\n                    <Button\n                        text=\"  \"\n                        style={{\n                            backgroundColor: this.props.color,\n                        }}\n                        small={true}\n                    />\n                    <div>\n                        <SketchPicker\n                            color={this.props.color}\n                            onChange={(it) => {\n                                this.props.onChange(it);\n                            }}\n                        />\n                    </div>\n                </Popover>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { Card } from \"@blueprintjs/core\";\nimport Collapsable from \"../../utils/Collapsable\";\nimport ColorPicker from \"../../utils/ColorPicker\";\n\nexport default observer(\n    /**\n     * @description This component will be used to change styles of edge\n     * @author Zhiyuan LYU Zichen XU\n     * @extends {React.Component}\n     */\n    class EdgesPanel extends React.Component {\n        state = {\n            sizeOptionOpen: false,\n            thicknessOptionOpen: false,\n            colorOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        render() {\n            return (\n                <div>\n                    <p>Modifying All Edges</p>\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <Card className={\"sub-option\"}>\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Default Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.defaultColor}\n                                            onChange={(it) => {\n                                                State.css.edge.defaultColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Selected Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.selectedColor}\n                                            onChange={(it) => {\n                                                State.css.edge.selectedColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Highlight Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={\n                                                State.css.edge.highlightColor\n                                            }\n                                            onChange={(it) => {\n                                                State.css.edge.highlightColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n                        </Card>\n                    </Collapsable>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Card, Slider, Switch } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport ColorPicker from \"../../utils/ColorPicker\";\n\nexport default observer(\n    /**\n     * @description This component will be used to change style of label\n     * @author Zhiyuan LYU, Zichen XU\n     * @extends {React.Component}\n     */\n    class LabelsPanel extends React.Component {\n        render() {\n            return (\n                <div>\n                    <Switch\n                        label=\"Show Node Label\"\n                        checked={State.css.label.show}\n                        onChange={() => {\n                            State.css.label.show = !State.css.label.show;\n                            State.graphDelegate.graphDelegateMethods.refresh();\n                        }}\n                    />\n                    <br />\n                    <Card className={\"sub-option\"}>\n                        Label Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={10}\n                            stepSize={1}\n                            labelStepSize={2}\n                            onChange={(value) => {\n                                State.css.label.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.label.size}\n                        />\n                        <br />\n                        <p style={{ textAlign: \"left\" }}>\n                            Label Color:\n                            <span style={{ float: \"right\" }}>\n                                <ColorPicker\n                                    color={State.css.label.color}\n                                    onChange={(it) => {\n                                        State.css.label.color = it.hex;\n                                        State.graphDelegate.graphDelegateMethods.refresh();\n                                    }}\n                                />\n                            </span>\n                        </p>\n                    </Card>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { Card, Slider } from \"@blueprintjs/core\";\nimport Collapsable from \"../../utils/Collapsable\";\nimport ColorPicker from \"../../utils/ColorPicker\";\n\nexport default observer(\n    /**\n     * @description This component will be used to change style of nodes. Including color, size,etc\n     * @author Zhiyuan LYU, Zichen XU\n     * @extends {React.Component}\n     */\n    class NodesPanel extends React.Component {\n        state = {\n            timeOutRef: null,\n            colorOptionOpen: false,\n            sizeOptionOpen: false,\n            shapeOptionOpen: false,\n        };\n\n        colorCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Color\"\n                    isOpen={this.state.colorOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            colorOptionOpen: !this.state.colorOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Default Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.defaultColor}\n                                        onChange={(it) => {\n                                            State.css.node.defaultColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Selected Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={\n                                            State.css.node.multiSelectedColor\n                                        }\n                                        onChange={(it) => {\n                                            State.css.node.multiSelectedColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Highlight Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.highlightColor}\n                                        onChange={(it) => {\n                                            State.css.node.highlightColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n                    </Card>\n                </Collapsable>\n            );\n        };\n\n        sizeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Size\"\n                    isOpen={this.state.sizeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            sizeOptionOpen: !this.state.sizeOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        Node Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.node.size}\n                        />\n                    </Card>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        Node Resolution:\n                        <br />\n                        <Slider\n                            min={2}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.resolution = value;\n                            }}\n                            value={State.css.node.resolution}\n                        />\n                    </Card>\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Nodes</p>\n                    </div>\n                    {this.colorCollapse()}\n                    {this.sizeCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n","import { H3, Tab, Tabs } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport ClusterPanel from \"./ClusterPanel\";\nimport EdgesPanel from \"./EdgesPanel\";\nimport LabelsPanel from \"./LabelsPanel\";\nimport NodesPanel from \"./NodesPanel\";\n\nexport default observer(\n    /**\n     * @description the graph options panel which contains four sub-tabs\n     * @author Zichen XU, Zhiyuan LYU\n     * @class RenderOptionsCard\n     * @extends {React.Component}\n     */\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <H3>Graph Options</H3>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        <Tab\n                            id=\"clusters\"\n                            title=\"Clusters\"\n                            panel={<ClusterPanel />}\n                        />\n\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n","import React, { CSSProperties } from \"react\";\nimport {\n    Button,\n    Callout,\n    Card,\n    Colors,\n    Elevation,\n    H6,\n    Icon,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport ClusterChooser, { ClusterAdder } from \"./ClusterChooser\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\n\ninterface Props {\n    callback: Function;\n    style?: CSSProperties;\n}\n\nexport default observer(\n    class FormClusterOptionsCard extends React.Component<Props> {\n        state = {\n            selectedAttribute: State.cluster.clusterBy,\n            value: \"\" as string,\n        };\n\n        renderInput() {\n            return (\n                <>\n                    <div style={{ marginTop: 10 }}>\n                        <InputGroup\n                            leftElement={<Icon icon=\"tag\" />}\n                            onChange={handleStringChange((value) => {\n                                this.setState({ value: value });\n                            })}\n                            placeholder=\"Enter Clustering Value\"\n                            value={this.state.value}\n                            intent={\n                                this.state.value === \"\"\n                                    ? Intent.DANGER\n                                    : Intent.SUCCESS\n                            }\n                        />\n                    </div>\n                    <div className=\"horizontal-gap\"></div>\n                    <Button\n                        onClick={() => {\n                            this.props.callback(\n                                this.state.selectedAttribute as string,\n                                parseNumberOrString(this.state.value)\n                            );\n                        }}\n                        intent={Intent.SUCCESS}\n                        disabled={\n                            this.state.selectedAttribute === null ||\n                            this.state.value === \"\"\n                        }\n                    >\n                        Confirm\n                    </Button>\n                </>\n            );\n        }\n\n        render() {\n            return (\n                <>\n                    <Card\n                        elevation={Elevation.ONE}\n                        style={{\n                            background: Colors.DARK_GRAY3,\n                        }}\n                    >\n                        <H6>(Optional) You can add node attributes here</H6>\n                        <ClusterAdder\n                            onCreate={(attribute) => {\n                                this.setState({ selectedAttribute: attribute });\n                            }}\n                        />\n                    </Card>\n                    <div className=\"horizontal-gap\"></div>\n                    <Card elevation={Elevation.THREE}>\n                        <H6>\n                            Choose the Attribute and New Value to form the new\n                            cluster\n                        </H6>\n                        <Callout\n                            intent={\n                                this.state.selectedAttribute === null\n                                    ? Intent.DANGER\n                                    : Intent.SUCCESS\n                            }\n                        >\n                            <div style={{ display: \"flex\" }}>\n                                <div\n                                    style={{\n                                        marginRight: 20,\n                                        marginTop: 5,\n                                        marginBottom: 10,\n                                    }}\n                                >\n                                    Choose the Attribute\n                                </div>\n\n                                <ClusterChooser\n                                    showNone={false}\n                                    onSelect={(cluster) => {\n                                        this.setState({\n                                            selectedAttribute: cluster,\n                                        });\n                                    }}\n                                    syncWith={this.state.selectedAttribute}\n                                />\n                            </div>\n                        </Callout>\n                        {this.renderInput()}\n                    </Card>\n                </>\n            );\n        }\n    }\n);\n","import { Button, Icon, InputGroup, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\nimport FormClusterOptionsCard from \"./FormClusterOptionsCard\";\n\nexport default observer(\n    class FormTwoClusterOptionsCard extends FormClusterOptionsCard {\n        state = {\n            selectedAttribute: State.cluster.clusterBy,\n            value: \"\" as string,\n            anotherValue: \"\" as string,\n        };\n\n        renderInput() {\n            return (\n                <>\n                    <div className=\"horizontal-gap\"></div>\n                    <InputGroup\n                        leftElement={<Icon icon=\"tag\" />}\n                        onChange={handleStringChange((value) => {\n                            this.setState({ value: value });\n                        })}\n                        placeholder=\"Enter Clustering Value for nodes in white\"\n                        value={this.state.value}\n                        intent={\n                            this.state.value === \"\"\n                                ? Intent.DANGER\n                                : Intent.SUCCESS\n                        }\n                    />\n                    <div className=\"horizontal-gap\"></div>\n                    <InputGroup\n                        leftElement={<Icon icon=\"tag\" />}\n                        onChange={handleStringChange((value) => {\n                            this.setState({ anotherValue: value });\n                        })}\n                        placeholder=\"Enter Clustering Value for nodes in red\"\n                        value={this.state.anotherValue}\n                        intent={\n                            this.state.anotherValue === \"\"\n                                ? Intent.DANGER\n                                : Intent.SUCCESS\n                        }\n                    />\n                    <div className=\"horizontal-gap\"></div>\n                    <Button\n                        onClick={() => {\n                            this.props.callback(\n                                this.state.selectedAttribute as string,\n                                parseNumberOrString(this.state.value),\n                                parseNumberOrString(this.state.anotherValue)\n                            );\n                        }}\n                        intent={Intent.SUCCESS}\n                        disabled={\n                            this.state.selectedAttribute === null ||\n                            this.state.value === \"\" ||\n                            this.state.anotherValue === \"\"\n                        }\n                    >\n                        Confirm\n                    </Button>\n                </>\n            );\n        }\n    }\n);\n","import React from \"react\";\n\nimport {\n    Button,\n    Intent,\n    Classes,\n    H4,\n    RadioGroup,\n    Radio,\n    Text,\n    Card,\n} from \"@blueprintjs/core\";\nimport { Popover2, Tooltip2 } from \"@blueprintjs/popover2\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../../ComponentRef\";\nimport { getMessage } from \"./InteractionModePanel\";\nimport { handleStringChange } from \"../../utils/InputFormUtils\";\nimport { DrawMode } from \"../../../state/ClusterInteractionStore\";\nimport FormTwoClusterOptionsCard from \"../../utils/FormTwoClusterOptionsCard\";\n\ninterface Props {\n    currentStep: 1 | 2 | 3;\n}\n\nexport default observer(\n    /**\n     * @description the helper pop-over for a step-to-step guidance to user on the way to split cluster\n     * @author Zichen XU\n     * @class ClusterSplittingPanelStack\n     * @extends {React.Component<Props, {}>}\n     */\n    class ClusterSplittingPanelStack extends React.Component<Props, {}> {\n        state = {\n            selected: \"curve\" as string,\n        };\n        titles = [\"Select Cluster\", \"Draw Line or Circle\", \"Confirm?\"];\n\n        renderFirstPanel = () => {\n            return (\n                <p>\n                    Select a <b>Cluster</b> to split by clicking it\n                </p>\n            );\n        };\n\n        renderSecondPanel = () => {\n            return (\n                <p>\n                    <RadioGroup\n                        label=\"Use the mouse to\"\n                        onChange={handleStringChange((value) => {\n                            this.setState({ selected: value });\n                            switch (value) {\n                                case \"curve\":\n                                    State.clusterInteraction.drawMode =\n                                        DrawMode.FreeLine;\n                                    break;\n                                case \"straight\":\n                                    State.clusterInteraction.drawMode =\n                                        DrawMode.StraightLine;\n                                    break;\n                                case \"circle\":\n                                    State.clusterInteraction.drawMode =\n                                        DrawMode.FreeCircle;\n                                    break;\n                                case \"centerCircle\":\n                                    State.clusterInteraction.drawMode =\n                                        DrawMode.CenterCircle;\n                                    break;\n                            }\n                        })}\n                        selectedValue={this.state.selected}\n                    >\n                        <Radio\n                            label=\"Draw a Freehand Line through the cluster\"\n                            value=\"curve\"\n                        />\n                        <Radio\n                            label=\"Draw a Straight Line through the cluster\"\n                            value=\"straight\"\n                        />\n                        <Radio\n                            label=\"Draw a Free Circle within the cluster\"\n                            value=\"circle\"\n                        />\n                        <Radio\n                            label=\"Draw a Centered Circle within the cluster\"\n                            value=\"centerCircle\"\n                        />\n                    </RadioGroup>\n                    hold and draw a line to split this Cluster\n                </p>\n            );\n        };\n\n        renderThirdPanel = () => {\n            return (\n                <div style={{ width: \"500px\" }}>\n                    <H4>Confirm Splitting of Cluster? </H4>\n                    <p>\n                        The two sub-clusters has been specified using the\n                        different node colors.\n                    </p>\n                    <FormTwoClusterOptionsCard\n                        callback={(\n                            attribute: string,\n                            value1: number | string,\n                            value2: number | string\n                        ) => {\n                            State.helper.clusterSplittingPanelStackOpen = false;\n                            State.clusterInteraction.splitCluster(\n                                attribute,\n                                value1,\n                                value2\n                            );\n                            State.preferences.visualizationMode =\n                                VisualizationMode.Normal;\n                            State.helper.clusterSplittingCurrentStep = 1;\n                        }}\n                    />\n                </div>\n            );\n        };\n\n        renderWhichPanel = () => {\n            switch (this.props.currentStep) {\n                case 1:\n                    return this.renderFirstPanel();\n                case 2:\n                    return this.renderSecondPanel();\n                case 3:\n                    return this.renderThirdPanel();\n            }\n        };\n\n        renderWhichBack = () => {\n            switch (this.props.currentStep) {\n                case 1:\n                    return <span />;\n                case 2:\n                    return (\n                        <Button\n                            className={Classes.PANEL_STACK_HEADER_BACK}\n                            icon=\"chevron-left\"\n                            minimal={true}\n                            onClick={() => {\n                                State.helper.clusterSplittingCurrentStep = 1;\n                            }}\n                            small={true}\n                            text={this.titles[0]}\n                            title={this.titles[0]}\n                        />\n                    );\n                case 3:\n                    return (\n                        <Button\n                            className={Classes.PANEL_STACK_HEADER_BACK}\n                            icon=\"chevron-left\"\n                            minimal={true}\n                            onClick={() => {\n                                State.helper.clusterSplittingCurrentStep = 2;\n                            }}\n                            small={true}\n                            text={this.titles[1]}\n                            title={this.titles[1]}\n                        />\n                    );\n            }\n        };\n\n        renderPanelStack = () => {\n            return (\n                <div\n                    className={Classes.PANEL_STACK_VIEW}\n                    style={{ position: \"unset\" }}\n                >\n                    <div style={{ minWidth: \"300px\", minHeight: \"100px\" }}>\n                        <div className={Classes.PANEL_STACK_HEADER}>\n                            {this.renderWhichBack()}\n                            <Text className={Classes.HEADING} ellipsize={true}>\n                                {this.titles[this.props.currentStep - 1]}\n                            </Text>\n                            <span />\n                        </div>\n                        <Card> {this.renderWhichPanel()}</Card>\n                    </div>\n                </div>\n            );\n        };\n\n        render() {\n            return (\n                <Popover2\n                    placement=\"right\"\n                    usePortal={false}\n                    content={this.renderPanelStack()}\n                    isOpen={\n                        State.preferences.visualizationMode ===\n                            VisualizationMode.ClusterSplitting &&\n                        State.helper.clusterSplittingPanelStackOpen\n                    }\n                    onOpened={() => {\n                        State.helper.clusterSplittingCurrentStep = 1;\n                    }}\n                >\n                    <Tooltip2\n                        usePortal={false}\n                        content={getMessage(VisualizationMode.ClusterSplitting)}\n                        placement={\"bottom\"}\n                    >\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            intent={Intent.DANGER}\n                            text={VisualizationMode.ClusterSplitting}\n                            active={\n                                State.preferences.visualizationMode ===\n                                VisualizationMode.ClusterSplitting\n                            }\n                            onClick={() => {\n                                State.preferences.visualizationMode =\n                                    VisualizationMode.ClusterSplitting;\n\n                                State.helper.clusterSplittingPanelStackOpen = true;\n                            }}\n                        />\n                    </Tooltip2>\n                </Popover2>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.clusterSplittingPanelStack = this;\n        };\n    }\n);\n","import React from \"react\";\n\nimport { Button, Intent, Classes, Card, Text } from \"@blueprintjs/core\";\nimport { Popover2, Tooltip2 } from \"@blueprintjs/popover2\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport { observer } from \"mobx-react\";\nimport { getMessage } from \"./InteractionModePanel\";\n\nexport default observer(\n    /**\n     * @description a helper pop-over that user can choose to enter the box-selection mode\n     * @author Zichen XU\n     * @class NodeSelectionPanel\n     * @extends {React.Component}\n     */\n    class NodeSelectionPanel extends React.Component {\n        private renderPanelStack = () => {\n            return (\n                <div\n                    className={Classes.PANEL_STACK_VIEW}\n                    style={{ position: \"unset\" }}\n                >\n                    <div style={{ minWidth: \"300px\", minHeight: \"100px\" }}>\n                        <div className={Classes.PANEL_STACK_HEADER}>\n                            <span />\n                            <Text className={Classes.HEADING} ellipsize={true}>\n                                Node Multi-Selection Mode\n                            </Text>\n                            <span />\n                        </div>\n                        <Card>\n                            <Button\n                                icon=\"select\"\n                                intent={\n                                    State.interaction.boxSelectionOpen\n                                        ? Intent.PRIMARY\n                                        : Intent.NONE\n                                }\n                                active={State.interaction.boxSelectionOpen}\n                                onClick={() =>\n                                    (State.interaction.boxSelectionOpen = !State\n                                        .interaction.boxSelectionOpen)\n                                }\n                            >\n                                Use Box-Selection\n                            </Button>\n                        </Card>\n                    </div>\n                </div>\n            );\n        };\n\n        render() {\n            return (\n                <Popover2\n                    placement=\"right\"\n                    usePortal={false}\n                    content={this.renderPanelStack()}\n                    isOpen={\n                        State.preferences.visualizationMode ===\n                            VisualizationMode.NodeSelection &&\n                        State.helper.NodeSelectionPanelOpen\n                    }\n                >\n                    <Tooltip2\n                        usePortal={false}\n                        content={getMessage(VisualizationMode.NodeSelection)}\n                    >\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            intent={Intent.WARNING}\n                            text={VisualizationMode.NodeSelection}\n                            active={\n                                State.preferences.visualizationMode ===\n                                VisualizationMode.NodeSelection\n                            }\n                            onClick={() => {\n                                State.preferences.visualizationMode =\n                                    VisualizationMode.NodeSelection;\n\n                                State.helper.NodeSelectionPanelOpen = true;\n                            }}\n                        />\n                    </Tooltip2>\n                </Popover2>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport ClusterSplittingPanelStack from \"./ClusterSplittingPanelStack\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport NodeSelectionPanel from \"./NodeSelectionPanel\";\n\nexport function getMessage(mode: VisualizationMode): string {\n    switch (mode) {\n        case VisualizationMode.Normal:\n            return \"Normal Interaction Mode where mouse interactions on nodes and clusters are both activated\";\n\n        case VisualizationMode.NodeSelection:\n            return \"Select one or more nodes and interact with them, such as adding/deleting, merge them to a cluster, free them from a cluster\";\n\n        case VisualizationMode.ClusterSelection:\n            return \"Select one or more clusters and interact with them, such as merging and releasing them\";\n\n        case VisualizationMode.ClusterSplitting:\n            return \"Select one cluster and draw a line to split into two halfs\";\n    }\n}\n\nexport default observer(\n    /**\n     * @description the four panels to select from different interaction modes\n     * @author Zichen XU\n     * @class InteractionModePanel\n     * @extends {React.Component}\n     */\n    class InteractionModePanel extends React.Component {\n        getIntent(mode: VisualizationMode): Intent {\n            switch (mode) {\n                case VisualizationMode.Normal:\n                    return Intent.PRIMARY;\n\n                case VisualizationMode.NodeSelection:\n                    return Intent.WARNING;\n\n                case VisualizationMode.ClusterSelection:\n                    return Intent.SUCCESS;\n\n                case VisualizationMode.ClusterSplitting:\n                    return Intent.DANGER;\n            }\n        }\n\n        renderMode(mode: VisualizationMode) {\n            return (\n                <Tooltip2 content={getMessage(mode)}>\n                    <Button\n                        className={classnames([\n                            Classes.BUTTON,\n                            Classes.MINIMAL,\n                        ])}\n                        text={mode}\n                        intent={this.getIntent(mode)}\n                        active={State.preferences.visualizationMode === mode}\n                        onClick={() => {\n                            State.preferences.visualizationMode = mode;\n                        }}\n                    />\n                </Tooltip2>\n            );\n        }\n\n        render() {\n            return (\n                <div className=\"selection-action-panel\">\n                    {this.renderMode(VisualizationMode.Normal)}\n                    <NodeSelectionPanel />\n                    {this.renderMode(VisualizationMode.ClusterSelection)}\n                    <ClusterSplittingPanelStack\n                        currentStep={State.helper.clusterSplittingCurrentStep}\n                    />\n                </div>\n            );\n        }\n    }\n);\n","import { MenuItem, MenuItemProps } from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\n\ninterface TooltipProps {\n    tooltipText: string;\n}\n\ntype Props = TooltipProps & MenuItemProps;\n\nexport function MenuItemWithTooltip(props: Props) {\n    return (\n        <Tooltip2 content={props.tooltipText}>\n            <MenuItem {...props} />\n        </Tooltip2>\n    );\n}\n","import React from \"react\";\nimport { MenuDivider } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { MenuItemWithTooltip } from \"../../utils/MenuItemWithTooltip\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport FormClusterOptionsCard from \"../../utils/FormClusterOptionsCard\";\n\nexport default observer(\n    /**\n     * @description This component will be used when mouse right-clicked. There will be some operation choices on this panel.\n     * @author Zichen XU, Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class RightClickNodePanel extends React.Component {\n        state = {\n            formNewClusterOpen: false,\n        };\n\n        formNewCluster(attribute: string, value: number | string) {\n            State.interaction.selectedNodes.forEach((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(nodeId, attribute, value);\n            });\n            State.preferences.rightClickPanelOpen = false;\n            State.cluster.setCluster(attribute);\n            State.interaction.flush();\n        }\n\n        releaseFromCluster() {\n            const clusterName = State.cluster.clusterBy as string;\n            State.interaction.selectedNodes.forEach((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(nodeId, clusterName, \"\");\n            });\n            State.preferences.rightClickPanelOpen = false;\n            State.cluster.setCluster(State.cluster.clusterBy, true);\n            State.interaction.flush();\n        }\n\n        render() {\n            return (\n                <>\n                    <MenuDivider\n                        title={\n                            (\"Node ID: \" +\n                                State.interaction.chosenNode) as string\n                        }\n                    />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Delete this selected node from the graph\"\n                        icon=\"graph-remove\"\n                        text=\"Delete Node\"\n                        multiline={true}\n                        onClick={() => {\n                            State.graph.mutating.dropNode(\n                                State.interaction.chosenNode as string\n                            );\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Delete multiple selected nodes from the graph\"\n                        icon=\"graph-remove\"\n                        text=\"Delete Selected Nodes\"\n                        multiline={true}\n                        onClick={() => {\n                            State.interaction.selectedNodes.forEach((node) => {\n                                State.graph.mutating.dropNode(node);\n                            });\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                        disabled={\n                            State.interaction.selectedNodes.length === 0 ||\n                            State.interaction.selectedNodes.length === 1\n                        }\n                    />\n\n                    <MenuDivider title=\"Edit Edges\" />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Add new edge to this graph\"\n                        icon=\"new-link\"\n                        text=\"Add Edge\"\n                        onClick={() => {\n                            State.preferences.AddEdgeDialogOpen = true;\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Interactively delete edge that connected to this selected node\"\n                        icon=\"cross\"\n                        text=\"Delete Edge\"\n                        onClick={() => {\n                            State.preferences.deleteEdgePanelOpen = true;\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider title=\"Node-Cluster\" />\n                    <Popover2\n                        isOpen={this.state.formNewClusterOpen}\n                        content={\n                            <FormClusterOptionsCard\n                                callback={(\n                                    attribute: string,\n                                    value: string | number\n                                ) => {\n                                    this.formNewCluster(attribute, value);\n                                    this.setState({\n                                        formNewClusterOpen: false,\n                                    });\n                                    State.preferences.rightClickPanelOpen = false;\n                                }}\n                            />\n                        }\n                    >\n                        <MenuItemWithTooltip\n                            tooltipText=\"Use the selected nodes to form a new cluster\"\n                            icon=\"inner-join\"\n                            text=\"Form a New Cluster\"\n                            onClick={() =>\n                                this.setState({\n                                    formNewClusterOpen: true,\n                                })\n                            }\n                            disabled={\n                                State.interaction.selectedNodes.length === 0\n                            }\n                        />\n                    </Popover2>\n\n                    <MenuItemWithTooltip\n                        tooltipText=\"Release the selected nodes from the cluster where they belongs\"\n                        icon=\"ungroup-objects\"\n                        text=\"Release from Cluster\"\n                        onClick={this.releaseFromCluster}\n                        disabled={State.interaction.selectedNodes.length === 0}\n                    />\n                </>\n            );\n        }\n\n        componentWillUnmount = () => {\n            this.setState({ formNewClusterOpen: false });\n        };\n    }\n);\n","import React from \"react\";\nimport { MenuDivider } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { MenuItemWithTooltip } from \"../../utils/MenuItemWithTooltip\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport FormClusterOptionsCard from \"../../utils/FormClusterOptionsCard\";\nimport { Vector3 } from \"three\";\n\nexport default observer(\n    /**\n     * @description This component will be used when mouse right-clicked. There will be some operation choices on this panel.\n     * @author Zichen XU, Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class RightClickClusterPanel extends React.Component {\n        state = {\n            mergeSelectedClustersOpen: false,\n            mergeNeighborsOpen: false,\n            mergeNearestClustersOpen: false,\n        };\n\n        /**\n         * @description loop through the selected clusters and set the nodes within that cluster\n         * @author Zichen XU\n         */\n        mergeSelectedClusters(attribute: string, value: string | number) {\n            State.clusterInteraction.selectedClusters.forEach((uuid) => {\n                const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                    uuid\n                ) as string | number;\n                const keys = State.cluster.attributeKeys.get(clusterValue);\n                keys?.forEach((nodeId) => {\n                    State.graph.rawGraph.setNodeAttribute(\n                        nodeId,\n                        attribute,\n                        value\n                    );\n                });\n            });\n            State.cluster.setCluster(attribute);\n            State.clusterInteraction.flush();\n        }\n\n        /**\n         * @description preview the selected cluster with its neighbors\n         * @author Zichen XU, Chenghao SHI\n         */\n        previewClusterNeighbors(uuid: string) {\n            State.clusterInteraction.selectedClusters = [uuid];\n            const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                uuid\n            ) as string | number;\n            const nodeIds = State.cluster.attributeKeys.get(clusterValue);\n            let attributes: (string | number)[] = [];\n            nodeIds?.forEach((nodeId) => {\n                State.graph.rawGraph.forEachNeighbor(nodeId, (neighbor) => {\n                    const attribute = State.cluster.keyAttribute.get(neighbor)!;\n                    if (!attributes.includes(attribute)) {\n                        attributes.push(attribute);\n                    }\n                });\n            });\n            attributes.forEach((attribute) => {\n                State.clusterInteraction.selectedClusters.push(\n                    State.graphDelegate.clusterObject.clusterObjectsMap?.get(\n                        attribute\n                    )?.uuid!\n                );\n            });\n        }\n\n        /**\n         * @description preview the nearest cluster with its neighbors\n         * @author Zichen XU\n         */\n        previewNearestNeighbors(uuid: string) {\n            function computeDistance(from: Vector3) {\n                const current = State.graphDelegate.clusterObject.getObjectById(\n                    uuid\n                )!.position;\n                return current.distanceTo(from);\n            }\n\n            State.clusterInteraction.selectedClusters = [uuid];\n            const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                uuid\n            ) as string | number;\n            const nodeIds = State.cluster.attributeKeys.get(clusterValue);\n            let attributes: (string | number)[] = [];\n            nodeIds?.forEach((nodeId) => {\n                State.graph.rawGraph.forEachNeighbor(nodeId, (neighbor) => {\n                    const attribute = State.cluster.keyAttribute.get(neighbor)!;\n                    if (!attributes.includes(attribute)) {\n                        attributes.push(attribute);\n                    }\n                });\n            });\n            const objects = attributes\n                .map((attribute) => {\n                    return State.graphDelegate.clusterObject.clusterObjectsMap?.get(\n                        attribute\n                    )?.uuid!;\n                })\n                .map((uuid) => {\n                    return State.graphDelegate.clusterObject.getObjectById(\n                        uuid\n                    );\n                });\n\n            if (objects.length !== 0) {\n                let shortest = objects[0];\n                objects.forEach((object) => {\n                    if (\n                        computeDistance(object?.position!) <\n                        computeDistance(shortest?.position!)\n                    ) {\n                        shortest = object;\n                    }\n                });\n                State.clusterInteraction.selectedClusters.push(shortest?.uuid!);\n            }\n        }\n\n        /**\n         * @description delete the selected clusters and its corresponding nodes\n         * @author Zichen XU\n         */\n        deleteSelectedClusters() {\n            State.clusterInteraction.selectedClusters.forEach((uuid) => {\n                const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                    uuid\n                ) as string | number;\n                const keys = State.cluster.attributeKeys.get(clusterValue);\n                keys?.forEach((nodeId: string) => {\n                    State.graph.rawGraph.dropNode(nodeId);\n                });\n            });\n            State.cluster.setCluster(null, true);\n            State.clusterInteraction.flush();\n        }\n\n        /**\n         * @description loop through the selected clusters and set the nodes within that cluster\n         * @author Zichen XU\n         */\n        releaseSelectedClusters() {\n            State.clusterInteraction.selectedClusters.forEach((uuid) => {\n                const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                    uuid\n                ) as string | number;\n                const keys = State.cluster.attributeKeys.get(clusterValue);\n                keys?.forEach((nodeId) => {\n                    State.graph.rawGraph.setNodeAttribute(\n                        nodeId,\n                        State.cluster.clusterBy as string,\n                        \"\"\n                    );\n                });\n            });\n            State.cluster.setCluster(State.cluster.clusterBy, true);\n            State.clusterInteraction.flush();\n        }\n\n        render() {\n            return (\n                <>\n                    <MenuDivider title=\"Cluster Operation\" />\n                    <Popover2\n                        popoverClassName={\"transparent-popover\"}\n                        isOpen={this.state.mergeSelectedClustersOpen}\n                        content={\n                            <FormClusterOptionsCard\n                                callback={(\n                                    attribute: string,\n                                    value: number | string\n                                ) => {\n                                    this.mergeSelectedClusters(\n                                        attribute,\n                                        value\n                                    );\n                                    this.setState({\n                                        mergeSelectedClustersOpen: false,\n                                    });\n                                    State.preferences.rightClickPanelOpen = false;\n                                }}\n                            />\n                        }\n                    >\n                        <MenuItemWithTooltip\n                            tooltipText=\"Merge selected clusters into a larger cluster\"\n                            icon=\"group-objects\"\n                            text=\"Merge Clusters\"\n                            onClick={() => {\n                                this.closeAllPanel();\n                                this.setState({\n                                    mergeSelectedClustersOpen: true,\n                                });\n                            }}\n                            disabled={\n                                State.clusterInteraction.selectedClusters\n                                    .length === 0 ||\n                                State.clusterInteraction.selectedClusters\n                                    .length === 1\n                            }\n                        />\n                    </Popover2>\n\n                    <Popover2\n                        popoverClassName={\"transparent-popover\"}\n                        isOpen={this.state.mergeNeighborsOpen}\n                        content={\n                            <FormClusterOptionsCard\n                                callback={(\n                                    attribute: string,\n                                    value: number | string\n                                ) => {\n                                    this.mergeSelectedClusters(\n                                        attribute,\n                                        value\n                                    );\n                                    this.setState({\n                                        mergeNeighborsOpen: false,\n                                    });\n                                    State.preferences.rightClickPanelOpen = false;\n                                }}\n                                style={{ opacity: \"50%\" }}\n                            />\n                        }\n                    >\n                        <MenuItemWithTooltip\n                            tooltipText=\"Merge this cluster with its neighbors\"\n                            icon=\"group-objects\"\n                            text=\"Merge Neighbors\"\n                            onClick={() => {\n                                this.previewClusterNeighbors(\n                                    State.clusterInteraction\n                                        .chosenCluster as string\n                                );\n                                State.graphDelegate.clusterObject.updateAllMaterials();\n                                this.closeAllPanel();\n                                this.setState({\n                                    mergeNeighborsOpen: true,\n                                });\n                            }}\n                        />\n                    </Popover2>\n\n                    <Popover2\n                        popoverClassName={\"transparent-popover\"}\n                        isOpen={this.state.mergeNearestClustersOpen}\n                        content={\n                            <FormClusterOptionsCard\n                                callback={(\n                                    attribute: string,\n                                    value: number | string\n                                ) => {\n                                    this.mergeSelectedClusters(\n                                        attribute,\n                                        value\n                                    );\n                                    this.setState({\n                                        mergeNearestClustersOpen: false,\n                                    });\n                                    State.preferences.rightClickPanelOpen = false;\n                                }}\n                            />\n                        }\n                    >\n                        <MenuItemWithTooltip\n                            tooltipText=\"Merge this cluster with its nearest neighbor\"\n                            icon=\"group-objects\"\n                            text=\"Merge Nearest Neighbor\"\n                            onClick={() => {\n                                this.previewNearestNeighbors(\n                                    State.clusterInteraction\n                                        .chosenCluster as string\n                                );\n                                State.graphDelegate.clusterObject.updateAllMaterials();\n                                this.closeAllPanel();\n                                this.setState({\n                                    mergeNearestClustersOpen: true,\n                                });\n                            }}\n                        />\n                    </Popover2>\n                    <MenuDivider />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Release selected clusters from the included nodes\"\n                        icon=\"group-objects\"\n                        text=\"Release Cluster(s)\"\n                        onClick={() => {\n                            this.releaseSelectedClusters();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Delete this cluster and its associated nodes from the graph\"\n                        icon=\"delete\"\n                        text=\"Delete Cluster(s)\"\n                        onClick={() => {\n                            this.deleteSelectedClusters();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                </>\n            );\n        }\n\n        componentWillUnmount = () => {\n            this.closeAllPanel();\n        };\n\n        closeAllPanel() {\n            this.setState({\n                mergeSelectedClustersOpen: false,\n                mergeNeighborsOpen: false,\n                mergeNearestClustersOpen: false,\n            });\n        }\n    }\n);\n","import React from \"react\";\nimport { MenuDivider } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { MenuItemWithTooltip } from \"../../utils/MenuItemWithTooltip\";\n\nexport default observer(\n    /**\n     * @description This component will be used when mouse right-clicked. There will be some operation choices on this panel.\n     * @author Zichen XU, Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class RightClickBackgroundPanel extends React.Component {\n        render() {\n            return (\n                <>\n                    <MenuDivider title=\"Edit Graph\" />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Add single node to the graph\"\n                        icon=\"new-object\"\n                        text=\"Add Node\"\n                        onClick={() => {\n                            State.preferences.AddNodeDialogOpen = true;\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                </>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Menu } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { computed, makeObservable } from \"mobx\";\nimport RightClickNodeMenu from \"./RightClickNodeMenu\";\nimport RightClickClusterMenu from \"./RightClickClusterMenu\";\nimport RightClickBackgroundMenu from \"./RightClickBackgroundMenu\";\n\ninterface Props {\n    /**\n     * what place this RightClick interaction is activated\n     *\n     * @type {(\"Node\" | \"Cluster\" | \"Background\")}\n     */\n    on: \"Node\" | \"Cluster\" | \"Background\";\n}\n\nexport default observer(\n    /**\n     * @description This component will be used when mouse right-clicked. There will be some operation choices on this panel.\n     * @author Zichen XU, Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class RightClickPanel extends React.Component<Props, {}> {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        renderMenuContent() {\n            switch (this.props.on) {\n                case \"Node\":\n                    return <RightClickNodeMenu />;\n                case \"Cluster\":\n                    return <RightClickClusterMenu />;\n                case \"Background\":\n                    return <RightClickBackgroundMenu />;\n            }\n        }\n\n        render() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    {this.renderMenuContent()}\n                </Menu>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Card, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport NodeDetailPanel from \"./panels/NodeDetailPanel\";\nimport MultiDetailPanel from \"./panels/MultiDetailPanel\";\nimport DeleteEdgeInteractionPanel from \"./panels/DeleteEdgeInteractionPanel\";\nimport GraphOptionsCard from \"./panels/GraphOptions/GraphOptionsCard\";\nimport InteractionModePanel from \"./panels/InteractionModePanel/InteractionModePanel\";\nimport RightClickPanel from \"./panels/RightClickPanel/RightClickPanel\";\n\nexport default observer(\n    /**\n     * @description all the floating cards on the screen\n     * @author Zhiyuan LYU\n     * @class FloatingCards\n     * @extends {React.Component}\n     */\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.graphOptionsCardOpen = !State.preferences\n                .graphOptionsCardOpen;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <Card\n                            elevation={Elevation.TWO}\n                            className={classnames(\n                                \"overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.graphOptionsCardOpen\n                                    ? this.optionsVisible\n                                    : this.optionsInvisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            />\n                            <br />\n                            <GraphOptionsCard />\n                        </Card>\n                        <Card\n                            elevation={Elevation.TWO}\n                            className={classnames(\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.graphOptionsCardOpen\n                                        ? this.sideButtonInv\n                                        : this.sideButtonVis\n                                }\n                            />\n                        </Card>\n                    </div>\n\n                    {/* single selected */}\n                    {/* {State.graph.selectedNodes.length === 1 && (\n                        <NodeDetail node={State.graph.currentlyHoveredId} />\n                    )} */}\n                    {State.interaction.currentlyHoveredNodeId &&\n                        State.interaction.selectedNodes.length === 0 && (\n                            <NodeDetailPanel\n                                onNode={\n                                    State.interaction.currentlyHoveredNodeId\n                                }\n                            />\n                        )}\n\n                    {/* multiple selected */}\n                    {/* {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n                        <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n                    )} */}\n                    {State.interaction.selectedNodes.length !== 0 && (\n                        <MultiDetailPanel />\n                    )}\n\n                    {State.preferences.rightClickPanelOpen &&\n                        State.preferences.rightClickOn && (\n                            <RightClickPanel\n                                on={State.preferences.rightClickOn}\n                            />\n                        )}\n                    {State.preferences.deleteEdgePanelOpen &&\n                        State.interaction.chosenNode && (\n                            <DeleteEdgeInteractionPanel\n                                onNode={State.interaction.chosenNode}\n                            />\n                        )}\n                    <InteractionModePanel />\n                </div>\n            );\n        }\n    }\n);\n","import classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/Visualizer\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}