{"version":3,"sources":["state/PreferencesStore.ts","state/Cluster3dObjectStore.ts","components/ComponentRef.tsx","state/GraphDelegate.ts","state/NodeInteractionStore.ts","state/GraphMutation.ts","state/GraphStore.ts","state/ImportStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/CssStore.ts","state/index.ts","components/utils/ClusterChooser.tsx","images/logo.png","components/utils/SimpleSelect.tsx","components/Navbar.tsx","components/utils/Collapsable.tsx","constants/index.ts","components/dialogs/ImportCSVDialog.tsx","components/dialogs/ImportGEXFDialog.tsx","components/dialogs/ExportDialog.tsx","components/utils/DataSheetDialogWrapper.tsx","components/utils/InputFormUtils.ts","components/dialogs/NodeDataSheetDialog.tsx","components/utils/NodeChooser.tsx","components/dialogs/EdgeDataSheetDialog.tsx","components/utils/NodeAdder.tsx","components/dialogs/AddNodeDialog.tsx","components/dialogs/AddEdgeDialog.tsx","components/Dialogs.tsx","components/visualize/visualizer.tsx","components/panels/NodeDetailPanel.tsx","components/panels/MultiDetailPanel.tsx","components/panels/SearchPanel.tsx","components/panels/DeleteEdgeInteractionPanel.tsx","components/panels/ClusterPanel.tsx","components/utils/ColorPicker.tsx","components/panels/EdgesPanel.tsx","components/panels/LabelsPanel.tsx","components/panels/NodesPanel.tsx","components/panels/GraphOptionsCard.tsx","components/panels/InteractionModePanel.tsx","components/panels/RightClickPanel.tsx","components/FloatingCards.tsx","App.js","reportWebVitals.js","index.js"],"names":["PreferencesStore","rightClickPositionX","rightClickPositionY","exportDialogOpen","preferenceDialogOpen","statisticsDialogOpen","helpDialogOpen","AddNodeDialogOpen","AddEdgeDialogOpen","nodeDataSheetDialogOpen","edgeDataSheetDialogOpen","rightClickOn","rightClickPanelOpen","deleteEdgePanelOpen","isGraphOptionsCardHidden","view","controlType","makeAutoObservable","this","Cluster3dObjectStore","threeScene","fusionClusterObjects","clusterObjectsMap","initialMap","Map","State","cluster","attributePoints","forEach","value","key","set","createMesh","THREE","add","clusterBy","convexHullObjects","initEmptyMapAndFusion","mesh","geometry","copy","convexHullObject","remove","dispose","uuid","res","children","every","item","object","material","opacity","newMap","points","get","css","shape","length","ConvexGeometry","Array","from","convexGeometry","computeBoundingSphere","sphereGeo","boundingSphere","sphere","SphereGeometry","radius","resolution","translate","center","x","y","z","geom","name","meshMaterial","color","attributeColor","transparent","side","depthWrite","ComponentRef","nodeDetail","multiNodeDetail","visualizer","_instance","instance","reaction","interaction","currentlyHoveredNodeId","forceUpdate","createCustomNodeObject","_id","_cluster","result","id","hovered","selected","isClusterNode","createCustomLinkObject","_source","_target","source","target","isClusterLink","VisualizationMode","GraphDelegate","graphDelegateMethods","nodeVisibility","nodeObject","linkVisibility","linkObject","clusterObject","_graphDelegateMethods","scene","newGraph","graph","rawGraph","addInvisibleClusterNode","decorateRawGraph","tempGraph","nodes","links","forEachNode","node","attributes","push","forEachEdge","edge","oldGraph","graphCopy","names","index","getAttributeValues","attribute","clusterID","addNode","_visualize","attributeKeys","addEdgeWithKey","event","graphDelegate","element","ReactDOM","findDOMNode","box","getBoundingClientRect","vector","clientX","left","width","clientY","top","height","camera","unproject","intersects","position","sub","normalize","intersectObjects","console","log","currentlyHoveredClusterId","nodeId","distance","getNodeAttribute","distRatio","Math","hypot","cameraPosition","d3Force","link","clusterForce","normalForce","d3ReheatSimulation","GraphMutation","_this","that","newAttributes","hasOwnProperty","decorateRawNode","refreshGraph","dropNode","decorateRawEdge","addEdge","dropEdge","GraphStore","Graph","allowSelfLoops","multi","type","mutating","metadata","snapshotName","nodeProperties","_rawGraph","_metadata","flush","updateVisualizationGraph","order","size","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importCSVDialogOpen","importSamplesDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","replace","parse","comment","trim","auto_parse","skip_empty_lines","undefined","err","Toaster","create","Position","TOP","show","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","readNodeCSV","toString","Object","assign","readEdgeCSV","idx","hasNode","keys","readGEXF","entries","getNodeAttributes","clusterProperties","edgeProperties","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","join","it","onerror","error","action","onClick","window","location","reload","text","nodeFileConfig","SearchStore","isPreviewing","searchStr","observable","ref","list","searchStrIgnoreCase","toLocaleLowerCase","match","searchId","includes","searchQuery","searchAttr","searchValue","ClusterStore","by","setAttribute","keyValueMap","Set","keyAttribute","values","attributeKeysMap","colors","randomcolor","seed","count","NodeGlobalConfig","defaultColor","selectedColor","highlightColor","EdgeGlobalConfig","defaultWidth","highlightWidth","LabelConfig","ClusterConfig","CssStore","label","isAnimating","InteractionStore","visualizationMode","Normal","selectedNode","selectedNodes","selectedEdge","selectedEdges","previouslyHoveredNodeId","neighbors","getNodeNeighborEdges","neighbor","getEdgeKey","node1","node2","go","back","updateNodeVisualizeAttribute","oldAttributeVisualize","updateVisualizeAttributeParser","getEdgeAttribute","_attributeVisualize","updateEachNodeAttributes","updateEachEdgeAttributes","newAttribute","oldAttributes","AppState","preferences","import","search","privateConstructor","_state","autorun","renderImportEdgePreview","renderImportNodePreview","resumeAnimation","pauseAnimation","getObjectById","resetDefaultMaterial","currentlyHoveredNodeNeighborEdges","updateEdgeVisualizeAttribute","refresh","observer","itemRenderer","props","handleClick","propertiesWithNone","unshift","items","showNone","fullProperties","filterable","onItemSelect","onSelect","syncWith","React","Component","defaultProps","CommonItemRenderer","itemPredicate","query","toLowerCase","indexOf","noResults","disabled","small","className","classnames","Classes","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","title","src","logo","alt","NAVBAR_HEADING","icon","BOTTOM","BUTTON","MINIMAL","checked","onChange","ALIGN_RIGHT","setCluster","NAVBAR_DIVIDER","open","elevation","Elevation","LARGE","FILL","rightIcon","isOpen","onToggle","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","PreviewTable","renderWrapper","numRows","selectedRegions","rows","cols","cellRenderer","i","state","loading","available","nodesOpen","edgesOpen","canImport","renderNodesSelection","Collapsable","setState","CONTROL_GROUP","INPUT_GROUP","onInputChange","files","renderEdgesSelection","newDelimiter","style","minWidth","onClose","DIALOG_BODY","targetValue","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","DISABLED","PRIMARY","importGraphFromCSV","then","setGraph","fileIsSelect","importGraphFromGEXF","hasAttribute","getAttribute","renderImportButton","ready","_node","_edge","write","headers","exportData","export","data","edges","interactive","ONE","minimal","computeGEXFFile","filename","computeNodeFile","separator","computeEdgeFile","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","for","onOpened","setTimeout","renderTable","handleStringChange","handler","stringifyNodeDetail","parseNumberOrString","numberVal","Number","isNaN","GraphNodeTable","filterQuery","addNodeDialogOpen","deleteAlertOpen","nodeToDelete","renderColumns","rowIndex","columnIndex","renderCell","filter","cell","filteredTable","newVal","setValue","onConfirm","tooltip","setNodeAttribute","deleteNodeRenderer","deleteNodeAlert","cancelButtonText","confirmButtonText","onCancel","textAlign","newTable","asyncControl","leftIcon","placeholder","fill","defaultRowHeight","SUCCESS","select","labelFor","labelInfo","GraphEdgeTable","addEdgeDialogOpen","edgeToDelete","chosenSource","chosenTarget","deleteEdgeRenderer","deleteEdgeAlert","addEdgeDialog","onClosed","hasEdge","renderMode","RenderMode","NONE","newNodeId","canImportTag","renderAttributesForm","newValue","componentDidMount","prop","autoFocus","rightElement","onAdded","Dialogs","display","visualizationGraph","nodePointerInteraction","graphRef","createRef","hoverNodeCallback","previousNode","current","nodeLeftClickCallback","ctrlKey","shiftKey","splice","nodeRightClickCallback","closeAllPanel","backgroundClickCallback","backgroundRightClickCallback","renderGraph","graphData","nodeLabel","nodeRelSize","nodeColor","computeNodeColor","nodeResolution","nodeThreeObjectExtend","nodeThreeObject","sprite","SpriteText","textHeight","visible","backgroundColor","translateX","onNodeHover","onNodeClick","onNodeRightClick","onNodeDragEnd","fx","fy","fz","linkWidth","computeEdgeWidth","linkColor","computeEdgeColor","onBackgroundRightClick","onBackgroundClick","enablePointerInteraction","onEngineTick","clusterDelegation","document","addEventListener","onDocumentMouseMove","removeEventListener","mountDelegateMethods","graphMethods","clusterInteractionListener","clusterHoverListener","NodeSelection","ClusterSelection","ClusterSplitting","cellRenderer_property","cellRenderer_value","onNode","formatLongFloat","nodeAttributeValue","num","parseFloat","toPrecision","CARD","enableRowHeader","renderSearchResults","candidates","onMouseOver","cameraFocusOn","large","onMouseLeave","targetNode","neighborsRenderer","onMouseEnter","shapeOptionOpen","forceOptionOpen","forceCollapse","min","max","stepSize","labelStepSize","updateClusterForce","shapeCollapse","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","RIGHT","sizeOptionOpen","thicknessOptionOpen","colorOptionOpen","hex","timeOutRef","colorCollapse","sizeCollapse","animate","panel","Expander","mode","WARNING","getIntent","active","makeObservable","stylePosition","computed","ELEVATION_1","on","renderNodeMenu","renderClusterMenu","renderBackgroundMenu","optionsVisible","optionsInvisible","sideButtonVis","marginLeft","sideButtonInv","toggleOptions","ELEVATION_2","GraphOptionsCard","paddingTop","paddingRight","paddingBottom","NodeDetailPanel","MultiDetailPanel","App","DARK","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"sTAEqBA,EACjB,aAAe,yBAMfC,oBAAsB,GANR,KAOdC,oBAAsB,GAPR,KAUdC,kBAAmB,EAVL,KAWdC,sBAAuB,EAXT,KAYdC,sBAAuB,EAZT,KAadC,gBAAiB,EAbH,KAedC,mBAAoB,EAfN,KAgBdC,mBAAoB,EAhBN,KAkBdC,yBAA0B,EAlBZ,KAmBdC,yBAA0B,EAnBZ,KAuBdC,aAAe,KAvBD,KAwBdC,qBAAsB,EAxBR,KAyBdC,qBAAsB,EAzBR,KA2BdC,0BAA2B,EA3Bb,KA+BdC,KAAO,KA/BO,KAgCdC,YAA6C,YA/BzCC,YAAmBC,O,iCCGNC,E,WACjB,aAAe,yBAQfC,gBARc,OAkBdC,qBAA2C,KAlB7B,KA2BdC,kBAA6D,KA1BzDL,YAAmBC,M,yDAkCvB,WAAyB,IAAD,OAChBK,EAAa,IAAIC,IACrBC,GAAMC,QAAQC,gBAAgBC,SAAQ,SAACC,EAAOC,GAC1CP,EAAWQ,IACPD,EACA,EAAKE,WAAW,IAAIC,IAAwBH,OAIpDZ,KAAKI,kBAAoBC,EACzBL,KAAKG,qBAAuB,IAAIY,IAChCV,EAAWK,SAAQ,SAACC,GAAW,IAAD,EAC1B,YAAKR,4BAAL,SAA2Ba,IAAIL,MAEnCX,KAAKE,WAAWc,IAAIhB,KAAKG,wB,+BAY7B,WAAqB,IAOV,EAPS,OACgB,OAA5BI,GAAMC,QAAQS,WAQmB,MAA7BjB,KAAKG,sBACqB,MAA1BH,KAAKkB,mBAELlB,KAAKmB,wBAET,UAAAnB,KAAKI,yBAAL,SAAwBM,SACpB,SAACU,EAAkBR,GACfQ,EAAKC,SAASC,KAAK,EAAKC,iBAAiBX,QAd7CZ,KAAKG,uBACLH,KAAKE,WAAWsB,OAAOxB,KAAKG,sBAC5BH,KAAKyB,a,2BAkBjB,SAAcC,GAAkC,IAAD,EACvCC,EAA6B,KASjC,OARA,UAAA3B,KAAKG,4BAAL,SAA2ByB,SAASC,OAAM,SAACC,GACvC,OAAIA,EAAKJ,OAASA,IACdC,EAAMG,GACC,MAKRH,I,kCAGX,WAAwB,IAAD,EACnB,UAAA3B,KAAKG,4BAAL,SAA2ByB,SAASlB,SAChC,SAACqB,GACcA,EACSC,SACXC,QAAU,S,qBAU/B,WAAW,IAAD,EACN,UAAAjC,KAAKI,yBAAL,SAAwBM,SAAQ,SAACU,GACdA,EAAKY,SACXP,UACTL,EAAKC,SAASI,aAElBzB,KAAKI,kBAAoB,KACzBJ,KAAKG,qBAAuB,O,6BAShC,WAAqE,IAAD,OAC5D+B,EAAS,IAAI5B,IAIjB,OAHAC,GAAMC,QAAQC,gBAAgBC,SAAQ,SAACC,EAAOC,GAC1CsB,EAAOrB,IAAID,EAAK,EAAKW,iBAAiBX,OAEnCsB,I,8BASX,SAAiBtB,GACb,IAAIuB,EAAS5B,GAAMC,QAAQC,gBAAgB2B,IAAIxB,GAC/C,GAAgC,eAA5BL,GAAM8B,IAAI7B,QAAQ8B,MAClB,OAAKH,GAAUA,EAAOI,OAAS,EACpB,IAAIxB,IAEJ,IAAIyB,IAAeC,MAAMC,KAAKP,IAIzC,IAAIQ,EAAiB,IAAIH,IAAeC,MAAMC,KAAKP,IACnDQ,EAAeC,wBACf,IAAIC,EAAYF,EAAeG,eAC3BC,EAAS,IAAIC,IACbH,EAAUI,OACV1C,GAAM8B,IAAI7B,QAAQ0C,WAClB3C,GAAM8B,IAAI7B,QAAQ0C,YAOtB,OALAH,EAAOI,UACHN,EAAUO,OAAOC,EACjBR,EAAUO,OAAOE,EACjBT,EAAUO,OAAOG,GAEdR,I,wBAcf,SACIS,EACAC,GAEA,IAAMC,EAAe,IAAI3C,IAAwB,CAC7C4C,MAAOpD,GAAMC,QAAQoD,eAAexB,IAAIqB,GACxCI,aAAa,EACb5B,QAAS,MAEbyB,EAAaI,KAAO/C,IACpB2C,EAAaK,YAAa,EAE1B,IAAI3C,EAAO,IAAIL,IAAWyC,EAAME,GAEhC,OADAtC,EAAKqC,KAAO,iBAAmBA,EACxBrC,M,KCrMT4C,E,WACF,aAAe,yBAMfC,gBANc,OAQdC,qBARc,OAUdC,gBAVc,EACVpE,YAAmBC,M,+CAYvB,WACI,GAA+B,OAA3BgE,EAAaI,UAAoB,CACjC,IAAIC,EAAW,IAAIL,EAEnB,OADAA,EAAaI,UAAYC,EAClBA,EAEP,OAAOL,EAAaI,c,KApB1BJ,EAKKI,UAAiC,KAoB5CE,aACI,kBAAM/D,GAAMgE,YAAYC,0BACxB,kCAAMR,EAAaK,SAASJ,kBAA5B,aAAM,EAAkCQ,iBAG7BT,QAAf,SCYO,SAASU,EACZC,GAEkB,IADlBC,EACiB,wDACbC,EAA4B,CAC5BC,GAAIH,EACJI,SAAS,EACTC,UAAU,EACVC,cAAeL,GAEnB,OAAOC,EAGJ,SAASK,EACZC,EACAC,GAEkB,IADlBR,EACiB,wDACbC,EAA4B,CAC5BQ,OAAQF,EACRG,OAAQF,EACRL,SAAS,EACTC,UAAU,EACVO,cAAeX,GAEnB,OAAOC,E,IClECW,EDqESC,E,WACjB,aAAe,yBAyBfC,0BAzBc,OAoKdC,eAAiB,SAACC,GAEd,OADWA,EACEX,eAtKH,KA8KdY,eAAiB,SAACC,GAEd,OADWA,EACEP,eAhLH,KAqLdQ,mBArLc,EACVhG,YAAmBC,MACnBA,KAAK+F,cAAgB,IAAI9F,E,wDAS7B,SAAqB+F,GACjBhG,KAAK0F,qBAAuBM,EAC5BhG,KAAK+F,cAAc7F,WAAaF,KAAK0F,qBAAqBO,U,gCAuB9D,WACI,IAAIC,EAEAA,EAD4B,OAA5B3F,GAAMC,QAAQS,UACHV,GAAM4F,MAAMC,SAEZpG,KAAKqG,wBACZ9F,GAAM4F,MAAMG,iBAAiB/F,GAAM4F,MAAMC,WAGjD,IAAIG,EAAY,CACZC,MAAO,GACPC,MAAO,IASX,OAPAP,EAASQ,aAAY,SAACC,EAAMC,GACxBL,EAAUC,MAAMK,KAAKD,EAAU,eAGnCV,EAASY,aAAY,SAACC,EAAMH,GACxBL,EAAUE,MAAMI,KAAKD,EAAU,eAE5BL,I,qCAYX,SAAgCS,GAc5B,IAbA,IAAIC,EAAYD,EAAS1F,OACrB4F,EAAQ,CACR,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,gBAZgD,WAc3CC,GACL5G,GAAMC,QAAQ4G,mBAAmB1G,SAC7B,SAAC2G,GAAgC,IAAD,EAE5B,GAAkB,cAAdA,EAAJ,CAEA,IAAIC,EAAYJ,EAAMC,GAASE,EAC/BJ,EAAUM,QAAQD,EAAW,CACzBE,WAAY9C,EAAuB4C,GAAW,KAIlD,UAAA/G,GAAMC,QAAQiH,cACTrF,IAAIiF,UADT,SAEM3G,SAAQ,SAAC4E,GACP2B,EAAUS,eAAV,UACOJ,EADP,YACoBhC,GAChBgC,EACAhC,EACA,CACIkC,WAAYtC,EACRoC,EACAhC,GACA,aAvBvB6B,EAAQ,EAAGA,EAAQD,EAAM3E,OAAQ4E,IAAU,EAA3CA,GAgCT,OAAOF,I,iCAGX,SAAoBU,GAAoB,IAAD,IACnC,GACgC,OAA5BpH,GAAMC,QAAQS,WACbV,GAAMqH,cAAclC,qBAFzB,CAOA,IAAImC,EAAUC,IAASC,YAAY/D,EAAaG,YAC5C6D,EAAG,OAAaH,QAAb,IAAaA,OAAb,EAAaA,EAAUI,wBAE1BC,EAAS,IAAInH,KACX4G,EAAMQ,QAAUH,EAAII,MAAQJ,EAAIK,MAAS,EAAI,IAC5CV,EAAMW,QAAUN,EAAIO,KAAOP,EAAIQ,OAAU,EAAI,EAChD,IAGAC,EAAM,UAAGlI,GAAMqH,cAAclC,4BAAvB,aAAG,EAA0C+C,SACvD,GAAKA,EAAL,CAGAP,EAASA,EAAOQ,UAAUD,GAE1B,IAIIE,EAJY,IAAI5H,IAChB0H,EAAOG,SACPV,EAAOW,IAAIJ,EAAOG,UAAUE,aAELC,iBAAV,UACbxI,GAAMqH,cAAc7B,cAAc5F,4BADrB,aACb,EACMyB,UACN,GAGA+G,EAAWpG,OAAS,GACpByG,QAAQC,IAAI,yBAA0BN,GACtCpI,GAAMgE,YAAY2E,0BACdP,EAAW,GAAG5G,OAAOL,MAEzBnB,GAAMgE,YAAY2E,0BAA4B,WAjC9C3I,GAAMgE,YAAY2E,0BAA4B,O,2BAuEtD,SAAcC,GAAwC,IAAxBC,EAAuB,uDAAJ,GACzCzC,EAAOpG,GAAM4F,MAAMC,SAASiD,iBAAiBF,EAAQ,cACzD,GAAMxC,EAAKtD,GAAKsD,EAAKrD,GAAKqD,EAAKpD,EAA/B,CAEA,IAAM+F,EAAY,EAAIF,EAAWG,KAAKC,MAAM7C,EAAKtD,EAAGsD,EAAKrD,EAAGqD,EAAKpD,GAEjEvD,KAAK0F,qBAAqB+D,eACtB,CACIpG,EAAGsD,EAAKtD,EAAIiG,EACZhG,EAAGqD,EAAKrD,EAAIgG,EACZ/F,EAAGoD,EAAKpD,EAAI+F,GAEhB,CAAEjG,EAAGsD,EAAKtD,EAAGC,EAAGqD,EAAKrD,EAAGC,EAAGoD,EAAKpD,GAChC,Q,gCAYR,WAAsB,IAAD,IACjB,UAAAvD,KAAK0F,4BAAL,mBACMgE,QAAQ,eADd,SAGMN,UAAS,SAACO,GACR,OAAOA,EAAKpE,cACNhF,GAAM8B,IAAI7B,QAAQoJ,aAClBrJ,GAAM8B,IAAI7B,QAAQqJ,eAEhC7J,KAAK0F,qBAAqBoE,yB,KEjSbC,E,WACjB,WAAYC,GAAoB,yBAKxBC,UALuB,EAC3BlK,YAAmBC,MACnBA,KAAKiK,KAAOD,E,2CAYhB,SAAerD,EAAeC,GAC1B,IAAIsD,EACCtD,EAGOA,EAAWuD,eAAe,cAIlCD,EAAgBtD,GAHhBsD,EAAgBtD,EAChBrG,GAAM4F,MAAMiE,gBAAgBzD,EAAgBuD,KAJ5CA,EAAgB,GAChB3J,GAAM4F,MAAMiE,gBAAgBzD,EAAgBuD,IAOhDlK,KAAKiK,KAAK7D,SAASmB,QAAQZ,EAAMuD,GACjClK,KAAKiK,KAAKI,iB,sBAQd,SAAgBlB,GACZnJ,KAAKiK,KAAK7D,SAASkE,SAASnB,GAC5BnJ,KAAKiK,KAAKI,iB,qBAWd,SACIhF,EACAC,EACAsB,GAEA,IAAIsD,EACCtD,EAOOA,EAAWuD,eAAe,cAQlCD,EAAgBtD,GAPhBsD,EAAgBtD,EAChBrG,GAAM4F,MAAMoE,gBACRlF,EACAC,EACA4E,KAXJA,EAAgB,GAChB3J,GAAM4F,MAAMoE,gBACRlF,EACAC,EACA4E,IAYRlK,KAAKiK,KAAK7D,SAASoE,QAAQnF,EAAQC,EAAQ4E,GAC3ClK,KAAKiK,KAAKI,iB,sBAQd,SAAgBtD,GACZ/G,KAAKiK,KAAK7D,SAASqE,SAAS1D,GAC5B/G,KAAKiK,KAAKI,mB,KCtEGK,E,WACjB,aAAe,yBAaftE,SAAkB,IAAIuE,IAAM,CACxBC,gBAAgB,EAChBC,OAAO,EACPC,KAAM,eAhBI,KAuGdC,cAvGc,OAuHdC,SAAsB,CAClBC,aAAc,WACdC,eAAgB,IAxHhBnL,YAAmBC,MACnBA,KAAK+K,SAAW,IAAIhB,EAAc/J,M,mDA2BtC,SAAgB2G,EAAcC,GAC1BA,EAAWY,WAAa9C,EAAuBiC,GAAM,K,6BAczD,SAAgBtB,EAAgBC,EAAgBsB,GAC5CA,EAAWY,WAAatC,EAAuBG,EAAQC,GAAQ,K,8BAYnE,SAAiB6F,GAA0B,IAAD,OAQtC,OAPAA,EAAUzE,aAAY,SAACC,EAAMC,GAAP,OAClB,EAAKwD,gBAAgBzD,EAAMC,MAG/BuE,EAAUrE,aAAY,SAACC,EAAMH,EAAYvB,EAAQC,GAA3B,OAClB,EAAKiF,gBAAgBlF,EAAQC,EAAQsB,MAElCuE,I,sBAUX,SAAgBA,GAAuD,IAArCC,EAAoC,uDAAN,KAC5DpL,KAAKoG,SAAWpG,KAAKsG,iBAAiB6E,GAClCC,IACApL,KAAKgL,SAAWI,GAEpB7K,GAAMgE,YAAY8G,QAClB9K,GAAMC,QAAQS,UAAY,KAC1B+C,EAAaG,WAAWmH,6B,0BAQ5B,WACI/K,GAAMgE,YAAY8G,QAClBrH,EAAaG,WAAWmH,6B,oBAkB5B,WACI,OAAOtL,KAAKoG,SAASmF,OAAgC,IAAvBvL,KAAKoG,SAASoF,S,kFC7F/BC,E,WACjB,aAAe,yBAKfC,WAAY,EALE,KAOdC,aAAe,uBAPD,KAUdC,aAAe,uBAVD,KAadC,aAAe,uBAbD,KAedC,qBAAsB,EAfR,KAgBdC,yBAA0B,EAhBZ,KAiBdC,sBAAuB,EAjBT,KAoBdC,+BApBc,OAqBdC,+BArBc,OAuBdC,+BAvBc,OAyBdC,aAAe,CACXC,aAAa,EACbC,SAAU,CAENC,SAAS,EACTC,YAAY,EACZC,KAAM,GAGNC,WAAW,EAGXC,KAAM,GAENC,QAAS,GACTC,QAAS,CACL/H,GAAI,WAERgI,UAAW,KAEfC,SAAU,CACNR,SAAS,EACTC,YAAY,EAGZC,KAAM,GACNC,WAAW,EAGXC,KAAM,GACNC,QAAS,GACTC,QAAS,CACLG,OAAQ,UACRC,KAAM,WAEVH,UAAW,MA3Df/M,YAAmBC,M,kFAyEvB,WACIkN,EACAR,EACAI,GAHJ,gFAKUK,EAAOD,GACPE,EAAS,IAAIC,YACZC,WAAWH,GAPtB,kBAQW,IAAII,SAAQ,SAACC,EAASC,GACzBL,EAAOM,OAAS,WACZ,IAAIC,EAAeP,EAAOvI,OAE1B8I,GADAA,EAAUA,EAAQC,QAAQ,QAAS,OACjBA,QAAQ,MAAO,MACjC,IACQlB,GACAc,EACIK,IAAMF,EAAS,CACXG,QAAS,IACTC,MAAM,EACNC,YAAY,EACZC,kBAAkB,EAClBrB,QAASF,EACTI,eAIZU,EACIK,IAAMF,EAAS,CACXG,QAAS,IACTC,MAAM,EACNC,YAAY,EACZC,kBAAkB,EAClBrB,aAASsB,EACTpB,eAGV,MAAOqB,GACLC,IAAQC,OAAO,CACXzF,SAAU0F,IAASC,MACpBC,KAAK,CACJC,QAAS,UAAYN,EAAIM,QACzBC,OAAQC,IAAOC,OACfC,SAAU,UA1C9B,2C,wHAwDA,oGACU1B,EAAOnN,KAAKmM,2BACZiB,EAAS,IAAIC,YACZC,WAAWH,GAHtB,kBAIW,IAAII,SAAQ,SAACC,EAASC,GACzBL,EAAOM,OAAS,WACZ,IACIF,EAAQsB,IAAKjB,MAAMlD,IAAOyC,EAAOvI,SACnC,MAAOsJ,GACLC,IAAQC,OAAO,CACXzF,SAAU0F,IAASC,MACpBC,KAAK,CACJC,QAAS,UAAYN,EAAIM,QACzBC,OAAQC,IAAOC,OACfC,SAAU,IAEd,EAAKnD,WAAY,QAhBjC,gD,+EAsBA,WACI,OAAO1L,KAAK+O,QACR/O,KAAKiM,0BACLjM,KAAKoM,aAAaW,SAASL,UAC3B1M,KAAKoM,aAAaW,SAASD,a,yBAInC,WACI,OAAO9M,KAAK+O,QACR/O,KAAKkM,0BACLlM,KAAKoM,aAAaE,SAASI,UAC3B1M,KAAKoM,aAAaE,SAASQ,a,uEAWnC,iGACUkC,EAAShP,KAAKoM,aAGd6C,EAAaD,EAAOjC,SAASL,UAC7BsC,EAAOjC,SAASF,QAAQG,OACxBkC,SAASF,EAAOjC,SAASF,QAAQG,QACjCmC,EAAWH,EAAOjC,SAASL,UAC3BsC,EAAOjC,SAASF,QAAQI,KACxBiC,SAASF,EAAOjC,SAASF,QAAQI,MAEnCmC,EAAmB,GACA,GAEjBjJ,EAAQ,IAAIwE,IAAM,CACpBC,gBAAgB,EAChBC,OAAO,EACPC,KAAM,gBAINkE,EAAO3C,YArBf,qBAsBYrM,KAAKoM,aAAaE,SAASI,UAtBvC,kCAwB+B1M,KAAKqP,cAxBpC,SAwBYD,EAxBZ,QAyBsB1O,SAAQ,SAACiG,GACf,IAAIwC,EAASxC,EAAKqI,EAAO1C,SAASO,QAAQ/H,IAAIwK,kBACvC3I,EAAKqI,EAAO1C,SAASO,QAAQ/H,IACpCqB,EAAMoB,QAAQ4B,EAAQxC,MA5BtC,yCAgC+B3G,KAAKqP,cAhCpC,SAgCYD,EAhCZ,QAiCsB1O,SAAQ,SAACiG,GACf,IAAIwC,EAASxC,EAAKqI,EAAO1C,SAASO,QAAQ/H,IAAIwK,WAC1C1I,EAAa2I,OAAOC,OAAO,GAAI7I,UAC5BC,EAAWoI,EAAO1C,SAASO,QAAQ/H,IAC1CqB,EAAMoB,QAAQ4B,EAAQvC,MArCtC,yBA2CsB5G,KAAKyP,cA3C3B,sBA4Cc/O,SAAQ,SAACqG,EAAM2I,GACrB,IAAI1C,EAASjG,EAAKkI,GAAYK,WAC1BrC,EAAOlG,EAAKoI,GAAUG,WAErBnJ,EAAMwJ,QAAQ3C,IACf7G,EAAMoB,QAAQyF,EAAQ,IAErB7G,EAAMwJ,QAAQ1C,IACf9G,EAAMoB,QAAQ0F,EAAM,IAExB9G,EAAMuB,eAAegI,EAAK1C,EAAQC,MAGtC+B,EAAOjC,SAASR,SAAU,EAEtBrB,EAAiB8D,EAAO3C,YACtBkD,OAAOK,KAAKR,EAAU,IACtB,CAAC,MA7DX,kBAiEW,CACHjJ,MAAOA,EACP6E,SAAU,CACNC,aAAc,WACdC,eAAgBA,KArE5B,iD,8HA2EA,8GACsBlL,KAAK6P,WAD3B,OAII,IAHI1J,EADR,OAEQ+E,EAA2B,GAE/B,MAAoBqE,OAAOO,QACvB3J,EAAM4J,kBAAkB5J,EAAMK,QAAQ,KAD1C,eAEI,EAAD,oBAFS5F,EAET,KACCsK,EAAerE,KAAKjG,GAP5B,yBAYW,CACHuF,MAAOA,EACP6E,SAAU,CACNC,aAAc,WACdC,eAAgBA,EAChB8E,kBAAmB,KACnBC,eAAgB,CAAC,YAAa,gBAlB1C,gD,kIAkCA,iGACQ9C,EAAOnN,KAAKiM,0BACZiE,EAAiBlQ,KAAKoM,aAAaW,SACnCL,EAAYwD,EAAexD,UAC3BI,EAAYoD,EAAepD,UAE/BoD,EAAe1D,YAAa,EANhC,kBAQW,IAAIe,SAAc,SAACC,EAASC,GAC/B,GAAKN,EAAL,CAGA,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,WAAWH,GAElBC,EAAOM,OAAS,WAEZ,IAAIyC,EAAe/C,EAAOvI,OAOpBuL,GAHND,GADAA,EAAeA,EAAavC,QAAQ,QAAS,OACjBA,QAAQ,MAAO,OAGhByC,MAAM,MAC3BC,EAAmBF,EACpBG,KAAI,SAACC,GAAD,OAAOA,EAAEzC,UACb0C,MAAM,EAAGL,EAAM7N,OAAS,GAAK6N,EAAM7N,OAAS,IAC5CmO,KAAK,MACV1H,QAAQC,IAAIqH,GAGZ,IACI,IAAMK,EAAKjE,EACLmB,IAAMyC,EAAkB,CACpBxC,QAAS,IACTC,MAAM,EACNC,YAAY,EACZC,kBAAkB,EAClBrB,QAASF,EACTI,UAAWA,IAEfe,IAAMyC,EAAkB,CACpBxC,QAAS,IACTC,MAAM,EACNC,YAAY,EACZC,kBAAkB,EAClBrB,aAASsB,EACTpB,UAAWA,IAErBoD,EAAevD,KAAOgE,EACtBT,EAAetD,QAAU2C,OAAOK,KAAKe,EAAG,IAAIJ,KACxC,SAAC3P,GAAD,gBAAYA,MAIZsP,EAAetD,QAAQrK,QAAU,GACjC2N,EAAerD,QAAQG,OACnBkD,EAAetD,QAAQ,GAC3BsD,EAAerD,QAAQI,KAAOiD,EAAetD,QAAQ,GACrDsD,EAAe3D,SAAU,GACgB,IAAlC2D,EAAetD,QAAQrK,QAC9B2N,EAAerD,QAAQG,OAASkD,EAAerD,QAAQI,KACnDiD,EAAetD,QAAQ,GAC3BsD,EAAe3D,SAAU,IAEzB6B,IAAQC,OAAO,CACXzF,SAAU0F,IAASC,MACpBC,KAAK,CACJC,QAAS,6BACTC,OAAQC,IAAOC,OACfC,SAAU,IAEdqB,EAAe1D,YAAa,GAEhCgB,IACF,SACEY,IAAQC,OAAO,CACXzF,SAAU0F,IAASC,MACpBC,KAAK,CACJC,QAAS,6BACTC,OAAQC,IAAOC,OACfC,SAAU,IAEdqB,EAAe1D,YAAa,EAC5BiB,MAIRL,EAAOwD,QAAU,WACb5H,QAAQ6H,MAAMzD,EAAOyD,OACrBzC,IAAQC,OAAO,CACXzF,SAAU0F,IAASC,MACpBC,KAAK,CACJsC,OAAQ,CACJC,QAAS,kBAAMC,OAAOC,SAASC,UAC/BC,KAAM,gBAEV1C,QAAS,4BACTC,OAAQC,IAAOC,OACfC,SAAU,IAEdpB,UAtGZ,gD,kIAsHA,iGACQN,EAAOnN,KAAKkM,0BACZkF,EAAiBpR,KAAKoM,aAAaE,SACnCI,EAAY0E,EAAe1E,UAC3BI,EAAYsE,EAAetE,UAE/BsE,EAAe5E,YAAa,EANhC,kBAQW,IAAIe,SAAc,SAACC,EAASC,GAC/B,GAAKN,EAAL,CAGA,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,WAAWH,GAElBC,EAAOM,OAAS,WAEZ,IAAIyC,EAAe/C,EAAOvI,OAOpBuL,GAHND,GADAA,EAAeA,EAAavC,QAAQ,QAAS,OACjBA,QAAQ,MAAO,OAGhByC,MAAM,MAC3BC,EAAmBF,EACpBG,KAAI,SAACC,GAAD,OAAOA,EAAEzC,UACb0C,MAAM,EAAGL,EAAM7N,OAAS,GAAK6N,EAAM7N,OAAS,IAC5CmO,KAAK,MACV1H,QAAQC,IAAIqH,GAGZ,IACI,IAAMK,EAAKjE,EACLmB,IAAMyC,EAAkB,CACpBxC,QAAS,IACTC,MAAM,EACNC,YAAY,EACZC,kBAAkB,EAClBrB,QAASF,EACTI,cAEJe,IAAMyC,EAAkB,CACpBxC,QAAS,IACTC,MAAM,EACNC,YAAY,EACZC,kBAAkB,EAClBrB,aAASsB,EACTpB,cAEVsE,EAAezE,KAAOgE,EACtBS,EAAexE,QAAU2C,OAAOK,KAAKe,EAAG,IAAIJ,KACxC,SAAC3P,GAAD,gBAAYA,MAIZwQ,EAAexE,QAAQrK,QAAU,GACjC6O,EAAevE,QAAQ/H,GAAKsM,EAAexE,QAAQ,GACnDwE,EAAe7E,SAAU,IAEzB6B,IAAQC,OAAO,CACXzF,SAAU0F,IAASC,MACpBC,KAAK,CACJC,QAAS,6BACTC,OAAQC,IAAOC,OACfC,SAAU,IAEduC,EAAe5E,YAAa,GAEhCgB,IACF,SACEY,IAAQC,OAAO,CACXzF,SAAU0F,IAASC,MACpBC,KAAK,CACJC,QAAS,6BACTC,OAAQC,IAAOC,OACfC,SAAU,IAEduC,EAAe5E,YAAa,EAC5BiB,MAIRL,EAAOwD,QAAU,WACb5H,QAAQ6H,MAAMzD,EAAOyD,OACrBzC,IAAQC,OAAO,CACXzF,SAAU0F,IAASC,MACpBC,KAAK,CACJsC,OAAQ,CACJC,QAAS,kBAAMC,OAAOC,SAASC,UAC/BC,KAAM,gBAEV1C,QAAS,4BACTC,OAAQC,IAAOC,OACfC,SAAU,IAEdpB,UAhGZ,gD,6DC3biB4D,E,WACjB,aAAe,yBAOfC,cAAe,EAPD,KAYdC,UAAY,GAZE,KAqBdnL,cArBc,EACVrG,YAAmBC,KAAM,CACrBoG,SAAUoL,IAAWC,M,4CAsB7B,WAA4B,IAAD,OACnBC,EAAiB,GACjBC,EAAsB3R,KAAKuR,UAAUK,oBACzC,GAAID,EAAoBE,MAAM,WAAY,CACtC,IAAMC,EAAWH,EAAoBtB,MAAM,SAAS,GAAGtC,OACvD/N,KAAKoG,SAASM,aAAY,SAACC,GACnBA,EAAKiL,oBAAoBG,SAASD,IAClCJ,EAAK7K,KAAKF,WAGf,GAAIgL,EAAoBE,MAAM,gBAAiB,CAClD,IAAIG,EAAcL,EACbtB,MAAM,WAAW,GACjBtC,OACAsC,MAAM,MACL4B,EAAaD,EAAY,GAAGjE,OAC5BmE,EAAcF,EAAY,GAAGjE,OACnC/N,KAAKoG,SAASM,aAAY,SAACC,EAAMC,GAEzBA,EAAWuD,eAAe8H,IACzBrL,EAAWqL,GACPL,oBACAG,SAASG,IAEdR,EAAK7K,KAAKF,UAGQ,KAAnB3G,KAAKuR,WAEZvR,KAAKoG,SAASM,aAAY,SAACC,GACnBA,EAAKiL,oBAAoBG,SAAS,EAAKR,YACvCG,EAAK7K,KAAKF,MAKtB,OAAO+K,M,uBCpDMS,E,WACjB,aAAe,yBAcflR,UAA2B,KAdb,KAkCdmF,cAlCc,EACVrG,YAAmBC,KAAM,CACrBoG,SAAUoL,IAAWC,M,8CAoB7B,SAAWW,GACPpS,KAAKiB,UAAYmR,EACjB7R,GAAM4F,MAAMC,SAASiM,aAAa,UAAWD,GAC7C7R,GAAM4F,MAAMkE,iB,wBAoBhB,WAAkD,IAAD,EACvCiI,EAAc,IAAIhS,IACxB,GAAuB,OAAnBN,KAAKiB,UACL,OAAOqR,EAEX,IAAMjL,EAAYrH,KAAKiB,UAWvB,OATA,UAAAjB,KAAKoG,gBAAL,SAAeM,aAAY,SAAC9F,EAAKgG,GAEzBA,EAAWuD,eAAe9C,GAC1BiL,EAAYzR,IAAID,EAAKgG,EAAWS,IAGhCiL,EAAYzR,IAAID,EAAK,gBAGtB0R,I,8BASX,WACI,OAAO7P,MAAMC,KAAK,IAAI6P,IAAIvS,KAAKwS,aAAaC,a,yBAYhD,WACI,IAAMC,EAAmB,IAAIpS,IAO7B,OANAN,KAAKoH,mBAAmB1G,SAAQ,SAACC,GAC7B+R,EAAiB7R,IAAIF,EAAO,OAEhCX,KAAKwS,aAAa9R,SAAQ,SAACC,EAAOC,GAAS,IAAD,EACtC,UAAA8R,EAAiBtQ,IAAIzB,UAArB,SAA6BkG,KAAKjG,MAE/B8R,I,0BAaX,WACI,IAAIC,EAASC,IAAY,CACrBC,KAAM,EACNC,MAAO9S,KAAKoH,mBAAmB7E,SAE/BqG,EAAW,EACX2H,EAAM,IAAIjQ,IAId,OAHAN,KAAKoH,mBAAmB1G,SAAQ,SAAC2G,GAC7BkJ,EAAI1P,IAAIwG,EAAWsL,EAAO/J,SAEvB2H,I,2BAaX,WAA8D,IAAD,OACrDA,EAAM,IAAIjQ,IAcd,OAbAN,KAAKoH,mBAAmB1G,SAAQ,SAAC2G,GAE7BkJ,EAAI1P,IAAIwG,EAD0B,OAGtCrH,KAAKoG,SAASM,aAAY,SAAC9F,EAAKgG,GAAgB,IAAD,EAC3C,UAAA2J,EAAInO,IAAI,EAAKoQ,aAAapQ,IAAIxB,WAA9B,SAAwDiG,KACpD,IAAI9F,IACA6F,EAAWY,WAAWnE,EACtBuD,EAAWY,WAAWlE,EACtBsD,EAAWY,WAAWjE,OAI3BgN,M,KClJTwC,EACF,aAAe,yBAGfC,aAAuB,UAHT,KAIdC,cAAwB,UAJV,KAKdC,eAAyB,UALX,KAOdhQ,WAAa,GAPC,KASdsI,KAAO,EARHzL,YAAmBC,OAiBjBmT,EACN,aAAe,yBAIfH,aAAe,UAJD,KAMdC,cAAgB,UANF,KAOdC,eAAiB,UAPH,KASdE,aAAuB,EATT,KAWdC,eAAyB,EAXX,KAadnQ,WAAa,EAZTnD,YAAmBC,OAcrBsT,EACF,aAAe,yBAIf9E,MAAO,EAJO,KAKd7K,MAAQ,UALM,KAMd6H,KAAO,EALHzL,YAAmBC,OAQrBuT,EACF,aAAe,yBAIf3J,aAAe,GAJD,KAKdC,YAAc,GALA,KAMd3G,WAAa,GANC,KAOdZ,MAAiC,aAN7BvC,YAAmBC,OAcNwT,EACjB,aAAe,yBAQf7M,UARc,OAUdI,UAVc,OAYd0M,WAZc,OAcdjT,aAdc,OAgBdkT,aAAuB,EAfnB3T,YAAmBC,MACnBA,KAAK2G,KAAO,IAAIoM,EAChB/S,KAAK+G,KAAO,IAAIoM,EAChBnT,KAAKyT,MAAQ,IAAIH,EACjBtT,KAAKQ,QAAU,IAAI+S,G,kBNxEf/N,K,gBAAAA,E,qCAAAA,E,+BAAAA,E,sCAAAA,M,SAMSmO,G,WACjB,aAAe,yBAIfC,kBAAuCpO,EAAkBqO,OAJ3C,KAMdC,aAA8B,KANhB,KAadC,cAA0B,GAbZ,KAedC,aAA8B,KAfhB,KAiBdC,cAA0B,GAjBZ,KAyBdzP,uBAAwC,KAzB1B,KA2Bd0E,0BAA2C,KA3B7B,KA6CdgL,wBAAyC,KA5CrCnU,YAAmBC,M,+DA4BvB,WACI,OAAoC,OAAhCA,KAAKwE,uBACE,KAEAjE,GAAM4F,MAAMC,SAAS+N,UAAUnU,KAAKwE,0B,6CAInD,WACI,OAAoC,OAAhCxE,KAAKwE,uBACE,KAEAxE,KAAKoU,qBAAqBpU,KAAKwE,0B,kCAM9C,SAAqBmC,GAAyB,IAAD,OACrCwN,EAAY5T,GAAM4F,MAAMC,SAAS+N,UAAUxN,GAC/C,cAAOwN,QAAP,IAAOA,OAAP,EAAOA,EAAW5D,KAAI,SAAC8D,GACnB,OAAO,EAAKC,WACRD,EACA,EAAK7P,6B,wBAKjB,SAAW+P,EAAeC,GACtB,IAAIC,EAAyBlU,GAAM4F,MAAMC,SAASW,KAAKwN,EAAOC,GAC9D,QAAWtG,IAAPuG,EAAkB,CAClB,IAAIC,EAA2BnU,GAAM4F,MAAMC,SAASW,KAChDyN,EACAD,GAEJ,YAAarG,IAATwG,EACO,KAEAA,EAGX,OAAOD,I,8BAIf,SAAiB9N,GACb3G,KAAK2U,6BAA6BhO,EAAM,CACpC5B,SAAS,EACTC,UAAU,M,0CAUlB,SACIF,EACAuC,GAED,IADCuN,EACF,uDAD6C,KAEb,OAA1BA,IACAA,EAAwBrU,GAAM4F,MAAMC,SAASiD,iBACzCvE,EACA,eAIR9E,KAAK6U,+BACDxN,EACAuN,K,0CAUR,SACIhU,EACAyG,GAED,IADCuN,EACF,uDAD6C,KAEb,OAA1BA,IACAA,EAAwBrU,GAAM4F,MAAMC,SAAS0O,iBACzClU,EACA,eAGRZ,KAAK6U,+BACDxN,EACAuN,K,2CAUR,SAA8BG,GAC1BxU,GAAM4F,MAAMC,SAAS4O,0BAAyB,SAACrO,EAAMU,GACjD,OAAO,2BACAA,EAAUG,YACVuN,Q,2CAYf,SAA8BA,GAC1BxU,GAAM4F,MAAMC,SAAS6O,0BAAyB,SAACtO,EAAMU,GACjD,OAAO,2BACAA,EAAUG,YACVuN,Q,4CAKf,SAA+BG,EAAmBC,GAC1CD,EAAa/K,eAAe,WAC5BgL,EAAcpQ,QAAUmQ,EAAanQ,QAC9BmQ,EAAa/K,eAAe,cACnCgL,EAAcnQ,SAAWkQ,EAAalQ,Y,mBAQ9C,WACIhF,KAAK8T,aAAe,KACpB9T,KAAK+T,cAAgB,GACrB/T,KAAKgU,aAAe,KACpBhU,KAAKiU,cAAgB,GACrBjU,KAAKwE,uBAAyB,KAC9BxE,KAAKkU,wBAA0B,S,KOjLjCkB,G,iDAGFC,iB,OACAlP,W,OACAyB,mB,OACArD,iB,OACA+Q,Y,OACAC,Y,OACA/U,a,OACA6B,S,wDAEA,WACIrC,KAAKqV,YAAc,IAAIvW,EACvBkB,KAAKmG,MAAQ,IAAIuE,EACjB1K,KAAK4H,cAAgB,IAAInC,EACzBzF,KAAKuE,YAAc,IAAIoP,GACvB3T,KAAKsV,OAAS,IAAI7J,EAClBzL,KAAKuV,OAAS,IAAIlE,EAClBrR,KAAKQ,QAAU,IAAI2R,EACnBnS,KAAKqC,IAAM,IAAImR,K,qBAInB,WACI,GAA2B,OAAvB4B,EAAShR,UAAoB,CAC7B,IAAIC,EAAW,IAAI+Q,EAGnB,OAFA/Q,EAASmR,qBACTJ,EAAShR,UAAYC,EACdA,EAEP,OAAO+Q,EAAShR,c,KA/BtBgR,GACKhR,UAA6B,KAmCxC,IAAM7D,GAAQ6U,GAAS/Q,SAIvB2M,OAAOyE,OAASlV,GAIhBmV,aAAQ,kBAAMnV,GAAM+U,OAAOK,6BAI3BD,aAAQ,kBAAMnV,GAAM+U,OAAOM,6BAE3BF,aACI,kBACKnV,GAAMC,QAAQ4F,SAAW7F,GAAMgV,OAAOnP,SAAW7F,GAAM4F,MAAMC,YAGtEsP,aAAQ,WACiC,IAAD,EAE7B,GAFuB,IAA1BnV,GAAM8B,IAAIqR,YACV,UAAAnT,GAAMqH,cAAclC,4BAApB,SAA0CmQ,kBAE1C,UAAAtV,GAAMqH,cAAclC,4BAApB,SAA0CoQ,oBAIlDxR,aACI,kBAAM/D,GAAMgE,YAAY2E,6BACxB,SAACA,GAEG,GADAF,QAAQC,IAAI,yBAA0BC,GAClCA,EAA2B,CAC3B,IAAI9H,EAAOb,GAAMqH,cAAc7B,cAAcgQ,cACzC7M,GAEJ,GAAI9H,EACeA,EAAKY,SACXC,QAAU,QAGvB1B,GAAMqH,cAAc7B,cAAciQ,0BAK9C1R,aACI,kBAAM/D,GAAMgE,YAAYC,0BACxB,SAACA,GACGwE,QAAQC,IAAI,yBAA0BzE,GACtCjE,GAAM4F,MAAMC,SAASM,aAAY,SAACC,EAAMwO,GAChCxO,IAASnC,EACTjE,GAAMgE,YAAYoQ,6BACdhO,EACA,CAAE5B,SAAS,GACXoQ,EAAc3N,YAGlBjH,GAAMgE,YAAYoQ,6BACdhO,EACA,CAAE5B,SAAS,GACXoQ,EAAc3N,eAI1BjH,GAAM4F,MAAMC,SAASU,aAAY,SAACC,EAAMoO,GAAmB,IAAD,GACtD,UACI5U,GAAMgE,YAAY0R,yCADtB,aACI,EAAqDlE,SACjDhL,IAGJxG,GAAMgE,YAAY2R,6BACdnP,EACA,CAAEhC,SAAS,GACXoQ,EAAc3N,YAGlBjH,GAAMgE,YAAY2R,6BACdnP,EACA,CAAEhC,SAAS,GACXoQ,EAAc3N,eAI1BjH,GAAMqH,cAAclC,qBAAqByQ,aAIjD7R,aACI,kBAAM/D,GAAMgE,YAAYwP,cAAcxD,KAAI,SAAC5J,GAAD,OAAUA,QACpD,SAACoN,GACG/K,QAAQC,IAAI,gBAAiB8K,GAC7BxT,GAAM4F,MAAMC,SAASM,aAAY,SAACC,EAAMwO,GAChCpB,EAAchC,SAASpL,GACvBpG,GAAMgE,YAAYoQ,6BACdhO,EACA,CAAE3B,UAAU,GACZmQ,EAAc3N,YAGlBjH,GAAMgE,YAAYoQ,6BACdhO,EACA,CAAE3B,UAAU,GACZmQ,EAAc3N,eAK1BjH,GAAMqH,cAAclC,qBAAqByQ,aAIjD7R,aACI,kBAAM/D,GAAMgE,YAAYuP,gBACxB,SAACA,GACG9K,QAAQC,IAAI,eAAgB6K,GAC5BvT,GAAM4F,MAAMC,SAASM,aAAY,SAACC,EAAMwO,GAChCrB,IAAiBnN,EACjBpG,GAAMgE,YAAYoQ,6BACdhO,EACA,CAAE3B,UAAU,GACZmQ,EAAc3N,YAGlBjH,GAAMgE,YAAYoQ,6BACdhO,EACA,CAAE3B,UAAU,GACZmQ,EAAc3N,eAI1BjH,GAAMqH,cAAclC,qBAAqByQ,aAIjD7R,aACI,kBAAM/D,GAAMgE,YAAYyP,gBACxB,SAACA,GACGhL,QAAQC,IAAI,eAAgB+K,GAC5BzT,GAAM4F,MAAMC,SAASU,aAAY,SAACC,EAAMoO,GAChCnB,IAAiBjN,EACjBxG,GAAMgE,YAAY2R,6BACdnP,EACA,CAAE/B,UAAU,GACZmQ,EAAc3N,YAGlBjH,GAAMgE,YAAY2R,6BACdnP,EACA,CAAE/B,UAAU,GACZmQ,EAAc3N,eAI1BjH,GAAMqH,cAAclC,qBAAqByQ,aAIlC5V,I,YAAAA,M,kBCnKA6V,gBAAQ,kNAYfC,aAAe,SACXvU,EACAwU,GAEA,MAAa,SAATxU,EAEI,eAAC,IAAD,CACI4M,OAAO,UAEPqC,QAASuF,EAAMC,YACfpF,KAAMrP,GAFDA,GAOT,eAAC,IAAD,CAEIiP,QAASuF,EAAMC,YACfpF,KAAMrP,GAFDA,IA5BN,kDAMf,WACI,IAAI0U,EAAqBlV,aAAKf,GAAM4F,MAAM6E,SAASE,gBAEnD,OADAsL,EAAmBC,QAAQ,QACpBD,IATI,oBAoCf,WAAU,IAAD,SACL,OACI,eAAC,IAAD,CACIE,MACI1W,KAAKsW,MAAMK,SACL3W,KAAK4W,eACLrW,GAAM4F,MAAM6E,SAASE,eAE/BmL,aAAcrW,KAAKqW,aACnBQ,YAAY,EACZC,aAAc,SAAChV,GACX,IAAIkD,EAAoB,SAATlD,EAAkB,KAAOA,EACxC,EAAKwU,MAAMS,SAAS/R,IAV5B,SAaI,eAAC,IAAD,CACImM,KAAI,UAAEnR,KAAKsW,MAAMU,gBAAb,QAAyBhX,KAAK4W,eAAe,WApDlD,GACUK,IAAMC,WADhB,GAERC,aAAe,CAClBR,UAAU,GAHC,KCzCR,OAA0B,iCCoBlC,SAASS,GACZtV,EACAwU,GAEA,OAAO,eAAC,IAAD,CAAqBvF,QAASuF,EAAMC,YAAapF,KAAMrP,GAAxCA,GAGXsU,oBAAQ,kNAOfiB,cAAuC,SACnCC,EACAvV,GAEA,OAAOA,EAAOwV,cAAcC,QAAQF,EAAMC,gBAAkB,GAXjD,4CAaf,WACI,OAAIvX,KAAKsW,MAAMf,OAEP,eAAC,IAAD,CACImB,MAAO1W,KAAKsW,MAAMI,MAClBW,cAAerX,KAAKqX,cACpBhB,aAAce,GACdP,YAAY,EACZC,aAAc9W,KAAKsW,MAAMS,SACzBU,UACI,eAAC,IAAD,CAAUC,UAAU,EAAMvG,KAAK,gBAPvC,SAUI,eAAC,IAAD,CACIA,KAAMnR,KAAKsW,MAAMnF,KACjBwG,MAAO3X,KAAKsW,MAAMqB,UAM1B,eAAC,IAAD,CACIjB,MAAO1W,KAAKsW,MAAMI,MAClBL,aAAce,GACdP,YAAY,EACZC,aAAc9W,KAAKsW,MAAMS,SAJ7B,SAMI,eAAC,IAAD,CACI5F,KAAMnR,KAAKsW,MAAMnF,KACjBwG,MAAO3X,KAAKsW,MAAMqB,cA1CvB,GACQV,IAAMC,WADd,GAERC,aAAe,CAClBQ,OAAO,EACPpC,QAAQ,GAJG,KCPRa,eAAQ,4JAEf,WACI,OACI,uBAAKwB,UAAWC,IAAW,CAACC,IAAQC,SAApC,UACI,uBACIH,UAAWC,IAAW,CAClBC,IAAQE,aACRF,IAAQG,aAHhB,UAMI,sBACIC,MAAM,WACNpT,GAAG,gBACHqT,IAAKC,GACL/P,MAAM,KACNG,OAAO,KACP6P,IAAI,kBAER,uBAAKT,UAAWC,IAAW,CAACC,IAAQQ,iBAApC,UACK,IADL,WAEa,OAGb,eAAC,IAAD,CACI3K,QACI,gBAAC,IAAD,WACI,eAAC,IAAD,CACIwD,KAAK,cACLoH,KAAK,QACLxH,QAAS,WACLxQ,GAAM+U,OAAOvJ,yBAA0B,KAyC/C,eAAC,IAAD,IACA,eAAC,IAAD,CACIwM,KAAK,SACLpH,KAAK,qBACLJ,QAAS,WACLxQ,GAAM+U,OAAOxJ,qBAAsB,KAG3C,eAAC,IAAD,CACIyM,KAAK,SACLpH,KAAK,sBACLJ,QAAS,WACLxQ,GAAM+U,OAAOtJ,sBAAuB,KAG5C,eAAC,IAAD,IACA,eAAC,IAAD,CACIuM,KAAK,WACLpH,KAAK,eACLJ,QAAS,WACLxQ,GAAM8U,YAAYpW,kBAAmB,QAKrD2J,SAAU0F,IAASkK,OAzEvB,SA2EI,eAAC,IAAD,CACIZ,UAAWC,IAAW,CAClBC,IAAQW,OACRX,IAAQY,UAEZH,KAAK,WALT,qBAUJ,eAAC,IAAD,CACI5K,QACI,gBAAC,IAAD,WACI,eAAC,IAAD,CACIwD,KAAK,iBACLoH,KAAK,kBACLxH,QAAS,WACLxQ,GAAM8U,YAAY9V,yBAA0B,KAGpD,eAAC,IAAD,CACI4R,KAAK,iBACLoH,KAAK,OACLxH,QAAS,WACLxQ,GAAM8U,YAAY7V,yBAA0B,QAY5DoJ,SAAU0F,IAASkK,OA1BvB,SA4BI,eAAC,IAAD,CACIZ,UAAWC,IAAW,CAClBC,IAAQW,OACRX,IAAQY,UAEZH,KAAK,SALT,qBAUJ,eAAC,IAAD,CACI9E,MAAM,kBACNkF,QAASpY,GAAM8B,IAAIqR,YACnBkF,SAAU,kBACLrY,GAAM8B,IAAIqR,aAAenT,GAAM8B,IAAIqR,kBAkDhD,eAAC,IAAD,IAUA,uBACIkE,UAAWC,IAAW,CAClBC,IAAQE,aACRF,IAAQe,cAHhB,yBAOI,eAAC,GAAD,CACI9B,SAAU,SAACvW,GACPD,GAAMC,QAAQsY,WAAWtY,IAE7BwW,SAAUzW,GAAMC,QAAQS,YAE5B,uBAAM2W,UAAWE,IAAQiB,iBACzB,eAAC,GAAD,CACIrC,MAAO,CAAC,YAAa,QAAS,OAC9BvF,KAAM5Q,GAAM8U,YAAYvV,YACxBiX,SAAU,SAACpG,GACPpQ,GAAM8U,YAAYvV,YAAc6Q,EAChC3M,EAAaG,WAAWmH,8BAGhC,uBAAMsM,UAAWE,IAAQiB,iBACzB,eAAC,IAAD,CACInB,UAAWC,IAAW,CAClBC,IAAQW,OACRX,IAAQY,UAEZH,KAAK,MACLb,UAAU,EACV3G,QAAS,WACLxQ,GAAM8U,YAAYnW,sBAAuB,KAGjD,eAAC,IAAD,CACI0Y,UAAWC,IAAW,CAClBC,IAAQW,OACRX,IAAQY,UAEZH,KAAK,OACLxH,QAAS,WACLC,OAAOgI,KACH,sDA7Pb,GACE/B,IAAMC,Y,sCCThBd,eAAQ,4JAEf,WACI,OACI,gBAAC,IAAD,CAAM6C,UAAWC,KAAUnY,MAA3B,UACI,eAAC,IAAD,CACI6W,UAAWC,IACPC,IAAQqB,MACRrB,IAAQsB,KACR,mBAEJC,UACIrZ,KAAKsW,MAAMgD,OAAS,aAAe,eAEvCvI,QAAS/Q,KAAKsW,MAAMiD,SATxB,SAWKvZ,KAAKsW,MAAM7S,OAEhB,eAAC,IAAD,CAAU6V,OAAQtZ,KAAKsW,MAAMgD,OAA7B,SACKtZ,KAAKsW,MAAM1U,kBAnBb,GACQqV,IAAMC,Y,OCY9B,IAAMsC,GAAqB,4BACrBC,GAAiB,kBCC1BC,GAAetD,YAAQ,4MAEnBjJ,KAAO,EAAKmJ,MAAMnJ,KAFC,EAInBwM,cAAgB,WACZ,OAAO,EAAKxM,KAAKX,WACb,gBAAC,IAAD,CAAS0L,MAAO,qBAAsBxJ,OAAO,UAA7C,uCAC8B,8CAD9B,+DAKA,iCACI,eAAC,KAAD,CACIkJ,UAAU,uBACVgC,QAAS,EAAKzM,KAAKR,KAAKpK,OACxBsX,gBAAiBtK,OAAOkD,OAAO,EAAKtF,KAAKN,SACpC0D,KAAI,SAACI,GAAD,OAAQ,EAAKxD,KAAKP,QAAQ4K,QAAQ7G,MACtCJ,KAAI,SAACI,GAAD,MAAS,CAAEmJ,KAAM,KAAMC,KAAM,CAACpJ,EAAIA,OAL/C,SAOK,EAAKxD,KAAKP,QAAQ2D,KAAI,SAACI,GAAD,OACnB,eAAC,KAAD,CAEIlN,KAAMkN,EACNqJ,aAAc,SAACC,GAAD,OACV,eAAC,KAAD,UAAO,EAAK9M,KAAKR,KAAKsN,GAAGtJ,OAHxBA,QAQjB,gBAAC,IAAD,2BACkB,EAAKxD,KAAKR,KAAKpK,OADjC,mDA7BO,4CAqCnB,WACI,OAAOvC,KAAK2Z,oBAtCG,GACI1C,IAAMC,YA0CtBd,eAAQ,4MAEf8D,MAAQ,CACJC,SAAS,EACTC,UAAWX,GACXY,WAAW,EACXC,WAAW,EACXxN,UAAW,KAPA,EAWfyN,UAAY,WACR,OAAI,EAAKL,MAAME,YAAcZ,GAErBjZ,GAAM+U,OAAOlJ,aAAaW,SAASR,SACnChM,GAAM+U,OAAOlJ,aAAaE,SAASC,QAEhC,EAAK2N,MAAME,YAAcX,IACzBlZ,GAAM+U,OAAOlJ,aAAaW,SAASR,SAlBnC,EAuBfiO,qBAAuB,WACnB,IAAMlO,EAAW/L,GAAM+U,OAAOlJ,aAAaE,SAG3C,OAAI,EAAK4N,MAAME,YAAcX,GAClB,KAIP,gBAACgB,GAAD,CACIhX,KAAK,QACL6V,OAAQ,EAAKY,MAAMG,UACnBd,SAAU,kBACN,EAAKmB,SAAS,CAAEL,WAAY,EAAKH,MAAMG,aAJ/C,UAOI,wBACA,sBAAKzC,UAAWC,IAAWC,IAAQ6C,eAAnC,SACI,sBACI/C,UAAWC,IACPC,IAAQ8C,YACR9C,IAAQsB,MAHhB,SAMI,eAAC,IAAD,CACIjI,KAAM5Q,GAAM+U,OAAO1J,aACnBiP,cAAe,SAAClT,GACZ,IAAIrC,EAASqC,EAAMrC,QAEdA,EAAOwV,OACRxV,EAAOwV,MAAMvY,OAAS,IAI1BhC,GAAM+U,OAAO1J,aACTtG,EAAOwV,MAAM,GAAGrX,KAEpBlD,GAAM+U,OAAOpJ,0BACT5G,EAAOwV,MAAM,WAKjC,wBACA,eAAC,IAAD,CACIrH,MAAM,cACNkF,QAASrM,EAASI,UAClBkM,SAAU,kBACLtM,EAASI,WAAaJ,EAASI,aAGvCJ,EAASC,SACN,uBAAKqL,UAAU,mBAAf,UACI,eAAC,GAAD,CAAczK,KAAMb,IACpB,wBAFJ,sBAII,eAAC,GAAD,CACIoK,MAAOpK,EAASM,QAChBuE,KAAM7E,EAASO,QAAQ/H,GACvBiS,SAAU,SAACpG,GAAD,OAASrE,EAASO,QAAQ/H,GAAK6L,YAlFlD,EA0FfoK,qBAAuB,WACnB,IAAMhO,EAAWxM,GAAM+U,OAAOlJ,aAAaW,SAC3C,OACI,gBAAC0N,GAAD,CACIhX,KAAK,QACL6V,OAAQ,EAAKY,MAAMI,UACnBf,SAAU,kBACN,EAAKmB,SAAS,CAAEJ,WAAY,EAAKJ,MAAMI,aAJ/C,UAOI,wBACA,sBAAK1C,UAAWC,IAAWC,IAAQ6C,eAAnC,SACI,sBACI/C,UAAWC,IACPC,IAAQ8C,YACR9C,IAAQsB,MAHhB,SAMI,eAAC,IAAD,CACIjI,KAAM5Q,GAAM+U,OAAO3J,aACnBkP,cAAe,SAAClT,GACZ,IAAIrC,EAASqC,EAAMrC,QAEdA,EAAOwV,OACRxV,EAAOwV,MAAMvY,OAAS,IAI1BhC,GAAM+U,OAAO3J,aACTrG,EAAOwV,MAAM,GAAGrX,KACpBlD,GAAM+U,OAAOrJ,0BACT3G,EAAOwV,MAAM,WAKjC,wBACA,eAAC,IAAD,CACIrH,MAAM,cACNkF,QAAS5L,EAASL,UAClBkM,SAAU,kBACL7L,EAASL,WAAaK,EAASL,aAGvCK,EAASR,SACN,uBAAKqL,UAAU,mBAAf,UACI,eAAC,GAAD,CAAczK,KAAMJ,IACpB,wBAFJ,wBAII,eAAC,GAAD,CACI2J,MAAO3J,EAASH,QAChBuE,KAAMpE,EAASF,QAAQG,OACvB+J,SAAU,SAACpG,GAAD,OACL5D,EAASF,QAAQG,OAAS2D,KAEhC,IACH,wBAXJ,wBAaI,eAAC,GAAD,CACI+F,MAAO3J,EAASH,QAChBuE,KAAMpE,EAASF,QAAQI,KACvB8J,SAAU,SAACpG,GAAD,OAAS5D,EAASF,QAAQI,KAAO0D,YAvJpD,8DA+Jf,WAA4B,IAAD,OACvB,OACI,sDAEI,eAAC,GAAD,CACI+F,MAAO,CAAC,IAAK,MAAO,IAAK,WACzBvF,KAAMnR,KAAKka,MAAMpN,UACjBiK,SAAU,SAACiE,GACP,EAAKN,SAAS,CAAE5N,UAAWkO,IAEN,QAAjBA,EACAA,EAAe,KACS,YAAjBA,IACPA,EAAe,KAGnBza,GAAM+U,OAAOlJ,aAAaW,SAASD,UAAYkO,EAC/Cza,GAAM+U,OAAOlJ,aAAaE,SAASQ,UAAYkO,KAEpD,SAlLA,oBAuLf,WAAU,IAAD,OACL,OACI,eAAC,IAAD,CACIC,MAAO,CAAEC,SAAU,QACnB3C,KAAK,SACLe,OAAQ/Y,GAAM+U,OAAOxJ,oBACrBqP,QAAS,WACL5a,GAAM+U,OAAOxJ,qBAAsB,GAEvCoM,MAAM,aAPV,SAUK3X,GAAM+U,OAAO5J,UACV,eAAC,IAAD,IAEA,iCACI,uBACIkM,UAAWC,IACPC,IAAQsD,YACR,iBAHR,oBAOI,eAAC,GAAD,CACI1E,MAAO,CAAC+C,GAAgBD,IACxBrI,KAAMnR,KAAKka,MAAME,UACjBrD,SAAU,SAACsE,GACP9a,GAAM+U,OAAOlJ,aAAaC,cACtBgP,IAAgB5B,IAEpB,EAAKiB,SAAS,CACVN,UAAWiB,OAIvB,eAAC,IAAD,IACCrb,KAAKwa,uBACN,wBACCxa,KAAK+a,uBACN,wBACC/a,KAAKsb,8BAEV,sBAAK1D,UAAWE,IAAQyD,cAAxB,SACI,sBAAK3D,UAAWE,IAAQ0D,sBAAxB,SACI,eAAC,IAAD,CACI5D,UAAWC,IAAW,eACjBC,IAAQ2D,UAAYzb,KAAKua,cAE9B7L,OAAQC,IAAO+M,QACf3K,QAAS,WACLxQ,GAAM+U,OAAO5J,WAAY,EACzBnL,GAAM+U,OACDqG,qBACAC,MAAK,SAACja,GACHpB,GAAM4F,MAAM0V,SACRla,EAAIwE,MACJxE,EAAIqJ,UAGRzK,GAAM+U,OAAO5J,WAAY,EACzBnL,GAAM+U,OAAOxJ,qBAAsB,MAG/CqF,KAAK,wBAtPtB,GACW8F,IAAMC,YCzDzBd,eAAQ,4MAEf8D,MAAQ,CACJ4B,cAAc,GAHH,wDAMf,WACI,OACI,sBAAKlE,UAAWE,IAAQyD,cAAxB,SACI,sBAAK3D,UAAWE,IAAQ0D,sBAAxB,SACI,eAAC,IAAD,CACI5D,UAAWC,IAAW,eACjBC,IAAQ2D,UAAYzb,KAAKka,MAAM4B,eAEpCpN,OAAQC,IAAO+M,QACf3K,QAAS,WACLxQ,GAAM+U,OAAO5J,WAAY,EACzBnL,GAAM+U,OACDyG,sBACAH,MAAK,SAACja,GACHpB,GAAM4F,MAAM0V,SACRla,EAAIwE,MACJxE,EAAIqJ,UAGLzK,GAAMC,QAAQ4F,SAAS4V,aAAa,YACnCzb,GAAMC,QACLsY,WAAWvY,GAAM4F,MAAMC,SAAS6V,aAAa,YAGlD1b,GAAM+U,OAAO5J,WAAY,EACzBnL,GAAM+U,OAAOtJ,sBAAuB,MAGhDmF,KAAK,iBAlCV,oBAyCf,WAAU,IAAD,OACL,OACI,eAAC,IAAD,CACIoH,KAAK,SACLe,OAAQ/Y,GAAM+U,OAAOtJ,qBACrBmP,QAAS,WACL5a,GAAM+U,OAAOtJ,sBAAuB,GAExCkM,MAAM,cANV,SASK3X,GAAM+U,OAAO5J,UACV,eAAC,IAAD,IAEA,uBACIkM,UAAWC,IACPC,IAAQsD,YACR,iBAHR,UAMI,+BACI,sBACIxD,UAAWC,IACPC,IAAQ6C,eAFhB,SAKI,sBACI/C,UAAWC,IACPC,IAAQ8C,YACR9C,IAAQsB,MAHhB,SAMI,eAAC,IAAD,CACIjI,KAAM5Q,GAAM+U,OAAOzJ,aACnBgP,cAAe,SAAClT,GACZ,IAAIrC,EAASqC,EAAMrC,QAEdA,EAAOwV,OACRxV,EAAOwV,MAAMvY,OAAS,IAI1BhC,GAAM+U,OAAOzJ,aACTvG,EAAOwV,MAAM,GAAGrX,KAEpBlD,GAAM+U,OAAOnJ,0BACT7G,EAAOwV,MAAM,GAEjB,EAAKJ,SAAS,CACVoB,cAAc,cAOrC9b,KAAKkc,8BAjGX,GACYjF,IAAMC,Y,8BCG1Bd,eAAQ,4MAEf8D,MAAQ,CACJiC,OAAO,GAHI,qDAYf,WACI,IAAIlV,EAAY1G,GAAM4F,MAAMC,SAAS9E,OAOrC,OANA2F,EAAUP,aAAY,SAAC0V,EAAOxV,UACnBA,EAAU,cAErBK,EAAUH,aAAY,SAACuV,EAAOzV,UACnBA,EAAU,cAEdkI,KAAKwN,MAAMrV,KApBP,6BAuBf,WACI,IAAIsV,EAGE,GACNA,EAAQ1V,KAAK,CAAE4M,MAAO,MAAO7S,IAAK,QAClCL,GAAM4F,MAAM6E,SAASE,eAAeqF,KAAI,SAAC5P,GAErC,OADA4b,EAAQ1V,KAAK,CAAE4M,MAAO9S,EAAOC,IAAKD,IAC3B,QAGX,IAAI6b,EAAajc,GAAM4F,MAAMC,SAASqW,SAClCC,EAAc,GAOlB,OANAF,EAAWhW,MAAM9F,SAAQ,SAACiG,GACtB+V,EAAK7V,KAAL,aACIlC,IAAKgC,EAAK/F,KACP+F,EAAKC,gBAGT,CAAE2V,QAASA,EAASG,KAAMA,KA1CtB,6BA6Cf,WACI,IAQIF,EAAajc,GAAM4F,MAAMC,SAASqW,SAClCC,EAAc,GAOlB,OANAF,EAAWG,MAAMjc,SAAQ,SAACqG,GACtB2V,EAAK7V,KAAK,CACNxB,OAAQ0B,EAAK1B,OACbC,OAAQyB,EAAKzB,YAGd,CAAEiX,QAbH,CACF,CAAE9I,MAAO,SAAU7S,IAAK,UACxB,CAAE6S,MAAO,SAAU7S,IAAK,WAWD8b,KAAMA,KA9DtB,oBAiEf,WACI,OACI,eAAC,IAAD,CACInE,KAAK,WACLe,OAAQ/Y,GAAM8U,YAAYpW,iBAC1Bkc,QAAS,WACL5a,GAAM8U,YAAYpW,kBAAmB,GAEzCiZ,MAAK,eANT,SAQMlY,KAAKka,MAAMiC,MAGT,uBAAKvE,UAAWC,IAAWC,IAAQsD,aAAnC,UACI,gBAAC,IAAD,CAAMwB,aAAa,EAAO3D,UAAWC,KAAU2D,IAA/C,UACI,gBAAC,IAAD,yBACgB,IACZ,eAAC,IAAD,CACItE,KAAK,OACLuE,SAAS,EACT/L,QAAS,WACLC,OAAOgI,KACH,wCAKhB,eAAC,IAAD,IAEA,eAAC,WAAD,CACI0D,KAAM1c,KAAK+c,kBACXC,SAAU,qBACVpF,UAAU,kBACVtS,OAAO,SAJX,SAMI,eAAC,IAAD,sCAGR,wBACA,gBAAC,IAAD,CAAMsX,aAAa,EAAO3D,UAAWC,KAAU2D,IAA/C,UACI,gBAAC,IAAD,wBACe,IACX,eAAC,IAAD,CACItE,KAAK,OACLuE,SAAS,EACT/L,QAAS,WACLC,OAAOgI,KACH,2DAMhB,eAAC,IAAD,IACA,gBAAC,IAAD,WACI,eAAC,WAAD,CACI0D,KAAM1c,KAAKid,kBAAkBP,KAC7BH,QAASvc,KAAKid,kBAAkBV,QAChCW,UAAW,IACXF,SAAU,oBACVpF,UAAU,kBACVtS,OAAO,SANX,SAQI,eAAC,IAAD,mCAEJ,eAAC,IAAD,IACA,eAAC,WAAD,CACIoX,KAAM1c,KAAKmd,kBAAkBT,KAC7BH,QAASvc,KAAKmd,kBAAkBZ,QAChCW,UAAW,IACXF,SAAU,oBACVpF,UAAU,kBACVtS,OAAO,SANX,SAQI,eAAC,IAAD,4CA/DhB,eAAC,IAAD,UA5ED,GACQ2R,IAAMC,Y,mBCPtBd,eAAQ,4MAEf8D,MAAQ,CACJC,SAAS,GAHE,iDAMf,WACI,OAAIna,KAAKka,MAAMC,QAEP,sBAAKvC,UAAU,uBAAf,SACI,gBAAC,KAAD,CACIA,UAAU,yBACVgC,QAAS,GACTwD,eAAgB,CACZC,KAAmBC,MACnBD,KAAmBE,eACnBF,KAAmBG,aAN3B,UASI,eAAC,KAAD,IACA,eAAC,KAAD,IACA,eAAC,KAAD,IACA,eAAC,KAAD,IACA,eAAC,KAAD,IACA,eAAC,KAAD,IACA,eAAC,KAAD,IACA,eAAC,KAAD,IACA,eAAC,KAAD,IACA,eAAC,KAAD,SAKLxd,KAAKsW,MAAM1U,WAjCX,oBAqCf,WAAU,IAAD,OACL,OACI,eAAC,IAAD,CACI2W,KAAK,WACLe,OACuB,SAAnBtZ,KAAKsW,MAAMmH,IACLld,GAAM8U,YAAY9V,wBAClBgB,GAAM8U,YAAY7V,wBAE5Bke,SAAU,WACNC,YAAW,WACP,EAAKjD,SAAS,CACVP,SAAS,MAEd,MAEPgB,QAAS,WACkB,SAAnB,EAAK7E,MAAMmH,IACXld,GAAM8U,YAAY9V,yBAA0B,EAE5CgB,GAAM8U,YAAY7V,yBAA0B,EAEhD,EAAKkb,SAAS,CACVP,SAAS,KAGjBjC,MAAM,aACN+C,MAAO,CAAEC,SAAU,QAzBvB,SA2BI,sBAAKtD,UAAWC,IAAWC,IAAQsD,aAAnC,SACKpb,KAAK4d,sBAnEP,GACkB3G,IAAMC,YCHxC,SAAS2G,GAAmBC,GAC/B,OAAO,SAACnW,GAAD,OACHmW,EAASnW,EAAMrC,OAA4B3E,QAc5C,SAASod,GAAoBnX,GAChC,IAAIjF,EAAM,GACV,IAAK,IAAI0F,KAAaT,EAEdA,EAAWuD,eAAe9C,IACZ,eAAdA,GACc,aAAdA,IAEA1F,GAAO0F,EAAY,MAAQT,EAAWS,GAAa,OAI3D,OAAO1F,EAGJ,SAASqc,GAAoBrd,GAChC,IAAIsd,EAAYC,OAAOvd,GACvB,OAAIwd,MAAMF,GACCtd,EAEAsd,EClBf,IAAIG,GAAiBhI,YAAQ,4MAErB8D,MAAQ,CACJmE,YAAa,GACbC,mBAAmB,EACnBC,iBAAiB,EACjBC,aAAc,MANG,EAwBrBtT,eAAiB3K,GAAM4F,MAAM6E,SAASE,eAxBjB,EA0BrBuT,cAAqB,WAejB,OAdgB,EAAKvT,eAAeqF,KAAI,SAACI,EAAIsJ,GACzC,MAAW,aAAPtJ,EAEI,eAAC,KAAD,CACIlN,KAAMkN,EACNqJ,aAAc,SACV0E,EACAC,GAFU,OAGT,EAAKC,WAAWF,EAAU/N,MAIpC,QAEIkO,QAAO,SAAChX,GACnB,YAAmBqG,IAAZrG,MA1CM,EA8CrB+W,WAAa,SAACF,EAAkBrX,GAC5B,IACIyX,EADiB,EAAKC,cAAcL,GAAU9X,WACxBS,GAE1B,OACI,eAAC,KAAD,CACI1G,MAAOme,EACPlG,SAAU,SAACoG,GAAD,OACN,EAAKC,SAASD,EAAQN,EAAUrX,IAEpC6X,UAAW,SAACF,GAAD,OACP,EAAKC,SAASD,EAAQN,EAAUrX,IAEpC8X,QAASL,KA3DA,EAiErBG,SAAW,SAACte,EAAe+d,EAAkBrX,GACzC,IAAIvC,EAAK,EAAKia,cAAcL,GAAU9d,IACtCL,GAAM4F,MAAMC,SAASgZ,iBACjBta,EACAuC,EACA2W,GAAoBrd,KAtEP,EA0ErB0e,mBAAoC,SAACX,GACjC,OACI,eAAC,KAAD,UACI,eAAC,IAAD,CACI3N,QAAS,WACL,EAAK2J,SAAS,CACV8D,aAAc,EAAKO,cAAcL,GACjCH,iBAAiB,KAGzBhG,KAAK,QACL7J,OAAO,SACPyC,KAAK,SACL2L,SAAS,OAvFJ,EA6FrBwC,gBAAkB,WAAO,IAAD,IACpB,OACI,eAAC,IAAD,CACIC,iBAAiB,SACjBC,kBAAkB,iBAClBjH,KAAK,QACL7J,OAAQC,IAAOC,OACf0K,OAAQ,EAAKY,MAAMqE,gBACnBkB,SAAU,kBAAM,EAAK/E,SAAS,CAAE6D,iBAAiB,KACjDW,UAAW,WAAO,IAAD,EACb3e,GAAM4F,MAAM4E,SAAST,SAArB,UACI,EAAK4P,MAAMsE,oBADf,aACI,EAAyB5d,KAE7B,EAAK8Z,SAAS,CAAE6D,iBAAiB,KAErCtD,MAAO,CAAEC,SAAU,QAbvB,SAeI,kFACqD,IACjD,eAAC,IAAD,oBAAO,EAAKhB,MAAMsE,oBAAlB,aAAO,EAAyB5d,MAFpC,oBAII,eAAC,IAAD,UACKmd,GAAmB,UAChB,EAAK7D,MAAMsE,oBADK,aAChB,EACM5X,cAPlB,wCA9GS,EA8HrBqU,MAAQ,CACJyE,UAAW,UA/HM,iDASrB,WAAqB,IAAD,OACZC,EAA6B,GAWjC,OAVApf,GAAM4F,MAAMC,SAASqW,SAASjW,MAAM9F,SAAQ,SAACiG,IAErCA,EAAK/F,IACAgR,oBACAG,SAAS,EAAKmI,MAAMmE,YAAYzM,sBACV,KAA3B,EAAKsI,MAAMmE,cAEXsB,EAAS9Y,KAAKF,MAGfgZ,IArBU,oBAkIrB,WAAU,IAAD,OACL,OACI,iCACI,eAAC,IAAD,CACIzH,MACI,kDAEJxJ,OAAO,UACP6J,KAAK,OALT,4GAWA,gBAAC,IAAD,WACI,eAAC,IAAD,CACIxH,QAAS,kBAAM,EAAKtM,eACpB8T,KAAK,UACL7J,OAAO,OACPyC,KAAK,YAET,eAAC,IAAD,CACIJ,QAAS,WACLxQ,GAAM8U,YAAYhW,mBAAoB,GAE1CkZ,KAAK,aACL7J,OAAO,UACPyC,KAAK,aAET,eAAC,IAAD,IACA,eAAC,IAAD,CACI8J,MAAO,CAAE5S,MAAO,QAChBuX,cAAc,EACdC,SAAS,SACTjH,SAAUiF,IAAmB,SAACld,GAC1B,EAAK+Z,SAAS,CAAE2D,YAAa1d,OAEjCmf,YAAY,qBACZnf,MAAOX,KAAKka,MAAMmE,YAClB0B,MAAM,OAId,wBAEA,gBAAC,KAAD,CACInI,UAAU,aACVoI,iBAAkB,GAClBpG,QAAS5Z,KAAK+e,cAAcxc,OAHhC,UAKI,eAAC,KAAD,CACIkB,KAAK,GACLuW,aAAcha,KAAKqf,mBAEnBpE,MAAOjb,KAAKib,QAEhB,eAAC,KAAD,CACIxX,KAAK,KAELiL,OAAQC,IAAOsR,QACfjG,aAAc,SAAC0E,GACX,IAAI5Z,EAAK,EAAKia,cAAcL,GAAU9d,IACtC,OAAO,eAAC,KAAD,UAAOkE,OAGrB9E,KAAKye,mBAETze,KAAKsf,yBArMG,GACIrI,IAAMC,YA2MxBd,eAAQ,4JAEf,WACI,OACI,eAAC,GAAD,CAAwBqH,IAAI,OAA5B,SACI,eAAC,GAAD,UALG,GACexG,IAAMC,Y,SCvM7Bd,eAAQ,4MAEf8D,MAAQ,CACJgG,OAAQ,UAAY,EAAK5J,MAAMnF,MAHpB,4CAMf,WAAU,IAAD,OACL,OACI,eAAC,IAAD,CACIsC,MAAOzT,KAAKsW,MAAMnF,KAClBgP,SAAS,aACTC,UAAU,aAHd,SAKI,eAAC,IAAD,CACIvJ,YAAY,EACZH,MAAOnW,GAAM4F,MAAMC,SAASqW,SAASjW,MACrC6Q,cAAe,SACXC,EACAxV,GAEA,OAAOA,EAAKlB,IAAImR,SAASuF,IAE7BjB,aAAc,SAACvU,GAAsC,IAAD,EAChD,OACI,eAAC,IAAD,CACI6L,QAASoQ,GAAmB,UACxBjc,EAAK8E,kBADmB,QACL,IAF3B,SAKI,eAAC,IAAD,CAEIuK,KAAMrP,EAAKlB,IACXmQ,QAAS,WACL,IAAInQ,EAAMkB,EAAKlB,IACf,EAAK8Z,SAAS,CAAEwF,OAAQtf,IACxB,EAAK0V,MAAMsC,SAAShY,KALnBkB,EAAKlB,QAW1B6W,UACI,eAAC,IAAD,CAAUC,UAAU,EAAMvG,KAAK,gBAEnC2F,aAAc,aA/BlB,SAiCI,eAAC,IAAD,CACI3F,KAAMnR,KAAKka,MAAMgG,OACjB7G,UAAU,kCAhDf,GACOpC,IAAMC,YCRhCmJ,GAAiBjK,YAAQ,4MAErB8D,MAAQ,CACJoG,mBAAmB,EACnB/B,iBAAiB,EACjBgC,aAAc,KACdlC,YAAa,KACbmC,aAAc,KACdC,aAAc,MARG,EA8BrBC,mBAAoC,SAAChC,GACjC,OACI,eAAC,KAAD,UACI,eAAC,IAAD,CACI3N,QAAS,WACL,EAAK2J,SAAS,CACV6F,aAAc,EAAKxB,cAAcL,GACjCH,iBAAiB,KAGzBhG,KAAK,QACL7J,OAAO,SACPyC,KAAK,SACL2L,SAAS,OA3CJ,EAiDrB6D,gBAAkB,WAAO,IAAD,MACpB,OACI,eAAC,IAAD,CACIpB,iBAAiB,SACjBC,kBAAkB,iBAClBjH,KAAK,QACL7J,OAAQC,IAAOC,OACf0K,OAAQ,EAAKY,MAAMqE,gBACnBkB,SAAU,kBAAM,EAAK/E,SAAS,CAAE6D,iBAAiB,KACjDW,UAAW,WAAO,IAAD,EACb3e,GAAM4F,MAAM4E,SAASN,SAArB,UACI,EAAKyP,MAAMqG,oBADf,aACI,EAAyB3f,KAE7B,EAAK8Z,SAAS,CAAE6D,iBAAiB,KAXzC,SAcI,kFACqD,IACjD,eAAC,IAAD,oBAAO,EAAKrE,MAAMqG,oBAAlB,aAAO,EAAyB3f,MAFpC,gBAE6D,IACzD,eAAC,IAAD,oBAAO,EAAKsZ,MAAMqG,oBAAlB,aAAO,EAAyBlb,SAHpC,eAIO,eAAC,IAAD,oBAAO,EAAK6U,MAAMqG,oBAAlB,aAAO,EAAyBjb,SAJvC,0CAjES,EA4ErBsb,cAAgB,WACZ,OACI,gBAAC,IAAD,CACItH,OAAQ,EAAKY,MAAMoG,kBACnB/H,KAAK,WACL4C,QAAS,kBAAM,EAAKT,SAAS,CAAE4F,mBAAmB,KAClDO,SAAU,kBACN,EAAKnG,SAAS,CACV8F,aAAc,KACdC,aAAc,QAGtBvI,MAAM,WAVV,UAYI,uBAAKN,UAAWE,IAAQsD,YAAxB,UACI,6BACI,uGAKJ,oCACM,yCADN,mGAKA,gBAAC,IAAD,CAAa2E,MAAM,EAAnB,UACI,eAAC,GAAD,CACI5O,KAAK,cACLyH,SAAU,SAACjY,GACP,EAAK+Z,SAAS,CAAE8F,aAAc7f,OAGtC,eAAC,IAAD,IACA,eAAC,GAAD,CACIwQ,KAAK,cACLyH,SAAU,SAACjY,GACP,EAAK+Z,SAAS,CAAE+F,aAAc9f,UAI1C,+EACE,EAAK4Z,WACH,eAAC,IAAD,CACIrC,MAAM,eACNxJ,OAAO,SACP6J,KAAK,OAHT,uIAWR,sBAAKX,UAAWE,IAAQyD,cAAxB,SACI,uBAAK3D,UAAWE,IAAQ0D,sBAAxB,UACI,eAAC,IAAD,CACIzK,QAAS,kBACL,EAAK2J,SAAS,CAAE4F,mBAAmB,KAF3C,oBAOA,eAAC,IAAD,CACI5R,OAAQC,IAAO+M,QACf3K,QAAS,WACLxQ,GAAM4F,MAAM4E,SAASP,QACjB,EAAK0P,MAAMsG,aACX,EAAKtG,MAAMuG,cAEf,EAAK/F,SAAS,CAAE4F,mBAAmB,KAEvC5I,UAAW,EAAK6C,UATpB,8BA3IC,EAiLrBU,MAAQ,CACJyE,UAAW,UAlLM,iDAWrB,WAAqB,IAAD,OACZC,EAAyC,GAe7C,OAdApf,GAAM4F,MAAMC,SAASqW,SAASE,MAAMjc,SAAQ,SAACqG,KAEpC,EAAKmT,MAAMmE,aACZtX,EAAK1B,OACAuM,oBACAG,SAAS,EAAKmI,MAAMmE,YAAYzM,sBACrC7K,EAAKzB,OACAsM,oBACAG,SAAS,EAAKmI,MAAMmE,YAAYzM,sBACV,KAA3B,EAAKsI,MAAMmE,cAEXsB,EAAS9Y,KAAKE,MAGf4Y,IA3BU,qBA8JrB,WACI,SAAK3f,KAAKka,MAAMsG,eAAiBxgB,KAAKka,MAAMuG,gBAEjCzgB,KAAKka,MAAMsG,eAAiBxgB,KAAKka,MAAMuG,gBAIzClgB,GAAM4F,MAAMC,SAAS0a,QAClB9gB,KAAKka,MAAMsG,aACXxgB,KAAKka,MAAMuG,gBAEdlgB,GAAM4F,MAAMC,SAAS0a,QAClB9gB,KAAKka,MAAMuG,aACXzgB,KAAKka,MAAMsG,kBA3KN,oBAqLrB,WAAU,IAAD,SACL,OACI,iCACI,gBAAC,IAAD,WACI,eAAC,IAAD,CACIzP,QAAS,kBAAM,EAAKtM,eACpB8T,KAAK,UACL7J,OAAO,OACPyC,KAAK,YAET,eAAC,IAAD,CACIJ,QAAS,kBACL,EAAK2J,SAAS,CAAE4F,mBAAmB,KAEvC/H,KAAK,WACL7J,OAAO,UACPyC,KAAK,aAET,eAAC,IAAD,IACA,eAAC,IAAD,CACI8J,MAAO,CAAE5S,MAAO,QAChBuX,cAAc,EACdC,SAAS,SACTjH,SAAUiF,IAAmB,SAACld,GAC1B,EAAK+Z,SAAS,CAAE2D,YAAa1d,OAEjCmf,YAAY,4CACZnf,MAAK,UAAEX,KAAKka,MAAMmE,mBAAb,QAA4B,QAIzC,wBACA,gBAAC,KAAD,CACIzG,UAAU,aACVgC,QAAS5Z,KAAK+e,cAAcxc,OAC5Byd,iBAAkB,GAClBe,WAAYC,KAAWC,KAJ3B,UAMI,eAAC,KAAD,CACIxd,KAAK,GACLuW,aAAcha,KAAK0gB,mBAEnBzF,MAAOjb,KAAKib,QAEhB,eAAC,KAAD,CACIxX,KAAK,SAELiL,OAAQC,IAAO+M,QACf1B,aAAc,SAAC0E,GACX,OACI,eAAC,KAAD,UACK,EAAKK,cAAcL,GAAUrZ,YAK9C,eAAC,KAAD,CACI5B,KAAK,SAELiL,OAAQC,IAAO+M,QACf1B,aAAc,SAAC0E,GACX,OACI,eAAC,KAAD,UACK,EAAKK,cAAcL,GAAUpZ,eAMjDtF,KAAK2gB,kBACL3gB,KAAK4gB,uBA3PG,GACI3J,IAAMC,YAiQxBd,eAAQ,4JAEf,WACI,OACI,eAAC,GAAD,CAAwBqH,IAAI,OAA5B,SACI,eAAC,GAAD,UALG,GACexG,IAAMC,YCjQ7Bd,eAAQ,4MAEf8D,MAAQ,CACJgH,UAAW,GACXta,WAAY,IAJD,EAcfua,aAAe,WACX,OAAO,EAAK5G,UACR,eAAC,IAAD,CACI5M,QACI,oDAEJe,OAAO,UAJX,SAMI,eAAC,IAAD,CAAQ6J,KAAK,OAAO7J,OAAO,UAAUoO,SAAS,MAGlD,eAAC,IAAD,CACInP,QACI,gFAEJe,OAAO,UAJX,SAMI,eAAC,IAAD,CAAQ6J,KAAK,QAAQ7J,OAAO,UAAUoO,SAAS,OA/B5C,EAoCfsE,qBAAuB,SAACxa,GACpB,OAAOA,EAAW2J,KAAI,SAAClJ,GACnB,MAAkB,aAAdA,GAA0C,eAAdA,EAExB,eAAC,IAAD,CAAWoM,MAAOpM,EAAlB,SACI,eAAC,IAAD,CACIuY,cAAc,EACdE,YACI,kCACAzY,EAEJuR,SAAUiF,IAAmB,SAACld,GAC1B,IAAI0gB,EAAW,EAAKnH,MAAMtT,WAC1Bya,EAASha,GAAa2W,GAClBrd,GAEJ,EAAK+Z,SAAS,CAAE9T,WAAYya,OAEhC1gB,MAAO,EAAKuZ,MAAMtT,WAAWS,OAKlC,SA3DJ,EAkHfia,kBAAoB,WAChB/gB,GAAM4F,MAAM6E,SAASE,eAAexK,SAAQ,SAAC6gB,GACzC,IAAIF,EAAW,EAAKnH,MAAMtT,WAC1Bya,EAASE,GAAQ,GACjB,EAAK7G,SAAS,CAAE9T,WAAYya,QAtHrB,6CAOf,WACI,OACK9gB,GAAM4F,MAAMC,SAASuJ,QAAQ3P,KAAKka,MAAMgH,YAChB,KAAzBlhB,KAAKka,MAAMgH,YAVJ,oBAgEf,WAAU,IAAD,OACL,OACI,gBAAC,IAAD,CAAMjI,UAAWC,KAAU2D,IAA3B,UACI,eAAC,IAAD,CAAWpJ,MAAM,cAAc2M,UAAU,aAAzC,SACI,eAAC,IAAD,CACIoB,WAAW,EACX5B,cAAc,EACdE,YAAY,2BACZpR,OAAQ1O,KAAKua,UAAY,UAAY,UACrCkH,aAAczhB,KAAKmhB,eACnBvI,SAAUiF,IAAmB,SAACld,GAAD,OACzB,EAAK+Z,SAAS,CAAEwG,UAAWvgB,OAE/BA,MAAOX,KAAKka,MAAMgH,cAG1B,gBAAC,IAAD,CAAMjI,UAAWC,KAAU2D,IAA3B,UACI,eAAC,IAAD,yBACC7c,KAAKohB,qBACF7gB,GAAM4F,MAAM6E,SAASE,mBAG7B,wBACA,eAAC,IAAD,CACIwD,OAAO,UACPqC,QAAS,WACLxQ,GAAM4F,MAAMiE,gBACR,EAAK8P,MAAMgH,UACX,EAAKhH,MAAMtT,YAEfrG,GAAM4F,MAAM4E,SAASxD,QACjB,EAAK2S,MAAMgH,UACX,EAAKhH,MAAMtT,YAEf,EAAK0P,MAAMoL,QACP,EAAKxH,MAAMgH,UACX,EAAKhH,MAAMtT,YAEfrG,GAAM8U,YAAYhW,mBAAoB,GAK1CqY,UAAW1X,KAAKua,UApBpB,4BAvFG,GACKtD,IAAMC,YCxBnBd,eAAQ,4JAEf,WAAU,IAAD,OACL,OACI,eAAC,IAAD,CACIkD,OAAQ/Y,GAAM8U,YAAYhW,kBAC1BkZ,KAAK,aACL4C,QAAS,WACL5a,GAAM8U,YAAYhW,mBAAoB,GAE1C6Y,MAAM,WANV,SAQI,uBAAKN,UAAWE,IAAQsD,YAAxB,UACI,6BACI,wGAKJ,oCACM,yCADN,mFAIA,eAAC,IAAD,0DACA,wBACA,eAAC,GAAD,CACIsG,QAAS,WACL,EAAKhH,SAAS,CAAE4D,mBAAmB,IACnC,EAAK7Z,0BA5Bd,GACSwS,IAAMC,YCMvBd,eAAQ,4MAEf8D,MAAQ,CACJsG,aAAc,KACdC,aAAc,MAJH,6CAOf,WACI,SAAKzgB,KAAKka,MAAMsG,eAAiBxgB,KAAKka,MAAMuG,gBAEjCzgB,KAAKka,MAAMsG,eAAiBxgB,KAAKka,MAAMuG,gBAIzClgB,GAAM4F,MAAMC,SAAS0a,QAClB9gB,KAAKka,MAAMsG,aACXxgB,KAAKka,MAAMuG,gBAEdlgB,GAAM4F,MAAMC,SAAS0a,QAClB9gB,KAAKka,MAAMuG,aACXzgB,KAAKka,MAAMsG,kBApBZ,oBA0Bf,WAAU,IAAD,OACL,OACI,gBAAC,IAAD,CACIlH,OAAQ/Y,GAAM8U,YAAY/V,kBAC1BiZ,KAAK,WACL4C,QAAS,WACL5a,GAAM8U,YAAY/V,mBAAoB,GAE1CuhB,SAAU,kBACN,EAAKnG,SAAS,CACV8F,aAAc,KACdC,aAAc,QAGtBvI,MAAM,WAZV,UAcI,uBAAKN,UAAWE,IAAQsD,YAAxB,UACI,6BACI,uGAKJ,oCACM,yCADN,mGAKA,gBAAC,IAAD,CAAa2E,MAAM,EAAnB,UACI,eAAC,GAAD,CACI5O,KAAK,cACLyH,SAAU,SAACjY,GACP,EAAK+Z,SAAS,CAAE8F,aAAc7f,OAGtC,eAAC,IAAD,IACA,eAAC,GAAD,CACIwQ,KAAK,cACLyH,SAAU,SAACjY,GACP,EAAK+Z,SAAS,CAAE+F,aAAc9f,UAI1C,+EACEX,KAAKua,WACH,eAAC,IAAD,CACIrC,MAAM,eACNxJ,OAAO,SACP6J,KAAK,OAHT,uIAWR,sBAAKX,UAAWE,IAAQyD,cAAxB,SACI,uBAAK3D,UAAWE,IAAQ0D,sBAAxB,UACI,eAAC,IAAD,CACIzK,QAAS,WACLxQ,GAAM8U,YAAY/V,mBAAoB,GAF9C,oBAOA,eAAC,IAAD,CACIoP,OAAQC,IAAO+M,QACf3K,QAAS,WACLxQ,GAAM4F,MAAM4E,SAASP,QACjB,EAAK0P,MAAMsG,aACX,EAAKtG,MAAMuG,cAEf,EAAKhc,cACLlE,GAAM8U,YAAY/V,mBAAoB,GAE1CoY,UAAW1X,KAAKua,UAVpB,iCA3FL,GACStD,IAAMC,YCEjByK,G,4JACjB,WACI,OACI,uBAAK1G,MAAO,CAAE2G,QAAS,QAAvB,UAEI,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IAQA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,W,GAnBqB3K,IAAMC,W,oBCK5Bd,eAAQ,4MAEf8D,MAAQ,CACJ2H,mBAAoBthB,GAAMqH,cAAcia,qBACxCC,wBAAwB,GAJb,EAQfC,SAAsD9K,IAAM+K,YAR7C,EAcfpa,cAAgBrH,GAAMqH,cAdP,EAgBfqa,kBAAoB,SAChBtb,EACAub,GAEA,IAAI3hB,GAAMgV,OAAOjE,aAGjB,GAAa,OAAT3K,EACApG,GAAMgE,YAAYC,uBAAyB,UACxC,GAAImC,IAASub,EAAc,CAC9B,IAAIC,EAAkBxb,EAAK7B,GAC3BvE,GAAMgE,YAAY2P,wBACd3T,GAAMgE,YAAYC,uBACtBjE,GAAMgE,YAAYC,uBAAyB2d,IA7BpC,EAiCfC,sBAAwB,SAACzb,EAAkBgB,GACvC,IAGQR,EAHJgC,EAASxC,EAAK7B,GACd6C,EAAM0a,SAAW1a,EAAM2a,UAOX,KAFPnb,EAAQ5G,GAAMgE,YAAYwP,cAAcyD,QACrCrO,IAGJ5I,GAAMgE,YAAYwP,cAAcwO,OAAOpb,EAAO,GAG9C5G,GAAMgE,YAAYwP,cAAclN,KAAKsC,GAIzC5I,GAAMgE,YAAYuP,aAAenN,EAAK7B,IAnD/B,EAuDf0d,uBAAyB,SAAC7b,EAAkBgB,GACxCpH,GAAMgE,YAAYuP,aAAenN,EAAK7B,GACtCvE,GAAM8U,YAAYtW,oBAAsB4I,EAAMtE,EAC9C9C,GAAM8U,YAAYrW,oBAAsB2I,EAAMrE,EAC9C/C,GAAM8U,YAAY5V,aAAe,OACjCc,GAAM8U,YAAY3V,qBAAsB,EACxC,EAAK+iB,iBA7DM,EAgEfC,wBAA0B,SAAC/a,GAEvBpH,GAAMgE,YAAYwP,cAAgB,GAClCxT,GAAM8U,YAAY3V,qBAAsB,EACxC,EAAK+iB,iBApEM,EAuEfE,6BAA+B,SAAChb,GAC5BpH,GAAM8U,YAAYtW,oBAAsB4I,EAAMtE,EAC9C9C,GAAM8U,YAAYrW,oBAAsB2I,EAAMrE,EAC9C/C,GAAM8U,YAAY5V,aAAe,aACjCc,GAAM8U,YAAY3V,qBAAsB,EAExC,EAAK+iB,iBA7EM,EA+GfG,YAAc,WACV,GAA+B,OAA3BriB,GAAM8U,YAAYxV,KAClB,OACI,eAAC,KAAD,CAEI4R,IAAK,EAAKsQ,SACVc,UAAW,EAAK3I,MAAM2H,mBACtB/hB,YAAa,EAAKwW,MAAMxW,YAExBgjB,UAAU,KACVC,YAAaxiB,GAAM8B,IAAIsE,KAAK6E,KAC5BwX,UAAW,EAAKC,iBAChBtd,eAAgB,EAAKiC,cAAcjC,eACnCud,eAAgB3iB,GAAM8B,IAAIsE,KAAKzD,WAC/BigB,uBAAuB,EACvBC,gBAAiB,SAACzc,GACd,IAAM0c,EAAS,IAAIC,KAAJ,UAAkB3c,EAAK7B,KAMtC,OALAue,EAAO1f,MAAQpD,GAAM8B,IAAIoR,MAAM9P,MAC/B0f,EAAOE,WAAahjB,GAAM8B,IAAIoR,MAAMjI,KACpC6X,EAAOG,QAAUjjB,GAAM8B,IAAIoR,MAAMjF,KACjC6U,EAAOI,gBAAkB,GACzBJ,EAAOK,WAAWnjB,GAAM8B,IAAIsE,KAAK6E,KAAO,GACjC6X,GAGXM,YAAa,EAAK1B,kBAClB2B,YAAa,EAAKxB,sBAClByB,iBAAkB,EAAKrB,uBACvBsB,cAAe,SAACnd,GACZA,EAAKod,GAAKpd,EAAKtD,EACfsD,EAAKqd,GAAKrd,EAAKrD,EACfqD,EAAKsd,GAAKtd,EAAKpD,GAGnBsC,eAAgB,EAAK+B,cAAc/B,eACnCqe,UAAW,EAAKC,iBAChBC,UAAW,EAAKC,iBAEhBC,uBACI,EAAK3B,6BAET4B,kBAAmB,EAAK7B,wBACxB8B,yBACI,EAAKtK,MAAM4H,uBAGf2C,aAAc,WACV,EAAK7c,cAAc7B,cAAc2e,wBA9JtC,gDAUf,WACI,OAAO1kB,KAAK+hB,SAASI,UAXV,8BAgFf,SAAiB/F,GACb,IAAIzV,EAAOyV,EACX,OAAIzV,EAAK5B,QACExE,GAAM8B,IAAIsE,KAAKuM,eACfvM,EAAK3B,SACLzE,GAAM8B,IAAIsE,KAAKsM,cAEf1S,GAAM8B,IAAIsE,KAAKqM,eAvFf,8BA2Ff,SAAiBqJ,GACb,IAAItV,EAAOsV,EACX,OAAItV,EAAKhC,QACExE,GAAM8B,IAAI0E,KAAKmM,eACfnM,EAAK/B,SACLzE,GAAM8B,IAAI0E,KAAKkM,cAEf1S,GAAM8B,IAAI0E,KAAKiM,eAlGf,8BAqGf,SAAiBqJ,GACb,IAAItV,EAAOsV,EACX,OAAItV,EAAKhC,SAEEgC,EAAK/B,SADLzE,GAAM8B,IAAI0E,KAAKsM,eAIf9S,GAAM8B,IAAI0E,KAAKqM,eA5Gf,oBAsLf,WACI,OAAO,+BAAMpT,KAAK4iB,kBAvLP,sCA0Lf,WACI5iB,KAAK0a,SAAS,CACVmH,mBAAoBthB,GAAMqH,cAAcia,yBA5LjC,2BAgMf,WACIthB,GAAM8U,YAAY1V,qBAAsB,IAjM7B,wCAoMf,SAA2BkB,GACnBA,EACA8jB,SAASC,iBACL,YACArkB,GAAMqH,cAAcid,qBACpB,GAGJF,SAASG,oBACL,YACAvkB,GAAMqH,cAAcid,uBA9MjB,+BAmNf,WACI7kB,KAAK4H,cAAcmd,qBAAqB/kB,KAAKglB,cAC7ChlB,KAAKilB,4BAA2B,GAChCjhB,EAAaG,WAAanE,SAtNf,GACMiX,IAAMC,YA0NnC5S,aACI,kBAAM/D,GAAMgE,YAAYqP,qBACxB,SAACA,GAAuB,IAAD,gBAEnB,OADA5K,QAAQC,IAAR,2BAAgC2K,IACxBA,GACJ,KAAKpO,EAAkBqO,OACnB,UAAA7P,EAAaG,kBAAb,SAAyBuW,SAAS,CAC9BoH,wBAAwB,IAE5B,UAAA9d,EAAaG,kBAAb,SAAyB+gB,sBAAqB,GAC9C,MAEJ,KAAK1f,EAAkB2f,cACnB,UAAAnhB,EAAaG,kBAAb,SAAyBuW,SAAS,CAC9BoH,wBAAwB,IAE5B,UAAA9d,EAAaG,kBAAb,SAAyB+gB,sBAAqB,GAC9C,MAEJ,KAAK1f,EAAkB4f,iBACnB,UAAAphB,EAAaG,kBAAb,SAAyBuW,SAAS,CAC9BoH,wBAAwB,IAE5B,UAAA9d,EAAaG,kBAAb,SAAyB+gB,sBAAqB,GAC9C,MAEJ,KAAK1f,EAAkB6f,iBACnB,UAAArhB,EAAaG,kBAAb,SAAyBuW,SAAS,CAC9BoH,wBAAwB,IAE5B,UAAA9d,EAAaG,kBAAb,SAAyB+gB,sBAAqB,O,aC5P/C9O,eAAQ,4MAEfkP,sBAAwB,SAAC5G,GACrB,OAAO,eAAC,KAAD,UAAOne,GAAM4F,MAAM6E,SAASE,eAAewT,MAHvC,EAMf6G,mBAAqB,SAAC7G,GAClB,IAAIhC,EAAOnc,GAAM4F,MAAMC,SAASiD,iBAC5B,EAAKiN,MAAMkP,OACXjlB,GAAM4F,MAAM6E,SAASE,eAAewT,IAGxC,OACI,eAAC,KAAD,CACI/d,MAAO+b,EACP9D,SAAU,SAACoG,GAAD,OACNze,GAAM4F,MAAMC,SAASgZ,iBACjB,EAAK9I,MAAMkP,OACXjlB,GAAM4F,MAAM6E,SAASE,eAAewT,GACpCM,IAGRE,UAAW,SAACF,GAAD,OACPze,GAAM4F,MAAMC,SAASgZ,iBACjB,EAAK9I,MAAMkP,OACXjlB,GAAM4F,MAAM6E,SAASE,eAAewT,GACpCM,IAGRG,QAASzC,KA7BN,EAkCf+I,gBAAkB,SAACC,GACf,IAAMC,EAAMzH,OAAOwH,GACnB,OAAIxH,OAAOC,MAAMwH,IAAQA,EAAM,GAAKA,EAAM,EAE/BD,EAGJxH,OAAO0H,WAAWD,EAAIrW,YAAYuW,YAAY,IAzC1C,EA2EfvE,kBAAoB,WAChBtd,EAAaC,WAAb,iBA5EW,4CA4Cf,WACI,OACI,sBACI2T,UAAWC,IACP,qBACA,qBAHR,SAMI,sBACID,UAAWC,IACPC,IAAQgO,KACR,sBAHR,SAMI,gBAAC,KAAD,CACIlM,QAASrZ,GAAM4F,MAAM6E,SAASE,eAAe3I,OAC7CwjB,iBAAiB,EAFrB,UAII,eAAC,KAAD,CACItiB,KAAK,aACLuW,aAAcha,KAAKslB,wBAEvB,eAAC,KAAD,CACI7hB,KAAK,QACLuW,aAAcha,KAAKulB,gCApE5B,GACMtO,IAAMC,YCXpBd,eAAQ,4MAsCfkL,kBAAoB,WAChBtd,EAAaE,gBAAb,iBAvCW,4CAEf,WACI,OACI,sBACI0T,UAAWC,IACP,2BACA,qBAHR,SAMI,sBACID,UAAWC,IACPC,IAAQgO,KACR,uBAHR,SAMI,eAAC,KAAD,CAAOlM,QAASrZ,GAAMgE,YAAYwP,cAAcxR,OAAhD,SACKhC,GAAM4F,MAAM6E,SAASE,eAAeqF,KAAI,SAACI,GAAD,OACrC,eAAC,KAAD,CAEIlN,KAAMkN,EACNqJ,aAAc,SAACC,GAAD,OACV,eAAC,KAAD,UACK1Z,GAAM4F,MAAMC,SAASiD,iBAClB9I,GAAMgE,YAAYwP,cACdkG,GAEJtJ,OARPA,gBAnBlB,GACcsG,IAAMC,YCF5Bd,eAAQ,4MAEf4P,oBAAsB,WAClB,OAAOzlB,GAAMgV,OAAO0Q,WAAW1V,KAAI,SAACI,GAChC,OACI,eAAC,IAAD,CACIQ,KAAMR,EACNuV,YAAa,WACT3lB,GAAMgV,OAAOjE,cAAe,EAC5B/Q,GAAMgE,YAAYC,uBAAyBmM,EAC3CpQ,GAAMqH,cAAcue,cAAcxV,UAVvC,4CAiBf,WACI,OACI,sBACIiH,UAAWC,IACP,sBACA,qBAHR,SAMI,uBAAKD,UAAWC,IAAW,UAA3B,UACwC,IAAnCtX,GAAMgV,OAAO0Q,WAAW1jB,QACrB,eAAC,IAAD,CACI6jB,OAAO,EACPxO,UAAWC,IAAW,eACtBwO,aAAc,WACV9lB,GAAMgV,OAAOjE,cAAe,GAJpC,SAOKtR,KAAKgmB,wBAGd,eAAC,IAAD,CACIpG,cAAc,EACdwG,OAAO,EACPvG,SAAS,SACTjH,SAAUiF,IACN,SAACld,GAAD,OAAYJ,GAAMgV,OAAOhE,UAAY5Q,KAEzCmf,YAAY,qBACZnf,MAAOJ,GAAMgV,OAAOhE,qBA7CzB,GACO0F,IAAMC,YCerBd,eAAQ,4MAEf8D,MAAQ,CACJoM,WAAY,KACZ/H,iBAAiB,GAJN,EAWfmC,mBAAoC,SAAChC,GACjC,IAAI4H,EAAa,EAAKnS,UAAUuK,GAChC,OACI,eAAC,KAAD,UACI,eAAC,IAAD,CACI3N,QAAS,WACL,EAAK2J,SAAS,CACV4L,WAAYA,EACZ/H,iBAAiB,KAGzBhG,KAAK,QACL7J,OAAO,SACPyC,KAAK,SACL2L,SAAS,OAzBV,EA+Bf6D,gBAAkB,WACd,OAA8B,OAA1B,EAAKzG,MAAMoM,WACJ,WASApY,KAHNqS,EAAehgB,GAAM4F,MAAMC,SAASW,KACjC,EAAKmT,MAAMoM,WACX,EAAKhQ,MAAMkP,WAGfjF,EAAehgB,GAAM4F,MAAMC,SAASW,KAChC,EAAKuP,MAAMkP,OACX,EAAKtL,MAAMoM,aAKf,eAAC,IAAD,CACI/G,iBAAiB,SACjBC,kBAAkB,iBAClBjH,KAAK,QACL7J,OAAQC,IAAOC,OACf0K,OAAQ,EAAKY,MAAMqE,gBACnBkB,SAAU,kBAAM,EAAK/E,SAAS,CAAE6D,iBAAiB,KACjDW,UAAW,WACP3e,GAAM4F,MAAM4E,SAASN,SAAS8V,GAC9B,EAAK7F,SAAS,CAAE6D,iBAAiB,IACjChe,GAAM8U,YAAY1V,qBAAsB,GAVhD,SAaI,mFACsD,IAClD,eAAC,IAAD,UAAO4gB,IAFX,mBAE0D,IACtD,eAAC,IAAD,UAAO,EAAKrG,MAAMoM,aAHtB,eAGqD,IACjD,eAAC,IAAD,UAAO,EAAKhQ,MAAMkP,SAJtB,0CA5BR,IAAIjF,GApCO,EA2EfgG,kBAAmC,SAAC7H,GAChC,OACI,eAAC,KAAD,CAAM9B,aAAa,EAAnB,SACI,sBACI4J,aAAc,WACVjmB,GAAMqH,cAAcue,cAChB,EAAK7P,MAAMkP,OACX,KAEJjlB,GAAMgE,YAAYyP,aAAezT,GAAMgE,YAAY+P,WAC/C,EAAKgC,MAAMkP,OACX,EAAKrR,UAAUuK,KAR3B,SAYK,EAAKvK,UAAUuK,QA1FjB,6CAOf,WACI,OAAOne,GAAM4F,MAAMC,SAAS+N,UAAUnU,KAAKsW,MAAMkP,UARtC,oBAgGf,WACI,OACI,sBACI5N,UAAWC,IACP,4BACA,qBAHR,SAMI,gBAAC,IAAD,CAAMD,UAAWC,IAAW,sBAA5B,UACI,eAAC,IAAD,CACIU,KAAK,QACLxH,QAAS,WACLxQ,GAAM8U,YAAY1V,qBAAsB,EACxCY,GAAMgE,YAAYyP,aAAe,KACjCzT,GAAMqH,cAAclC,qBAAqByQ,WALjD,mBAUA,gBAAC,IAAD,wBAAenW,KAAKsW,MAAMkP,UAC1B,gBAAC,KAAD,CACI5L,QAAS5Z,KAAKmU,UAAU5R,OACxByd,iBAAkB,GAClBe,WAAYC,KAAWC,KAH3B,UAKI,eAAC,KAAD,CACIxd,KAAK,GACLuW,aAAcha,KAAK0gB,mBAEnBzF,MAAOjb,KAAKib,QAEhB,eAAC,KAAD,CACIxX,KAAK,UAELiL,OAAQC,IAAO+M,QACf1B,aAAcha,KAAKumB,uBAG1BvmB,KAAK2gB,2BAtIP,GACsB1J,IAAMC,YChBpCd,eAAQ,4MAEf8D,MAAQ,CACJuM,iBAAiB,EACjBC,iBAAiB,GAJN,EAOfC,cAAgB,WACZ,OACI,gBAAClM,GAAD,CACIhX,KAAK,QACL6V,OAAQ,EAAKY,MAAMwM,gBACnBnN,SAAU,kBACN,EAAKmB,SAAS,CACVgM,iBAAkB,EAAKxM,MAAMwM,mBALzC,UASI,uBAAK9O,UAAWC,IAAWC,IAAQgO,KAAM,cAAzC,oCAEI,wBACA,eAAC,IAAD,CACIc,IAAK,EACLC,IAAK,IACLC,SAAU,GACVC,cAAe,GACfnO,SAAU,SAACjY,GACPJ,GAAM8B,IAAI7B,QAAQoJ,aAAejJ,EACjCJ,GAAMqH,cAAcof,sBAExBrmB,MAAOJ,GAAM8B,IAAI7B,QAAQoJ,kBAGjC,uBAAKgO,UAAWC,IAAWC,IAAQgO,KAAM,cAAzC,mCAEI,wBACA,eAAC,IAAD,CACIc,IAAK,EACLC,IAAK,IACLC,SAAU,GACVC,cAAe,GACfnO,SAAU,SAACjY,GACPJ,GAAM8B,IAAI7B,QAAQqJ,YAAclJ,EAChCJ,GAAMqH,cAAcof,sBAExBrmB,MAAOJ,GAAM8B,IAAI7B,QAAQqJ,qBA7C9B,EAoDfod,cAAgB,WACZ,OACI,gBAACxM,GAAD,CACIhX,KAAK,QACL6V,OAAQ,EAAKY,MAAMuM,gBACnBlN,SAAU,kBACN,EAAKmB,SAAS,CACV+L,iBAAkB,EAAKvM,MAAMuM,mBALzC,UASI,sBAAK7O,UAAWC,IAAWC,IAAQgO,KAAM,cAAzC,SACI,qBAAG7K,MAAO,CAAEyE,UAAW,QAAvB,2BAEI,uBAAMzE,MAAO,CAAEiM,MAAO,SAAtB,SACI,eAAC,GAAD,CACIxQ,MAAO,CAAC,aAAc,UACtBvF,KAAM5Q,GAAM8B,IAAI7B,QAAQ8B,MACxByU,SAAU,SAACpG,GACPpQ,GAAM8B,IAAI7B,QAAQ8B,MAAQqO,GAE9BgH,OAAO,WAKM,WAA5BpX,GAAM8B,IAAI7B,QAAQ8B,OACf,uBAAKsV,UAAWC,IAAWC,IAAQgO,KAAM,cAAzC,gCAEI,wBACA,eAAC,IAAD,CACIc,IAAK,EACLC,IAAK,GACLC,SAAU,EACVC,cAAe,EACfnO,SAAU,SAACjY,GACPJ,GAAM8B,IAAI7B,QAAQ0C,WAAavC,EAC/BJ,GAAMqH,cAAclC,qBAAqByQ,WAE7CxV,MAAOJ,GAAM8B,IAAI7B,QAAQ0C,oBA3FlC,4CAmGf,WACI,OACI,iCACI,+BACI,0DAEHlD,KAAK2mB,gBACL3mB,KAAKinB,uBA1GH,GACQhQ,IAAMC,Y,UC0BtBd,eAAQ,4JAEf,WAAU,IAAD,OACL,OACI,gBAAC,IAAD,CACI+Q,gBAAiBC,IAAuBC,MACxCC,iBAAiB,6BACjB1e,SAAU0F,IAASiZ,MAHvB,UAKI,eAAC,IAAD,CACIpW,KAAK,KACL8J,MAAO,CACHwI,gBAAiBzjB,KAAKsW,MAAM3S,OAEhCgU,OAAO,IAEX,+BACI,eAAC,KAAD,CACIhU,MAAO3D,KAAKsW,MAAM3S,MAClBiV,SAAU,SAACjI,GACP,EAAK2F,MAAMsC,SAASjI,eApB7B,GACOsG,IAAMC,YC5BrBd,eAAQ,4MAEf8D,MAAQ,CACJsN,gBAAgB,EAChBC,qBAAqB,EACrBC,iBAAiB,EACjBhB,iBAAiB,GANN,4CASf,WAAU,IAAD,OACL,OACI,iCACI,qDAGA,eAACjM,GAAD,CACIhX,KAAK,QACL6V,OAAQtZ,KAAKka,MAAMwN,gBACnBnO,SAAU,kBACN,EAAKmB,SAAS,CACVgN,iBAAkB,EAAKxN,MAAMwN,mBALzC,SASI,uBAAK9P,UAAWC,IAAWC,IAAQgO,KAAM,cAAzC,UACI,mCACI,qBAAG7K,MAAO,CAAEyE,UAAW,QAAvB,2BAEI,uBAAMzE,MAAO,CAAEiM,MAAO,SAAtB,SACI,eAAC,GAAD,CACIvjB,MAAOpD,GAAM8B,IAAI0E,KAAKiM,aACtB4F,SAAU,SAACjI,GACPpQ,GAAM8B,IAAI0E,KAAKiM,aACXrC,EAAGgX,IAEPpnB,GAAMqH,cAAclC,qBAAqByQ,oBAO7D,mCACI,qBAAG8E,MAAO,CAAEyE,UAAW,QAAvB,4BAEI,uBAAMzE,MAAO,CAAEiM,MAAO,SAAtB,SACI,eAAC,GAAD,CACIvjB,MAAOpD,GAAM8B,IAAI0E,KAAKkM,cACtB2F,SAAU,SAACjI,GACPpQ,GAAM8B,IAAI0E,KAAKkM,cACXtC,EAAGgX,IAEPpnB,GAAMqH,cAAclC,qBAAqByQ,oBAO7D,mCACI,qBAAG8E,MAAO,CAAEyE,UAAW,QAAvB,6BAEI,uBAAMzE,MAAO,CAAEiM,MAAO,SAAtB,SACI,eAAC,GAAD,CACIvjB,MACIpD,GAAM8B,IAAI0E,KAAKmM,eAEnB0F,SAAU,SAACjI,GACPpQ,GAAM8B,IAAI0E,KAAKmM,eACXvC,EAAGgX,IAEPpnB,GAAMqH,cAAclC,qBAAqByQ,gCAvElE,GACMc,IAAMC,YCFpBd,eAAQ,4JAEf,WACI,OACI,iCACI,eAAC,IAAD,CACI3C,MAAM,kBACNkF,QAASpY,GAAM8B,IAAIoR,MAAMjF,KACzBoK,SAAU,WACNrY,GAAM8B,IAAIoR,MAAMjF,MAAQjO,GAAM8B,IAAIoR,MAAMjF,KACxCjO,GAAMqH,cAAclC,qBAAqByQ,aAGjD,wBACA,uBAAKyB,UAAWC,IAAWC,IAAQgO,KAAM,cAAzC,wBAEI,wBACA,eAAC,IAAD,CACIc,IAAK,EACLC,IAAK,GACLC,SAAU,EACVC,cAAe,EACfnO,SAAU,SAACjY,GACPJ,GAAM8B,IAAIoR,MAAMjI,KAAO7K,EACvBJ,GAAMqH,cAAclC,qBAAqByQ,WAE7CxV,MAAOJ,GAAM8B,IAAIoR,MAAMjI,OAE3B,wBACA,qBAAGyP,MAAO,CAAEyE,UAAW,QAAvB,yBAEI,uBAAMzE,MAAO,CAAEiM,MAAO,SAAtB,SACI,eAAC,GAAD,CACIvjB,MAAOpD,GAAM8B,IAAIoR,MAAM9P,MACvBiV,SAAU,SAACjI,GACPpQ,GAAM8B,IAAIoR,MAAM9P,MAAQgN,EAAGgX,IAC3BpnB,GAAMqH,cAAclC,qBAAqByQ,4BApC1D,GACOc,IAAMC,YCArBd,eAAQ,4MAEf8D,MAAQ,CACJ0N,WAAY,KACZF,iBAAiB,EACjBF,gBAAgB,EAChBf,iBAAiB,GANN,EASfoB,cAAgB,WACZ,OACI,eAACpN,GAAD,CACIhX,KAAK,QACL6V,OAAQ,EAAKY,MAAMwN,gBACnBnO,SAAU,kBACN,EAAKmB,SAAS,CACVgN,iBAAkB,EAAKxN,MAAMwN,mBALzC,SASI,uBAAK9P,UAAWC,IAAWC,IAAQgO,KAAM,cAAzC,UACI,mCACI,qBAAG7K,MAAO,CAAEyE,UAAW,QAAvB,2BAEI,uBAAMzE,MAAO,CAAEiM,MAAO,SAAtB,SACI,eAAC,GAAD,CACIvjB,MAAOpD,GAAM8B,IAAIsE,KAAKqM,aACtB4F,SAAU,SAACjI,GACPpQ,GAAM8B,IAAIsE,KAAKqM,aACXrC,EAAGgX,IAEPpnB,GAAMqH,cAAclC,qBAAqByQ,oBAO7D,mCACI,qBAAG8E,MAAO,CAAEyE,UAAW,QAAvB,4BAEI,uBAAMzE,MAAO,CAAEiM,MAAO,SAAtB,SACI,eAAC,GAAD,CACIvjB,MAAOpD,GAAM8B,IAAIsE,KAAKsM,cACtB2F,SAAU,SAACjI,GACPpQ,GAAM8B,IAAIsE,KAAKsM,cACXtC,EAAGgX,IAEPpnB,GAAMqH,cAAclC,qBAAqByQ,oBAO7D,mCACI,qBAAG8E,MAAO,CAAEyE,UAAW,QAAvB,6BAEI,uBAAMzE,MAAO,CAAEiM,MAAO,SAAtB,SACI,eAAC,GAAD,CACIvjB,MAAOpD,GAAM8B,IAAIsE,KAAKuM,eACtB0F,SAAU,SAACjI,GACPpQ,GAAM8B,IAAIsE,KAAKuM,eACXvC,EAAGgX,IAEPpnB,GAAMqH,cAAclC,qBAAqByQ,0BAjE9D,EA4Ef2R,aAAe,WACX,OACI,eAACrN,GAAD,CACIhX,KAAK,OACL6V,OAAQ,EAAKY,MAAMsN,eACnBjO,SAAU,kBACN,EAAKmB,SAAS,CACV8M,gBAAiB,EAAKtN,MAAMsN,kBALxC,SASI,uBAAK5P,UAAWC,IAAWC,IAAQgO,KAAM,cAAzC,uBAEI,wBACA,eAAC,IAAD,CACIc,IAAK,EACLC,IAAK,GACLC,SAAU,EACVC,cAAe,EACfnO,SAAU,SAACjY,GACPJ,GAAM8B,IAAIsE,KAAK6E,KAAO7K,EACtBJ,GAAMqH,cAAclC,qBAAqByQ,WAE7CxV,MAAOJ,GAAM8B,IAAIsE,KAAK6E,aAnG3B,EA0Gfyb,cAAgB,WACZ,OACI,eAACxM,GAAD,CACIhX,KAAK,QACL6V,OAAQ,EAAKY,MAAMuM,gBACnBlN,SAAU,kBACN,EAAKmB,SAAS,CACV+L,iBAAkB,EAAKvM,MAAMuM,mBALzC,SASI,uBAAK7O,UAAWC,IAAWC,IAAQgO,KAAM,cAAzC,6BAEI,wBACA,eAAC,IAAD,CACIc,IAAK,EACLC,IAAK,GACLC,SAAU,EACVC,cAAe,EACfnO,SAAU,SAACjY,GACPJ,GAAM8B,IAAIsE,KAAKzD,WAAavC,GAEhCA,MAAOJ,GAAM8B,IAAIsE,KAAKzD,mBAhI3B,4CAuIf,WACI,OACI,iCACI,+BACI,uDAEHlD,KAAK6nB,gBACL7nB,KAAK8nB,eACL9nB,KAAKinB,uBA/IH,GACMhQ,IAAMC,YCDpBd,eAAQ,4JAEf,WACI,OACI,iCACI,eAAC,IAAD,4BACA,gBAAC,IAAD,CAAM2R,SAAS,EAAf,UACI,eAAC,IAAD,CAAKjjB,GAAG,QAAQoT,MAAM,QAAQ8P,MAAO,eAAC,GAAD,MACrC,eAAC,IAAD,CAAKljB,GAAG,QAAQoT,MAAM,QAAQ8P,MAAO,eAAC,GAAD,MACrC,eAAC,IAAD,CACIljB,GAAG,SACHoT,MAAM,SACN8P,MAAO,eAAC,GAAD,MAEX,eAAC,IAAD,CACIljB,GAAG,WACHoT,MAAM,WACN8P,MAAO,eAAC,GAAD,MAGX,eAAC,IAAKC,SAAN,cApBD,GACahR,IAAMC,YCD3Bd,eAAQ,+JAEf,SAAU8R,GACN,OAAQA,GACJ,KAAK1iB,EAAkBqO,OACnB,OAAOlF,IAAO+M,QAElB,KAAKlW,EAAkB2f,cACnB,OAAOxW,IAAOwZ,QAElB,KAAK3iB,EAAkB4f,iBACnB,OAAOzW,IAAOsR,QAElB,KAAKza,EAAkB6f,iBACnB,OAAO1W,IAAOC,UAdX,wBAkBf,SAAWsZ,GACP,OACI,eAAC,IAAD,CAASva,QAASua,EAAMtf,SAAU0F,IAASkK,OAA3C,SACI,eAAC,IAAD,CACIZ,UAAWC,IAAW,CAClBC,IAAQW,OACRX,IAAQY,UAEZvH,KAAM+W,EACNxZ,OAAQ1O,KAAKooB,UAAUF,GACvBG,OAAQ9nB,GAAMgE,YAAYqP,oBAAsBsU,EAChDnX,QAAS,WACLxQ,GAAMgE,YAAYqP,kBAAoBsU,SA9B3C,oBAqCf,WACI,OACI,uBAAKtQ,UAAU,yBAAf,UACK5X,KAAK+gB,WAAWvb,EAAkBqO,QAClC7T,KAAK+gB,WAAWvb,EAAkB2f,eAClCnlB,KAAK+gB,WAAWvb,EAAkB4f,kBAClCplB,KAAK+gB,WAAWvb,EAAkB6f,yBA3ChC,GACgBpO,IAAMC,YCO9Bd,eAAQ,kDAEf,WAAYE,GAAa,IAAD,6BACpB,cAAMA,GACNgS,YAAe,gBAAM,CACjBC,cAAeC,MAHC,EAFT,+CASf,WACI,MAAO,CACHjgB,IAAKhI,GAAM8U,YAAYrW,oBAAsB,GAAK,KAClDoJ,KAAM7H,GAAM8U,YAAYtW,oBAAsB,GAAK,QAZ5C,4BAgBf,WACI,OACI,gBAAC,IAAD,CACI6Y,UAAWC,IACPC,IAAQ2Q,YACR,qBAEJxN,MAAOjb,KAAKuoB,cALhB,UAOI,eAAC,IAAD,CACIrQ,MACK,YACG3X,GAAMgE,YACDC,yBAGjB,eAAC,IAAD,CACI+T,KAAK,eACLpH,KAAK,cACLJ,QAAS,WACLxQ,GAAM4F,MAAM4E,SAAST,SACjB/J,GAAMgE,YACDC,wBAETjE,GAAM8U,YAAY3V,qBAAsB,KAGhD,eAAC,IAAD,IACA,eAAC,IAAD,CACI6Y,KAAK,WACLpH,KAAK,WACLJ,QAAS,WACLxQ,GAAM8U,YAAY/V,mBAAoB,KAG9C,eAAC,IAAD,CACIiZ,KAAK,QACLpH,KAAK,cACLJ,QAAS,WACLxQ,GAAM8U,YAAY1V,qBAAsB,EACxCY,GAAM8U,YAAY3V,qBAAsB,UAxD7C,+BA+Df,WACI,OACI,gBAAC,IAAD,CACIkY,UAAWC,IACPC,IAAQ2Q,YACR,qBAEJxN,MAAOjb,KAAKuoB,cALhB,UAOI,eAAC,IAAD,CACIhQ,KAAK,aACLpH,KAAK,gBACLJ,QAAS,eAEb,eAAC,IAAD,CACIwH,KAAK,gBACLpH,KAAK,gBACLJ,QAAS,eAEb,eAAC,IAAD,SAlFG,kCAuFf,WACI,OACI,gBAAC,IAAD,CACI6G,UAAWC,IACPC,IAAQ2Q,YACR,qBAEJxN,MAAOjb,KAAKuoB,cALhB,UAOI,eAAC,IAAD,CACIhQ,KAAK,aACLpH,KAAK,WACLJ,QAAS,WACLxQ,GAAM8U,YAAYhW,mBAAoB,EACtCkB,GAAM8U,YAAY3V,qBAAsB,KAGhD,eAAC,IAAD,CACI6Y,KAAK,gBACLpH,KAAK,WACLJ,QAAS,WACLxQ,GAAM8U,YAAYhW,mBAAoB,EACtCkB,GAAM8U,YAAY3V,qBAAsB,KAGhD,eAAC,IAAD,SAhHG,oBAqHf,WACI,MAAsB,SAAlBM,KAAKsW,MAAMoS,GACJ1oB,KAAK2oB,iBACa,YAAlB3oB,KAAKsW,MAAMoS,GACX1oB,KAAK4oB,oBACa,eAAlB5oB,KAAKsW,MAAMoS,GACX1oB,KAAK6oB,4BADT,MA1HI,GACW5R,IAAMC,YCHzBd,eAAQ,4MAEf0S,eAAiB,CACb1gB,KAAM,OAHK,EAKf2gB,iBAAmB,CACf3gB,KAAM,WANK,EAQf4gB,cAAgB,CACZC,WAAY,QATD,EAWfC,cAAgB,CACZD,WAAY,SAZD,EAcfE,cAAgB,WACZ5oB,GAAM8U,YAAYzV,0BAA4BW,GAAM8U,YAC/CzV,0BAhBM,4CAkBf,WACI,OACI,uBAAKgY,UAAU,mBAAf,UACI,uBAAKA,UAAU,aAAf,UACI,uBACIA,UAAWC,IACPC,IAAQgO,KACRhO,IAAQsR,YACR,eACA,oBACA,cAEJnO,MACI1a,GAAM8U,YAAYzV,yBACZI,KAAK+oB,iBACL/oB,KAAK8oB,eAXnB,UAcI,wBACA,eAAC,IAAD,CACIlR,UAAU,WACVW,KAAK,eACLxH,QAAS/Q,KAAKmpB,gBAElB,wBACA,eAACE,GAAD,OAEJ,sBACIzR,UAAWC,IACPC,IAAQgO,KACRhO,IAAQsR,YACR,eACA,qBAEJnO,MAAO,CACH5S,MAAO,MACPihB,WAAY,MACZC,aAAc,QACdC,cAAe,QACfP,WAAY,UAZpB,SAeI,eAAC,IAAD,CACI1Q,KAAK,OACLX,UAAU,UACV7G,QAAS/Q,KAAKmpB,cACdlO,MACI1a,GAAM8U,YAAYzV,yBACZI,KAAKgpB,cACLhpB,KAAKkpB,qBAU1B3oB,GAAMgE,YAAYC,wBAC4B,IAA3CjE,GAAMgE,YAAYwP,cAAcxR,QAC5B,eAACknB,GAAD,CACIjE,OACIjlB,GAAMgE,YAAYC,yBASU,IAA3CjE,GAAMgE,YAAYwP,cAAcxR,QAC7B,eAACmnB,GAAD,IAGJ,eAAC,GAAD,IACCnpB,GAAM8U,YAAY3V,qBACfa,GAAM8U,YAAY5V,cACd,eAAC,GAAD,CACIipB,GAAInoB,GAAM8U,YAAY5V,eAGjCc,GAAM8U,YAAY1V,qBACfY,GAAMgE,YAAYuP,cACd,eAAC,GAAD,CACI0R,OAAQjlB,GAAMgE,YAAYuP,eAGtC,eAAC,GAAD,WA3GG,GACSmD,IAAMC,YCkBvByS,OAlBf,WACI,OACI,uBACI/R,UAAWC,IAAW,aAClB,eAAe,GACdC,IAAQ8R,MAAO,IAHxB,UAMI,eAAC,GAAD,IACA,uBAAMhS,UAAU,OAAhB,SACI,eAAC,GAAD,MAEJ,eAAC,GAAD,IACA,eAAC,GAAD,QCdGiS,GAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBnO,MACjB,YAAkD,IAA/CoO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,mCCExBhiB,IAASuiB,OACL,eAAC,IAAMC,WAAP,UACI,eAAC,GAAD,MAEJ3F,SAAS4F,eAAe,SAG5BV,O","file":"static/js/main.2780094a.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // Right Click Position\n\n    rightClickPositionX = 30;\n    rightClickPositionY = 30;\n\n    // Dialog\n    exportDialogOpen = false;\n    preferenceDialogOpen = false;\n    statisticsDialogOpen = false;\n    helpDialogOpen = false;\n\n    AddNodeDialogOpen = false;\n    AddEdgeDialogOpen = false;\n\n    nodeDataSheetDialogOpen = false;\n    edgeDataSheetDialogOpen = false;\n\n    // Panel\n\n    rightClickOn = null as null | \"Node\" | \"Cluster\" | \"Background\";\n    rightClickPanelOpen = false;\n    deleteEdgePanelOpen = false;\n\n    isGraphOptionsCardHidden = true;\n\n    // 3D Graph\n\n    view = \"3D\";\n    controlType: \"trackball\" | \"orbit\" | \"fly\" = \"trackball\";\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport { SphereGeometry } from \"three\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport { SceneUtils } from \"three/examples/jsm/utils/SceneUtils.js\";\nimport State from \".\";\n\nexport default class Cluster3dObjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * the THREE.js WebGL Scene of the visualization\n     *\n     */\n    threeScene!: THREE.Scene;\n\n    /**\n     * all the clusters should form a 3D Group to be imported into Scene\n     * if no cluster attribute is set, this will be set to null\n     *\n     * each children is a THREE.Mesh\n     *\n     * @type {THREE.Group}\n     */\n    fusionClusterObjects: THREE.Group | null = null;\n\n    /**\n     * the map between attribute value and its corresponding Mesh Group\n     * if you want to update the geometry, plz update all the children inside which Mesh Group\n     * if no cluster attribute is set, this will be set to null\n     *\n     * @type {(Map<string | number, THREE.Group> | null)}\n     */\n    clusterObjectsMap: Map<string | number, THREE.Mesh> | null = null;\n\n    /**\n     * create empty BufferGeometry and mesh with colour\n     * then initialize $fusionClusterObjects and $clusterObjectsMap with it\n     * and then add the THREE.Group to the Scene\n     *\n     */\n    initEmptyMapAndFusion() {\n        let initialMap = new Map<string | number, THREE.Mesh>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            initialMap.set(\n                key,\n                this.createMesh(new THREE.BufferGeometry(), key)\n            );\n        });\n\n        this.clusterObjectsMap = initialMap;\n        this.fusionClusterObjects = new THREE.Group();\n        initialMap.forEach((value) => {\n            this.fusionClusterObjects?.add(value);\n        });\n        this.threeScene.add(this.fusionClusterObjects);\n    }\n\n    /**\n     * should be called on each render frame\n     * will update the geometry inside each cluster object\n     *\n     * if is the first time (both are null), will run initEmptyMapAndFusion() first\n     *\n     * if meet with clusterBy == null, will dispose all Object3d\n     *\n     */\n    clusterDelegation() {\n        if (State.cluster.clusterBy === null) {\n            if (this.fusionClusterObjects) {\n                this.threeScene.remove(this.fusionClusterObjects);\n                this.dispose();\n            }\n            return;\n        } else {\n            if (\n                this.fusionClusterObjects == null ||\n                this.convexHullObjects == null\n            ) {\n                this.initEmptyMapAndFusion();\n            }\n            this.clusterObjectsMap?.forEach(\n                (mesh: THREE.Mesh, key: string | number) => {\n                    mesh.geometry.copy(this.convexHullObject(key));\n                }\n            );\n        }\n    }\n\n    getObjectById(uuid: string): THREE.Mesh | null {\n        let res: THREE.Object3D | null = null;\n        this.fusionClusterObjects?.children.every((item: THREE.Object3D) => {\n            if (item.uuid === uuid) {\n                res = item;\n                return false;\n            } else {\n                return true;\n            }\n        });\n        return res;\n    }\n\n    resetDefaultMaterial() {\n        this.fusionClusterObjects?.children.forEach(\n            (object: THREE.Object3D) => {\n                let mesh = object as THREE.Mesh;\n                let material = mesh.material as THREE.Material;\n                material.opacity = 0.15;\n            }\n        );\n    }\n\n    /**\n     * dispose the geometries and materials in every clusterObject\n     * and set these props to be null, which indicates that no additional 3d object is added into Scene\n     *\n     */\n    dispose() {\n        this.clusterObjectsMap?.forEach((mesh: THREE.Mesh) => {\n            let material = mesh.material as THREE.Material;\n            material.dispose();\n            mesh.geometry.dispose();\n        });\n        this.clusterObjectsMap = null;\n        this.fusionClusterObjects = null;\n    }\n\n    /**\n     * the map between the value of the cluster and the BufferGeometry that this cluster created\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Group>)}\n     */\n    get convexHullObjects(): Map<string | number, THREE.BufferGeometry> {\n        let newMap = new Map<string | number, THREE.BufferGeometry>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            newMap.set(key, this.convexHullObject(key));\n        });\n        return newMap;\n    }\n\n    /**\n     * get the computed convexHull BufferGeometry of the specified attribute value\n     *\n     * @param {(string | number)} key\n     * @returns {*}  {THREE.BufferGeometry}\n     */\n    convexHullObject(key: string | number): THREE.BufferGeometry {\n        let points = State.cluster.attributePoints.get(key) as THREE.Vector3[];\n        if (State.css.cluster.shape === \"convexHull\") {\n            if (!points || points.length < 4) {\n                return new THREE.BufferGeometry();\n            } else {\n                return new ConvexGeometry(Array.from(points));\n            }\n        } else {\n            // State.css.clusterShape === \"Sphere\"\n            let convexGeometry = new ConvexGeometry(Array.from(points));\n            convexGeometry.computeBoundingSphere();\n            let sphereGeo = convexGeometry.boundingSphere as THREE.Sphere;\n            let sphere = new SphereGeometry(\n                sphereGeo.radius,\n                State.css.cluster.resolution,\n                State.css.cluster.resolution\n            );\n            sphere.translate(\n                sphereGeo.center.x,\n                sphereGeo.center.y,\n                sphereGeo.center.z\n            );\n            return sphere;\n        }\n    }\n\n    /**\n     * create a Three.Group, which contains 2 Three.Mesh, of the input geometry\n     *\n     * @private\n     * @param {THREE.BufferGeometry} geom\n     * @param {(string | number)} name\n     * @returns {*}  {THREE.Group}\n     *\n     * @see THREE.Mesh\n     */\n    private createMesh(\n        geom: THREE.BufferGeometry,\n        name: string | number\n    ): THREE.Mesh {\n        const meshMaterial = new THREE.MeshBasicMaterial({\n            color: State.cluster.attributeColor.get(name),\n            transparent: true,\n            opacity: 0.15,\n        });\n        meshMaterial.side = THREE.DoubleSide; //将材质设置成正面反面都可见\n        meshMaterial.depthWrite = false;\n\n        let mesh = new THREE.Mesh(geom, meshMaterial);\n        mesh.name = \"THREE_CLUSTER_\" + name;\n        return mesh;\n    }\n}\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport State from \"../state\";\n\nclass ComponentRef {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    static _instance: ComponentRef | null = null;\n\n    nodeDetail!: React.Component | any;\n\n    multiNodeDetail!: React.Component | any;\n\n    visualizer!: React.Component | any;\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (ComponentRef._instance === null) {\n            let instance = new ComponentRef();\n            ComponentRef._instance = instance;\n            return instance;\n        } else {\n            return ComponentRef._instance;\n        }\n    }\n}\n\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    () => ComponentRef.instance.nodeDetail?.forceUpdate()\n);\n\nexport default ComponentRef.instance;\n","import ReactDOM from \"react-dom\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport State from \".\";\nimport {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport * as THREE from \"three\";\nimport Cluster3dObjectStore from \"./Cluster3dObjectStore\";\nimport { Object3D } from \"three\";\nimport ComponentRef from \"../components/ComponentRef\";\n\n/**\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n *\n *\n * @interface ICustomNodeObject\n * @extends {NodeObject}\n */\nexport interface ICustomNodeObject extends NodeObject {\n    hovered: boolean;\n    selected: boolean;\n    isClusterNode?: boolean;\n}\n/**\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n *\n *\n * @interface ICustomLinkObject\n * @extends {LinkObject}\n */\nexport interface ICustomLinkObject extends LinkObject {\n    hovered: boolean;\n    selected: boolean;\n    isClusterLink?: boolean;\n}\n\nexport function createCustomNodeObject(\n    _id: string,\n    _cluster: boolean = false\n): ICustomNodeObject {\n    let result: ICustomNodeObject = {\n        id: _id,\n        hovered: false,\n        selected: false,\n        isClusterNode: _cluster,\n    };\n    return result;\n}\n\nexport function createCustomLinkObject(\n    _source: string,\n    _target: string,\n    _cluster: boolean = false\n): ICustomLinkObject {\n    let result: ICustomLinkObject = {\n        source: _source,\n        target: _target,\n        hovered: false,\n        selected: false,\n        isClusterLink: _cluster,\n    };\n    return result;\n}\n\nexport default class GraphDelegate {\n    constructor() {\n        makeAutoObservable(this);\n        this.clusterObject = new Cluster3dObjectStore();\n    }\n\n    /**\n     * assign the force-graph methods to this class\n     * should be called as long as the visualizer react component is mounted\n     *\n     * @param {ForceGraphMethods} _graphDelegateMethods\n     */\n    mountDelegateMethods(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.clusterObject.threeScene = this.graphDelegateMethods.scene();\n\n\n    }\n\n    /**\n     * the ForceGraphMethods exposed by the visualization force-graph\n     *\n     * @see ForceGraphMethods\n     *\n     * @type {ForceGraphMethods}\n     */\n    graphDelegateMethods!: ForceGraphMethods;\n\n    /**\n     * compute the delegate graph that will be used by the ForceGraph3D\n     * will add invisible cluster nodes and edges to balance the clustered graph and adjust force\n     * the NodeObject and LinkObject inside attributes (named _visualize) will be used.\n     *\n     * nodes and edges with the show=false will be ignored in this case\n     *\n     */\n\n    visualizationGraph() {\n        let newGraph: Graph;\n        if (State.cluster.clusterBy === null) {\n            newGraph = State.graph.rawGraph;\n        } else {\n            newGraph = this.addInvisibleClusterNode(\n                State.graph.decorateRawGraph(State.graph.rawGraph)\n            );\n        }\n        let tempGraph = {\n            nodes: [] as ICustomLinkObject[],\n            links: [] as ICustomLinkObject[],\n        };\n        newGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        newGraph.forEachEdge((edge, attributes) => {\n            tempGraph.links.push(attributes[\"_visualize\"]);\n        });\n        return tempGraph;\n    }\n\n    /**\n     * return a new graph that contains the invisible clusters, formed as nodes\n     * as well as the edges that connected to the cluster node to simulate the force within the same cluster\n     * the new graph is a deep copy of the old node, so no worries of the original graph DS\n     *\n     * @private\n     * @param {Graph} oldGraph\n     * @returns {*}  {Graph}\n     */\n    private addInvisibleClusterNode(oldGraph: Graph): Graph {\n        let graphCopy = oldGraph.copy();\n        let names = [\n            \"_CLUSTER_1_\",\n            \"_CLUSTER_2_\",\n            \"_CLUSTER_3_\",\n            \"_CLUSTER_4_\",\n            \"_CLUSTER_5_\",\n            \"_CLUSTER_6_\",\n            \"_CLUSTER_7_\",\n            \"_CLUSTER_8_\",\n            \"_CLUSTER_9_\",\n            \"_CLUSTER_10_\",\n        ];\n        for (let index = 0; index < names.length; index++) {\n            State.cluster.getAttributeValues.forEach(\n                (attribute: string | number) => {\n                    // if a node does not belong to any cluster, a undefined will be formed with no cluster to generate\n                    if (attribute === \"undefined\") return;\n\n                    let clusterID = names[index] + attribute;\n                    graphCopy.addNode(clusterID, {\n                        _visualize: createCustomNodeObject(clusterID, true),\n                    });\n\n                    // add edges to simulate the force of the same cluster\n                    State.cluster.attributeKeys\n                        .get(attribute)\n                        ?.forEach((target) => {\n                            graphCopy.addEdgeWithKey(\n                                `${clusterID}-${target}`,\n                                clusterID,\n                                target,\n                                {\n                                    _visualize: createCustomLinkObject(\n                                        clusterID,\n                                        target,\n                                        true\n                                    ),\n                                }\n                            );\n                        });\n                }\n            );\n        }\n\n        return graphCopy;\n    }\n\n    onDocumentMouseMove(event: MouseEvent) {\n        if (\n            State.cluster.clusterBy === null ||\n            !State.graphDelegate.graphDelegateMethods\n        ) {\n            State.interaction.currentlyHoveredClusterId = null;\n            return;\n        }\n        let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n        let box = (<Element>element)?.getBoundingClientRect();\n\n        let vector = new THREE.Vector3(\n            ((event.clientX - box.left) / box.width) * 2 - 1,\n            -((event.clientY - box.top) / box.height) * 2 + 1,\n            0.5\n        );\n\n        let camera = State.graphDelegate.graphDelegateMethods?.camera();\n        if (!camera) {\n            return;\n        }\n        vector = vector.unproject(camera);\n\n        let raycaster = new THREE.Raycaster(\n            camera.position,\n            vector.sub(camera.position).normalize()\n        );\n        let intersects = raycaster.intersectObjects(\n            State.graphDelegate.clusterObject.fusionClusterObjects\n                ?.children as Object3D[],\n            true\n        );\n\n        if (intersects.length > 0) {\n            console.log(\"currentlyHoveredNodeId\", intersects);\n            State.interaction.currentlyHoveredClusterId =\n                intersects[0].object.uuid;\n        } else {\n            State.interaction.currentlyHoveredClusterId = null;\n        }\n    }\n\n    /**\n     * determine whether this Node is the cluster delegate node\n     *\n     * @param {CustomNodeObject} nodeObject\n     */\n    nodeVisibility = (nodeObject: NodeObject) => {\n        let node = nodeObject as ICustomNodeObject;\n        return !node.isClusterNode;\n    };\n\n    /**\n     * determine whether this edge is the cluster delegate edge\n     *\n     * @param {CustomLinkObject} nodeObject\n     */\n    linkVisibility = (linkObject: LinkObject) => {\n        let link = linkObject as ICustomLinkObject;\n        return !link.isClusterLink;\n    };\n\n    ////\n\n    clusterObject: Cluster3dObjectStore;\n\n    ////\n\n    /**\n     * this will re-position the camera to focus on the specified node\n     * if distance not specified, a default of 40 will be used\n     *\n     * @param {string} nodeId the node to be focused\n     * @param {number} [distance=40] the ending distance between the camera and the node\n     * @returns {*}\n     */\n    cameraFocusOn(nodeId: string, distance: number = 40) {\n        let node = State.graph.rawGraph.getNodeAttribute(nodeId, \"_visualize\");\n        if (!(node.x && node.y && node.z)) return;\n        // Aim at node from outside it\n        const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n        this.graphDelegateMethods.cameraPosition(\n            {\n                x: node.x * distRatio,\n                y: node.y * distRatio,\n                z: node.z * distRatio,\n            }, // new position\n            { x: node.x, y: node.y, z: node.z }, // lookAt ({ x, y, z })\n            3000 // ms transition duration\n        );\n    }\n\n    ////\n\n    /**\n     * set the force inside each cluster in the ForceGraph\n     *\n     * @param {number} force the force to be set\n     * @param {number} _default default force of other links\n     */\n    updateClusterForce() {\n        this.graphDelegateMethods\n            ?.d3Force(\"link\")\n            //@ts-ignore\n            ?.distance((link: CustomLinkObject) => {\n                return link.isClusterLink\n                    ? State.css.cluster.clusterForce\n                    : State.css.cluster.normalForce;\n            });\n        this.graphDelegateMethods.d3ReheatSimulation();\n    }\n}\n","import { Attributes } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\n\nexport enum VisualizationMode {\n    Normal = \"Normal\", // normal state\n    ClusterSelection = \"Cluster Selection\", // selecting the cluster to be Merged\n    NodeSelection = \"Node Selection\", // multi-selecting the node\n    ClusterSplitting = \"Cluster Splitting\", // drawing the line to split the cluster\n}\nexport default class InteractionStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    visualizationMode: VisualizationMode = VisualizationMode.Normal;\n\n    selectedNode: string | null = null;\n    /**\n     * the currently selected node ids\n     * the singleNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string[]}\n     */\n    selectedNodes: string[] = [];\n\n    selectedEdge: string | null = null;\n\n    selectedEdges: string[] = [];\n\n    /**\n     * the currently hovered node id\n     * the multiNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string}\n     */\n    currentlyHoveredNodeId: string | null = null;\n\n    currentlyHoveredClusterId: string | null = null;\n\n    get currentlyHoveredNodeNeighbors(): string[] | null {\n        if (this.currentlyHoveredNodeId === null) {\n            return null;\n        } else {\n            return State.graph.rawGraph.neighbors(this.currentlyHoveredNodeId);\n        }\n    }\n\n    get currentlyHoveredNodeNeighborEdges(): string[] | null {\n        if (this.currentlyHoveredNodeId === null) {\n            return null;\n        } else {\n            return this.getNodeNeighborEdges(this.currentlyHoveredNodeId);\n        }\n    }\n\n    previouslyHoveredNodeId: string | null = null;\n\n    getNodeNeighborEdges(node: string): string[] {\n        let neighbors = State.graph.rawGraph.neighbors(node);\n        return neighbors?.map((neighbor: string) => {\n            return this.getEdgeKey(\n                neighbor,\n                this.currentlyHoveredNodeId as string\n            ) as string;\n        });\n    }\n\n    getEdgeKey(node1: string, node2: string): string | null {\n        let go: string | undefined = State.graph.rawGraph.edge(node1, node2);\n        if (go === undefined) {\n            let back: string | undefined = State.graph.rawGraph.edge(\n                node2,\n                node1\n            );\n            if (back === undefined) {\n                return null;\n            } else {\n                return back;\n            }\n        } else {\n            return go;\n        }\n    }\n\n    setNodeToDefault(node: string) {\n        this.updateNodeVisualizeAttribute(node, {\n            hovered: false,\n            selected: false,\n        });\n    }\n    /**\n     * update the _visualize object inside node attribute and calls graph refresh\n     *\n     * @param {string} id\n     * @param {Attributes} attribute\n     * @memberof GraphMutation\n     */\n    updateNodeVisualizeAttribute(\n        id: string,\n        attribute: Attributes,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getNodeAttribute(\n                id,\n                \"_visualize\"\n            );\n        }\n\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n    /**\n     * update the _visualize object inside edge attribute and calls graph refresh\n     *\n     * @param {string} id\n     * @param {Attributes} attribute\n     * @memberof GraphMutation\n     */\n    updateEdgeVisualizeAttribute(\n        key: string,\n        attribute: Attributes,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getEdgeAttribute(\n                key,\n                \"_visualize\"\n            );\n        }\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n\n    /**\n     * update the _visualize object inside all the nodes attribute and calls graph refresh\n     *\n     * @param {Attributes} _attributeVisualize\n     * @memberof GraphMutation\n     */\n    updateNodesVisualizeAttribute(_attributeVisualize: Attributes) {\n        State.graph.rawGraph.updateEachNodeAttributes((node, attribute) => {\n            return {\n                ...attribute._visualize,\n                ..._attributeVisualize,\n            };\n        });\n    }\n\n    /**\n     *\n     * update the _visualize object inside all the edges attribute and calls graph refresh\n     *\n     * @param {Attributes} _attributeVisualize\n     * @memberof GraphMutation\n     */\n    updateEdgesVisualizeAttribute(_attributeVisualize: Attributes) {\n        State.graph.rawGraph.updateEachEdgeAttributes((node, attribute) => {\n            return {\n                ...attribute._visualize,\n                ..._attributeVisualize,\n            };\n        });\n    }\n\n    updateVisualizeAttributeParser(newAttribute: any, oldAttributes: any) {\n        if (newAttribute.hasOwnProperty(\"hovered\")) {\n            oldAttributes.hovered = newAttribute.hovered;\n        } else if (newAttribute.hasOwnProperty(\"selected\")) {\n            oldAttributes.selected = newAttribute.selected;\n        }\n    }\n\n    /**\n     * should call this on every refresh of graph DS\n     *\n     */\n    flush() {\n        this.selectedNode = null;\n        this.selectedNodes = [];\n        this.selectedEdge = null;\n        this.selectedEdges = [];\n        this.currentlyHoveredNodeId = null;\n        this.previouslyHoveredNodeId = null;\n    }\n}\n","import { Attributes, EdgeKey, NodeKey } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\nimport GraphStore from \"./GraphStore\";\n\n/**\n * the wrapper mutating function that relates to the mutation of the rawGraph DS\n * all the mutation of the Graph should all go through this API rather than calling on rawGraph directly.\n *\n * @export\n * @class GraphMutation\n */\nexport default class GraphMutation {\n    constructor(_this: GraphStore) {\n        makeAutoObservable(this);\n        this.that = _this;\n    }\n\n    private that!: GraphStore;\n\n    /**\n     * add the node with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     *\n     * @param {NodeKey} node\n     * @param {Attributes} [attributes]\n     */\n    public addNode(node: NodeKey, attributes?: Attributes): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addNode(node, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * delete the node with this nodeId in the Graph and refresh the 3d Graph\n     *\n     * @param {string} nodeId\n     */\n    public dropNode(nodeId: string): void {\n        this.that.rawGraph.dropNode(nodeId);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * add the edge with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     *\n     * @param {NodeKey} source\n     * @param {NodeKey} target\n     * @param {Attributes} [attributes]\n     */\n    public addEdge(\n        source: NodeKey,\n        target: NodeKey,\n        attributes?: Attributes\n    ): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addEdge(source, target, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * delete the edge with this key in the Graph and refresh the 3d Graph\n     *\n     * @param {EdgeKey} edge\n     */\n    public dropEdge(edge: EdgeKey): void {\n        this.that.rawGraph.dropEdge(edge);\n        this.that.refreshGraph();\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { Attributes } from \"graphology-types\";\nimport {\n    createCustomNodeObject,\n    createCustomLinkObject,\n} from \"./GraphDelegate\";\nimport ComponentRef from \"../components/ComponentRef\";\nimport State from \".\";\nimport GraphMutation from \"./GraphMutation\";\n\nexport interface IMetaData {\n    snapshotName: string;\n\n    // attributes of nodes in imported graph\n    nodeProperties: string[];\n}\n\n/**\n * the class to store a raw graph as well as the related information\n \n * @export\n * @class GraphStore\n */\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.mutating = new GraphMutation(this);\n    }\n\n    /**\n     * the graphology data structure to store a graph.\n     * has a lot of APIs to manipulate as well as iterate through the graph\n     *\n     * @see graphology\n     *\n     * @type {Graph}\n     */\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: true,\n        multi: false,\n        type: \"undirected\",\n    });\n\n    /**\n     * should be called when individual nodes are added to the graph.\n\n     * add the CustomNodeObject to node attributes stored in the data structure\n     * @see CustomNodeObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} node\n     * @param {Attributes} attributes\n     */\n    decorateRawNode(node: string, attributes: Attributes) {\n        attributes._visualize = createCustomNodeObject(node, false);\n    }\n\n    /**\n     * should be called when individual edges are added to the graph.\n     *\n     * add the CustomLinkObject to node attributes stored in the data structure\n     * @see CustomLinkObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} source\n     * @param {string} target\n     * @param {Attributes} attributes\n     */\n    decorateRawEdge(source: string, target: string, attributes: Attributes) {\n        attributes._visualize = createCustomLinkObject(source, target, false);\n    }\n\n    /**\n     * should be called on every graph import\n     * add the the _visualize to every links inside the specified graph\n     *\n     * the _visualize is for storing the object to be send to front-end to render the graph\n     *\n     * @param {Graph} _rawGraph\n     * @return {*}  {Graph}\n     */\n    decorateRawGraph(_rawGraph: Graph): Graph {\n        _rawGraph.forEachNode((node, attributes) =>\n            this.decorateRawNode(node, attributes)\n        );\n\n        _rawGraph.forEachEdge((edge, attributes, source, target) =>\n            this.decorateRawEdge(source, target, attributes)\n        );\n        return _rawGraph;\n    }\n\n    /**\n     * proxy method to set the new graph\n     * if intend to set a new graph, please use this method instead of directly modify GraphStore\n     *\n     * @param {Graph} newGraph\n     * @param {IMetaData} metadata\n     */\n    public setGraph(_rawGraph: Graph, _metadata: IMetaData | null = null) {\n        this.rawGraph = this.decorateRawGraph(_rawGraph);\n        if (_metadata) {\n            this.metadata = _metadata;\n        }\n        State.interaction.flush();\n        State.cluster.clusterBy = null;\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * should be called when the graph gets updated (the data inside the graph gets updated, or the attribute to be clustered has changed)\n     *\n     * @memberof GraphStore\n     */\n    public refreshGraph() {\n        State.interaction.flush();\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * the wrapper methods to mutate the graph\n     * all the mutations of the graph should go through this API rather than calling this.rawGraph.[mutate]\n     *\n     * has basic functions like addNode, dropNode, addEdge, dropEdge...\n     *\n     * @see {GraphMutation}\n     */\n    mutating: GraphMutation;\n\n    /**\n     * if currently there is a graph in the dataset\n     *\n     * @readonly\n     */\n    get hasGraph() {\n        return this.rawGraph.order && this.rawGraph.size !== 0;\n    }\n\n    /**\n     * the metadata related to the raw graph\n     * should be updated if a new graph is imported\n     *\n     */\n    metadata: IMetaData = {\n        snapshotName: \"SNAPSHOT\",\n        nodeProperties: [],\n    };\n}\n","import { Intent, Position, Toaster } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\n\nexport interface INodeFileConfig {\n    // the file is successfully parsed and ready for display\n    isReady: boolean;\n    parseError: boolean;\n    path: string;\n\n    // has header at the top\n    hasHeader: boolean;\n\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n    topN: any[];\n    //names for the columns of this csv\n    columns: string[];\n    mapping: {\n        id: string;\n    };\n    delimiter: string;\n}\n\nexport interface IEdgeFileConfig {\n    isReady: boolean;\n    parseError: boolean;\n\n    // should save the csv to temp for further change the cluster attribute\n    path: string;\n    hasHeader: boolean;\n\n    // array of objects storing the\n    topN: any[];\n    columns: string[];\n    mapping: {\n        fromId: string;\n        toId: string;\n    };\n    delimiter: string;\n}\n\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    importCSVDialogOpen = false;\n    importSamplesDialogOpen = false;\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as INodeFileConfig,\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as IEdgeFileConfig,\n    };\n\n    /**\n     * read the CSV file specified by fileObject, with options defined by other paras\n     * and return a list of objects containing the key-value pair of attribute-value\n     *\n     * @param {File} fileObject\n     * @param {boolean} hasHeader\n     * @param {string} delimiter\n     * @return {*}  {Promise<Object[]>}\n     * where Object is of { attribute: number | string, anotherAttribute: number | string, ... } type\n     */\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    /**\n     * parse the graph from import GEXF file specified in selectedGEXFFileFromInput\n     * and return a Graph object\n     *\n     * @private\n     * @return {*}  {Promise<Graph>}\n     */\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, reader.result as string));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    this.isLoading = false;\n                }\n            };\n        });\n    }\n\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    /**\n     * will create a Graph structure to store the nodes and edges in the imported File\n     * should handle whether or not have the NodeFile, whether or not have the header of each file\n     * if successfully imported, change the .isReady to be true\n     *\n     * @return {*}\n     */\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: true,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            if (this.importConfig.nodeFile.hasHeader) {\n                // if has header, then tempNodes returns an array of objects\n                tempNodes = (await this.readNodeCSV()) as Object[];\n                tempNodes.forEach((node) => {\n                    let nodeId = node[config.nodeFile.mapping.id].toString();\n                    delete node[config.nodeFile.mapping.id];\n                    graph.addNode(nodeId, node);\n                });\n            } else {\n                // if no header, then tempNodes returns an array of array\n                tempNodes = (await this.readNodeCSV()) as any[][];\n                tempNodes.forEach((node) => {\n                    let nodeId = node[config.nodeFile.mapping.id].toString();\n                    let attributes = Object.assign({}, node);\n                    delete attributes[config.nodeFile.mapping.id];\n                    graph.addNode(nodeId, attributes);\n                });\n            }\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge, idx) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, {});\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, {});\n            }\n            graph.addEdgeWithKey(idx, fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        // graph.setAttribute('cluster','label');\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            },\n        };\n    }\n\n    //TODO:import 里的id和cluster， source target还没设置\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n\n        for (const [key] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        // graph.setAttribute('cluster','label');\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n                clusterProperties: null,\n                edgeProperties: [\"source_id\", \"target_id\"],\n            },\n        };\n    }\n\n    /**\n     * change the importConfig.edgeFile.topN to be the top 10 parsed elements in the input edge file\n     * change the importConfig.edgeFile.columns to be the attributes of the imported edge file\n     * set the .mapping.fromId and .mapping.toId to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedEdgeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     */\n    public async renderImportEdgePreview() {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter: delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter: delimiter,\n                          });\n                    edgeFileConfig.topN = it;\n                    edgeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (edgeFileConfig.columns.length >= 2) {\n                        edgeFileConfig.mapping.fromId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                        edgeFileConfig.isReady = true;\n                    } else if (edgeFileConfig.columns.length === 1) {\n                        edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        edgeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n\n    /**\n     * change the importConfig.nodeFile.topN to be the top 10 parsed elements in the input node file\n     * change the importConfig.nodeFile.columns to be the attributes of the imported node file\n     * set the .mapping.id .mapping.cluster to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedNodeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     */\n    public async renderImportNodePreview() {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter,\n                          });\n                    nodeFileConfig.topN = it;\n                    nodeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (nodeFileConfig.columns.length >= 1) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                        nodeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        nodeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n}\n","import Graph from \"graphology\";\nimport { makeAutoObservable, observable } from \"mobx\";\n\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n\n    // if is previewing, ignore all mouse hovers detected by NodeDetailPanel because it is showing the detail of selected node\n    isPreviewing = false;\n\n    // can use defined regex\n    // id:123\n    // attr:color:red\n    searchStr = \"\";\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     * @memberof ClusterStore\n     */\n    rawGraph!: Graph;\n\n    // contains node ids\n    get candidates(): string[] {\n        let list: string[] = [];\n        let searchStrIgnoreCase = this.searchStr.toLocaleLowerCase();\n        if (searchStrIgnoreCase.match(/^id:.+/g)) {\n            const searchId = searchStrIgnoreCase.split(/^id:/g)[1].trim();\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(searchId)) {\n                    list.push(node);\n                }\n            });\n        } else if (searchStrIgnoreCase.match(/^attr:.+:.+/g)) {\n            let searchQuery = searchStrIgnoreCase\n                .split(/^attr:/g)[1]\n                .trim()\n                .split(/:/g);\n            const searchAttr = searchQuery[0].trim();\n            const searchValue = searchQuery[1].trim();\n            this.rawGraph.forEachNode((node, attributes) => {\n                if (\n                    attributes.hasOwnProperty(searchAttr) &&\n                    (attributes[searchAttr] as string)\n                        .toLocaleLowerCase()\n                        .includes(searchValue)\n                ) {\n                    list.push(node);\n                }\n            });\n        } else if (this.searchStr === \"\") {\n        } else {\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(this.searchStr)) {\n                    list.push(node);\n                }\n            });\n        }\n\n        return list;\n    }\n}\n","import { makeAutoObservable, observable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\nimport State from \".\";\n\n/**\n * all the computed values get from the rawGraph\n *\n * @export\n * @class ClusterStore\n */\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n    /**\n     * @observable\n     *\n     * attention: please use setCluster() to alter this data\n     * Specify which attribute to be clustered\n     * the default value should be null, and front-end graph will interpret this to Not-Cluster\n     *\n     *\n     */\n    clusterBy: string | null = null;\n\n    /**\n     * the setter of clusterBy\n     * will update the front-end 3d graph about the cluster changes\n     *\n     * @param {(string | null)} by\n     */\n    setCluster(by: string | null) {\n        this.clusterBy = by;\n        State.graph.rawGraph.setAttribute(\"default\", by);\n        State.graph.refreshGraph();\n    }\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     */\n    rawGraph!: Graph;\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the id of a Node -> the value of the attribute specified by $clusterBy]\n     *\n     * @readonly\n     * @type {(Map<string, string | number>)}\n     */\n    get keyAttribute(): Map<string, string | number> {\n        const keyValueMap = new Map<string, string | number>();\n        if (this.clusterBy === null) {\n            return keyValueMap;\n        }\n        const attribute = this.clusterBy as string;\n\n        this.rawGraph?.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                keyValueMap.set(key, attributes[attribute]);\n            } else {\n                // this attribute is undefined in this node\n                keyValueMap.set(key, \"undefined\");\n            }\n        });\n        return keyValueMap;\n    }\n\n    /**\n     * the possible attribute values of the attribute defined by $clusterBy\n     *\n     * @readonly\n     * @type {((string | number)[])}\n     */\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> a list of Node ids]\n     *\n     * @readonly\n     * @type {(Map<string | number, string[]>)}\n     */\n    get attributeKeys(): Map<string | number, string[]> {\n        const attributeKeysMap = new Map<string | number, string[]>();\n        this.getAttributeValues.forEach((value) => {\n            attributeKeysMap.set(value, []);\n        });\n        this.keyAttribute.forEach((value, key) => {\n            attributeKeysMap.get(value)?.push(key);\n        });\n        return attributeKeysMap;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the random colour of this cluster]\n     * used to avoid re-compute the colours on every frame refresh\n     *\n     * @readonly\n     * @type {(Map<string | number, string>)}\n     */\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.forEach((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the Nodes points in that cluster]\n     * will change on every frame refresh as the Node's position keeps changing.\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Vector3[]>)}\n     */\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.forEach((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        this.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * changing the config inside .global will cause to change every config of every node iteratively\n *\n * but changing the else does not\n *\n * @class NodeGlobalConfig\n */\nclass NodeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n    defaultColor: string = \"#808080\";\n    selectedColor: string = \"#ffffAA\";\n    highlightColor: string = \"#ff6060\";\n\n    resolution = 12;\n\n    size = 4;\n}\n\n/**\n * changing the config inside .global will cause to change every config of every edge iteratively\n *\n * but changing the else does not\n *\n * @class EdgeGlobalConfig\n */ class EdgeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    defaultColor = \"#ffffff\";\n\n    selectedColor = \"#ffff00\";\n    highlightColor = \"#ff8E8E\";\n\n    defaultWidth: number = 1;\n\n    highlightWidth: number = 2;\n\n    resolution = 6;\n}\nclass LabelConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    show = true;\n    color = \"#d3d3d3\";\n    size = 4;\n}\n\nclass ClusterConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    clusterForce = 20;\n    normalForce = 50;\n    resolution = 10;\n    shape: \"convexHull\" | \"sphere\" = \"convexHull\";\n}\n/**\n * the configurations to set to cascade the graph\n *\n * @export\n * @class CssStore\n */\nexport default class CssStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.node = new NodeGlobalConfig();\n        this.edge = new EdgeGlobalConfig();\n        this.label = new LabelConfig();\n        this.cluster = new ClusterConfig();\n    }\n\n    node!: NodeGlobalConfig;\n\n    edge!: EdgeGlobalConfig;\n\n    label!: LabelConfig;\n\n    cluster!: ClusterConfig;\n\n    isAnimating: boolean = true;\n}\n","import { autorun, reaction } from \"mobx\";\n\nimport PreferencesStore from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\nimport CssStore from \"./CssStore\";\nimport GraphDelegate from \"./GraphDelegate\";\nimport InteractionStore from \"./NodeInteractionStore\";\n\nclass AppState {\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    graphDelegate!: GraphDelegate;\n    interaction!: InteractionStore;\n    import!: ImportStore;\n    search!: SearchStore;\n    cluster!: ClusterStore;\n    css!: CssStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.graphDelegate = new GraphDelegate();\n        this.interaction = new InteractionStore();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.cluster = new ClusterStore();\n        this.css = new CssStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// this is for easily debugging in runtime\n//@ts-ignore\nwindow._state = State;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\nautorun(\n    () =>\n        (State.cluster.rawGraph = State.search.rawGraph = State.graph.rawGraph)\n);\n\nautorun(() => {\n    if (State.css.isAnimating === true) {\n        State.graphDelegate.graphDelegateMethods?.resumeAnimation();\n    } else {\n        State.graphDelegate.graphDelegateMethods?.pauseAnimation();\n    }\n});\n\nreaction(\n    () => State.interaction.currentlyHoveredClusterId,\n    (currentlyHoveredClusterId) => {\n        console.log(\"currentlyHoveredNodeId\", currentlyHoveredClusterId);\n        if (currentlyHoveredClusterId) {\n            let mesh = State.graphDelegate.clusterObject.getObjectById(\n                currentlyHoveredClusterId\n            );\n            if (mesh) {\n                let material = mesh.material as THREE.Material;\n                material.opacity = 0.5;\n            }\n        } else {\n            State.graphDelegate.clusterObject.resetDefaultMaterial();\n        }\n    }\n);\n\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    (currentlyHoveredNodeId) => {\n        console.log(\"currentlyHoveredNodeId\", currentlyHoveredNodeId);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (node === currentlyHoveredNodeId) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (\n                State.interaction.currentlyHoveredNodeNeighborEdges?.includes(\n                    edge\n                )\n            ) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\nreaction(\n    () => State.interaction.selectedNodes.map((node) => node),\n    (selectedNodes) => {\n        console.log(\"selectedNodes\", selectedNodes);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNodes.includes(node)) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\nreaction(\n    () => State.interaction.selectedNode,\n    (selectedNode) => {\n        console.log(\"selectedNode\", selectedNode);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNode === node) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\nreaction(\n    () => State.interaction.selectedEdge,\n    (selectedEdge) => {\n        console.log(\"selectedEdge\", selectedEdge);\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (selectedEdge === edge) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { selected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { selected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\nexport default State;\n","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { copy } from \"copy-anything\";\n\ninterface Props {\n    /**\n     * whether or not to show the None\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    showNone: boolean;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * if None is selected, the item props will be set to null\n     *\n     * @memberof Props\n     */\n    onSelect: (item: string | null) => void;\n\n    /**\n     * the selected to display will sync with this props\n     *\n     * @type {(string | null)}\n     * @memberof Props\n     */\n    syncWith: string | null;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\n/**\n * this component can be used to choose the attribute among all the attributes, with addition none to choose (can be toggled to off)\n * to use it, you have to specify whether to add additional None to the list and onChange function to call when a candidate is selected\n */\nexport default observer(\n    class ClusterChooser extends React.Component<Props, {}> {\n        static defaultProps = {\n            showNone: true,\n        };\n\n        get fullProperties(): string[] {\n            let propertiesWithNone = copy(State.graph.metadata.nodeProperties);\n            propertiesWithNone.unshift(\"None\");\n            return propertiesWithNone;\n        }\n\n        itemRenderer = (\n            item: any,\n            props: CustomIItemRendererProps\n        ): JSX.Element | null => {\n            if (item === \"None\") {\n                return (\n                    <MenuItem\n                        intent=\"primary\"\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            } else {\n                return (\n                    <MenuItem\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            }\n        };\n\n        render() {\n            return (\n                <Select\n                    items={\n                        this.props.showNone\n                            ? this.fullProperties\n                            : State.graph.metadata.nodeProperties\n                    }\n                    itemRenderer={this.itemRenderer}\n                    filterable={false}\n                    onItemSelect={(item: string) => {\n                        let selected = item === \"None\" ? null : item;\n                        this.props.onSelect(selected);\n                    }}\n                >\n                    <Button\n                        text={this.props.syncWith ?? this.fullProperties[0]}\n                    />\n                </Select>\n            );\n        }\n    }\n);\n","export default __webpack_public_path__ + \"static/media/logo.25a51149.png\";","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { ItemPredicate, Select } from \"@blueprintjs/labs\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    items: any[];\n    onSelect: (\n        item: any,\n        event?: React.SyntheticEvent<HTMLElement, Event> | undefined\n    ) => void;\n    text: string;\n    small: boolean;\n    search: boolean;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\nexport function CommonItemRenderer(\n    item: any,\n    props: CustomIItemRendererProps\n): JSX.Element | null {\n    return <MenuItem key={item} onClick={props.handleClick} text={item} />;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        static defaultProps = {\n            small: false,\n            search: false,\n        };\n\n        itemPredicate: ItemPredicate<string> = (\n            query: string,\n            object: string\n        ) => {\n            return object.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n        };\n        render() {\n            if (this.props.search) {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemPredicate={this.itemPredicate}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={true}\n                        onItemSelect={this.props.onSelect}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            } else {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={false}\n                        onItemSelect={this.props.onSelect}\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            }\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    ButtonGroup,\n    Classes,\n    Menu,\n    MenuDivider,\n    MenuItem,\n    Popover,\n    Position,\n    Switch,\n} from \"@blueprintjs/core\";\nimport ClusterChooser from \"./utils/ClusterChooser\";\nimport logo from \"../images/logo.png\";\nimport State from \"../state\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\nimport ComponentRef from \"./ComponentRef\";\n\nexport default observer(\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <nav className={classnames([Classes.NAVBAR])}>\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_LEFT,\n                        ])}\n                    >\n                        <img\n                            title=\"PiperNet\"\n                            id=\"PiperNet Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                            alt=\"PiperNet Logo\"\n                        />\n                        <div className={classnames([Classes.NAVBAR_HEADING])}>\n                            {\" \"}\n                            PiperNet{\" \"}\n                        </div>\n\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Load Sample\"\n                                        icon=\"graph\"\n                                        onClick={() => {\n                                            State.import.importSamplesDialogOpen = true;\n                                        }}\n                                    >\n                                        {/* {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        disabled={true}\n                                                        onClick={() => {\n                                                            fetchSampleGraph(\n                                                                sampleSnapshotUrl\n                                                            ).then((file) => {\n                                                                State.import.selectedGEXFFileFromInput = file;\n                                                                State.import\n                                                                    .importGraphFromGEXF()\n                                                                    .then(\n                                                                        (\n                                                                            res\n                                                                        ) => {\n                                                                            State.graph.rawGraph =\n                                                                                res.graph;\n                                                                            State.graph.metadata =\n                                                                                res.metadata;\n                                                                        }\n                                                                    );\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )} */}\n                                    </MenuItem>\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from CSV...\"\n                                        onClick={() => {\n                                            State.import.importCSVDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from GEXF...\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Export Graph\"\n                                        onClick={() => {\n                                            State.preferences.exportDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"document\"\n                            >\n                                Graph\n                            </Button>\n                        </Popover>\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Node DataSheet\"\n                                        icon=\"ungroup-objects\"\n                                        onClick={() => {\n                                            State.preferences.nodeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Edge DataSheet\"\n                                        icon=\"link\"\n                                        onClick={() => {\n                                            State.preferences.edgeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    {/* <MenuItem\n                                        text=\"Statistics\"\n                                        icon=\"timeline-bar-chart\"\n                                        onClick={() => {\n                                            State.preferences.statisticsDialogOpen = true;\n                                        }}\n                                    /> */}\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"wrench\"\n                            >\n                                Tools\n                            </Button>\n                        </Popover>\n                        <Switch\n                            label=\"Graph Animation\"\n                            checked={State.css.isAnimating}\n                            onChange={() =>\n                                (State.css.isAnimating = !State.css.isAnimating)\n                            }\n                        />\n                    </div>\n                    {/* <div\n                    className={classnames([\n                        Classes.NAVBAR_GROUP,\n                        Classes.ALIGN_LEFT,\n                    ])}\n                >\n                    <span className={Classes.NAVBAR_DIVIDER} />\n                    {appState.graph.hasGraph && appState.graph.frame && (\n                        <div style={{ display: \"inline\" }}>\n                            <Tooltip\n                                content={\n                                    appState.graph.frame.paused\n                                        ? \"Resume Layout Algorithm\"\n                                        : \"Pause Layout Algorithm\"\n                                }\n                                position={Position.BOTTOM}\n                            >\n                                <Button\n                                    className={classnames([\n                                        Classes.BUTTON,\n                                        Classes.MINIMAL,\n                                    ])}\n                                    icon={\n                                        appState.graph.frame.paused\n                                            ? \"play\"\n                                            : \"pause\"\n                                    }\n                                    text={\n                                        appState.graph.frame.paused\n                                            ? \"Resume Layout\"\n                                            : \"Pause Layout\"\n                                    }\n                                    onClick={() => {\n                                        if (appState.graph.frame.paused) {\n                                            appState.graph.frame.resumeLayout();\n                                            this.forceUpdate();\n                                        } else {\n                                            appState.graph.frame.pauseLayout();\n                                            this.forceUpdate();\n                                        }\n                                    }}\n                                />\n                            </Tooltip>\n                        </div>\n                    )}\n                </div> */}\n                    <ButtonGroup>\n                        {/* <SimpleSelect\n                            className={classnames([Classes.ALERT_CONTENTS])}\n                            items={[\"3D\", \"2D\"]}\n                            value={State.preferences.view}\n                            onSelect={(it) => (State.preferences.view = it)}\n                        />\n                        <Divider /> */}\n                    </ButtonGroup>\n\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_RIGHT,\n                        ])}\n                    >\n                        Clustered by\n                        <ClusterChooser\n                            onSelect={(cluster) => {\n                                State.cluster.setCluster(cluster);\n                            }}\n                            syncWith={State.cluster.clusterBy}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <SimpleSelect\n                            items={[\"trackball\", \"orbit\", \"fly\"]}\n                            text={State.preferences.controlType}\n                            onSelect={(it) => {\n                                State.preferences.controlType = it;\n                                ComponentRef.visualizer.updateVisualizationGraph();\n                            }}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"cog\"\n                            disabled={true}\n                            onClick={() => {\n                                State.preferences.preferenceDialogOpen = true;\n                            }}\n                        />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"code\"\n                            onClick={() => {\n                                window.open(\n                                    \"https://github.com/grp202004/PiperNet\"\n                                );\n                            }}\n                        />\n                    </div>\n                </nav>\n            );\n        }\n    }\n);\n","import React, { ReactNode } from \"react\";\nimport { Button, Card, Classes, Collapse, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    name: string;\n    isOpen: boolean;\n    onToggle: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n    children: ReactNode;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Card elevation={Elevation.THREE}>\n                    <Button\n                        className={classnames(\n                            Classes.LARGE,\n                            Classes.FILL,\n                            \"text-align-left\"\n                        )}\n                        rightIcon={\n                            this.props.isOpen ? \"chevron-up\" : \"chevron-down\"\n                        }\n                        onClick={this.props.onToggle}\n                    >\n                        {this.props.name}\n                    </Button>\n                    <Collapse isOpen={this.props.isOpen}>\n                        {this.props.children}\n                    </Collapse>\n                </Card>\n            );\n        }\n    }\n);\n","import convert from \"xml-js\";\n\nexport const GITHUB_URL = \"\";\n\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\n    [\n        \"Les Miserables\",\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\n    ],\n    [\"COVID-19 Citation Graph 06-02\", \"../samples/json/a.json\"],\n];\n\nexport async function fetchSampleGraph(url: string) {\n    try {\n        let response = await fetch(url, { mode: \"no-cors\" });\n        let gexfJson = await response.json();\n        return new File([convert.json2xml(gexfJson)], \"sample.gexf\", {\n            type: \"text/xml\",\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\nexport const ONLY_EDGE_FILE = \"only edges file\";\n\nexport const COLOR_LIST = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32,\n};\n","import React from \"react\";\nimport {\n    Button,\n    Callout,\n    Classes,\n    Dialog,\n    Divider,\n    FileInput,\n    Intent,\n    Spinner,\n    Switch,\n    Tag,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\n\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../../constants\";\nimport { IEdgeFileConfig, INodeFileConfig } from \"../../state/ImportStore\";\n\ninterface PreviewTableProps {\n    file: INodeFileConfig | IEdgeFileConfig;\n}\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component<PreviewTableProps, {}> {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top {this.file.topN.length} rows of the\n                        selected file are displayed.\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    class ImportCSVDialog extends React.Component {\n        state = {\n            loading: false,\n            available: ONLY_EDGE_FILE,\n            nodesOpen: true,\n            edgesOpen: true,\n            delimiter: \",\",\n        };\n\n        // determine if this state is importable\n        canImport = () => {\n            if (this.state.available === NODE_AND_EDGE_FILE) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else if (this.state.available === ONLY_EDGE_FILE) {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n            return false;\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            // show blank if node file not relevant\n            if (this.state.available === ONLY_EDGE_FILE) {\n                return null;\n            }\n\n            return (\n                <Collapsable\n                    name=\"Nodes\"\n                    isOpen={this.state.nodesOpen}\n                    onToggle={() =>\n                        this.setState({ nodesOpen: !this.state.nodesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.nodeFileName}\n                                onInputChange={(event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    if (\n                                        !target.files ||\n                                        target.files.length < 1\n                                    ) {\n                                        return;\n                                    }\n                                    State.import.nodeFileName =\n                                        target.files[0].name;\n                                    // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                    State.import.selectedNodeFileFromInput =\n                                        target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                text={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <Collapsable\n                    name=\"Edges\"\n                    isOpen={this.state.edgesOpen}\n                    onToggle={() =>\n                        this.setState({ edgesOpen: !this.state.edgesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.edgeFileName}\n                                onInputChange={(event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    if (\n                                        !target.files ||\n                                        target.files.length < 1\n                                    ) {\n                                        return;\n                                    }\n                                    State.import.edgeFileName =\n                                        target.files[0].name;\n                                    State.import.selectedEdgeFileFromInput =\n                                        target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />{\" \"}\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderDelimiterSelection() {\n            return (\n                <div>\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        text={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter === \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter === \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    style={{ minWidth: \"80vw\" }}\n                    icon=\"import\"\n                    isOpen={State.import.importCSVDialogOpen}\n                    onClose={() => {\n                        State.import.importCSVDialogOpen = false;\n                    }}\n                    title=\"Import CSV\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div>\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"import-dialog\"\n                                )}\n                            >\n                                I have:\n                                <SimpleSelect\n                                    items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\n                                    text={this.state.available}\n                                    onSelect={(targetValue) => {\n                                        State.import.importConfig.hasNodeFile = !(\n                                            targetValue === ONLY_EDGE_FILE\n                                        );\n                                        this.setState({\n                                            available: targetValue,\n                                        });\n                                    }}\n                                />\n                                <Divider />\n                                {this.renderNodesSelection()}\n                                <br />\n                                {this.renderEdgesSelection()}\n                                <br />\n                                {this.renderDelimiterSelection()}\n                            </div>\n                            <div className={Classes.DIALOG_FOOTER}>\n                                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                    <Button\n                                        className={classnames({\n                                            [Classes.DISABLED]: !this.canImport(),\n                                        })}\n                                        intent={Intent.PRIMARY}\n                                        onClick={() => {\n                                            State.import.isLoading = true;\n                                            State.import\n                                                .importGraphFromCSV()\n                                                .then((res) => {\n                                                    State.graph.setGraph(\n                                                        res.graph,\n                                                        res.metadata\n                                                    );\n\n                                                    State.import.isLoading = false;\n                                                    State.import.importCSVDialogOpen = false;\n                                                });\n                                        }}\n                                        text=\"Import\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    FileInput,\n    Intent,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\nexport default observer(\n    class ImportGEXFDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <Button\n                            className={classnames({\n                                [Classes.DISABLED]: !this.state.fileIsSelect,\n                            })}\n                            intent={Intent.PRIMARY}\n                            onClick={() => {\n                                State.import.isLoading = true;\n                                State.import\n                                    .importGraphFromGEXF()\n                                    .then((res) => {\n                                        State.graph.setGraph(\n                                            res.graph,\n                                            res.metadata\n                                        );\n\n                                        if(State.cluster.rawGraph.hasAttribute('default')){\n                                            State.cluster\n                                            .setCluster(State.graph.rawGraph.getAttribute('default'));\n                                        }\n\n                                        State.import.isLoading = false;\n                                        State.import.importGEXFDialogOpen = false;\n                                    });\n                            }}\n                            text=\"Import\"\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"import\"\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;       \n                    }}\n                    title=\"Import GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <div\n                                    className={classnames(\n                                        Classes.CONTROL_GROUP\n                                    )}\n                                >\n                                    <div\n                                        className={classnames(\n                                            Classes.INPUT_GROUP,\n                                            Classes.FILL\n                                        )}\n                                    >\n                                        <FileInput\n                                            text={State.import.gexfFileName}\n                                            onInputChange={(event) => {\n                                                let target = event.target as HTMLInputElement;\n                                                if (\n                                                    !target.files ||\n                                                    target.files.length < 1\n                                                ) {\n                                                    return;\n                                                }\n                                                State.import.gexfFileName =\n                                                    target.files[0].name;\n                                                // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                                State.import.selectedGEXFFileFromInput =\n                                                    target.files[0];\n\n                                                this.setState({\n                                                    fileIsSelect: true,\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Card,\n    Classes,\n    Dialog,\n    Divider,\n    Elevation,\n    H3,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport gexf from \"graphology-gexf/browser\";\nimport State from \"../../state\";\nimport { CSVLink } from \"react-csv\";\n\nexport default observer(\n    class ExportDialog extends React.Component {\n        state = {\n            ready: true,\n        };\n\n        /**\n         * compute the GEXF file from rawGraph\n         * delete the temporary _visualize attribute from the graph\n         *\n         * @returns {*}\n         */\n        computeGEXFFile() {\n            let graphCopy = State.graph.rawGraph.copy();\n            graphCopy.forEachNode((_node, attributes: any) => {\n                delete attributes[\"_visualize\"];\n            });\n            graphCopy.forEachEdge((_edge, attributes: any) => {\n                delete attributes[\"_visualize\"];\n            });\n            return gexf.write(graphCopy);\n        }\n\n        computeNodeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [];\n            headers.push({ label: \"_id\", key: \"_id\" });\n            State.graph.metadata.nodeProperties.map((value) => {\n                headers.push({ label: value, key: value });\n                return null;\n            });\n            \n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.nodes.forEach((node) => {\n                data.push({\n                    _id: node.key,\n                    ...node.attributes,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        computeEdgeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [\n                { label: \"source\", key: \"source\" },\n                { label: \"target\", key: \"target\" },\n            ];\n\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.edges.forEach((edge) => {\n                data.push({\n                    source: edge.source,\n                    target: edge.target,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"projects\"\n                    isOpen={State.preferences.exportDialogOpen}\n                    onClose={() => {\n                        State.preferences.exportDialogOpen = false;\n                    }}\n                    title={`Export Graph`}\n                >\n                    {!this.state.ready ? (\n                        <Spinner />\n                    ) : (\n                        <div className={classnames(Classes.DIALOG_BODY)}>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    GEXF Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://gephi.org/gexf/format/\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n                                <Divider />\n\n                                <CSVLink\n                                    data={this.computeGEXFFile()}\n                                    filename={\"Snapshot-GEXF.gexf\"}\n                                    className=\"btn btn-primary\"\n                                    target=\"_blank\"\n                                >\n                                    <Button>Download GEXF File</Button>\n                                </CSVLink>\n                            </Card>\n                            <br />\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    CSV Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://github.com/grp202004/PiperNet#data-import\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n\n                                <Divider />\n                                <ButtonGroup>\n                                    <CSVLink\n                                        data={this.computeNodeFile().data}\n                                        headers={this.computeNodeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Node.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Node File</Button>\n                                    </CSVLink>\n                                    <Divider />\n                                    <CSVLink\n                                        data={this.computeEdgeFile().data}\n                                        headers={this.computeEdgeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Edge.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Edge File</Button>\n                                    </CSVLink>\n                                </ButtonGroup>\n                            </Card>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Dialog } from \"@blueprintjs/core\";\nimport { Column, Table, TableLoadingOption } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\ninterface Props {\n    for: string;\n    children: React.ReactNode;\n}\n\nexport default observer(\n    class DataSheetDialogWrapper extends React.Component<Props, {}> {\n        state = {\n            loading: true,\n        };\n\n        renderTable() {\n            if (this.state.loading) {\n                return (\n                    <div className=\"argo-table-container\">\n                        <Table\n                            className=\"pt-bordered pt-striped\"\n                            numRows={20}\n                            loadingOptions={[\n                                TableLoadingOption.CELLS,\n                                TableLoadingOption.COLUMN_HEADERS,\n                                TableLoadingOption.ROW_HEADERS,\n                            ]}\n                        >\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                        </Table>\n                    </div>\n                );\n            } else {\n                return this.props.children;\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"database\"\n                    isOpen={\n                        this.props.for === \"node\"\n                            ? State.preferences.nodeDataSheetDialogOpen\n                            : State.preferences.edgeDataSheetDialogOpen\n                    }\n                    onOpened={() => {\n                        setTimeout(() => {\n                            this.setState({\n                                loading: false,\n                            });\n                        }, 100);\n                    }}\n                    onClose={() => {\n                        if (this.props.for === \"node\") {\n                            State.preferences.nodeDataSheetDialogOpen = false;\n                        } else {\n                            State.preferences.edgeDataSheetDialogOpen = false;\n                        }\n                        this.setState({\n                            loading: true,\n                        });\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        {this.renderTable()}\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import { Attributes } from \"graphology-types\";\nimport React from \"react\";\n\n/** Event handler that exposes the target element's value as a boolean. */\nexport function handleBooleanChange(handler: (checked: boolean) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).checked);\n}\n\n/** Event handler that exposes the target element's value as a string. */\nexport function handleStringChange(handler: (value: string) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).value);\n}\n\n/** Event handler that exposes the target element's value as an inferred generic type. */\nexport function handleValueChange<T>(handler: (value: T) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler(((event.target as HTMLInputElement).value as unknown) as T);\n}\n\n/** Event handler that exposes the target element's value as a number. */\nexport function handleNumberChange(handler: (value: number) => void) {\n    return handleStringChange((value) => handler(+value));\n}\n\nexport function stringifyNodeDetail(attributes: Attributes): string {\n    let res = \"\";\n    for (var attribute in attributes) {\n        if (\n            attributes.hasOwnProperty(attribute) &&\n            attribute !== \"_visualize\" &&\n            attribute !== \"_options\"\n        ) {\n            res += attribute + \" : \" + attributes[attribute] + \" ; \";\n        }\n    }\n\n    return res;\n}\n\nexport function parseNumberOrString(value: string): string | number {\n    let numberVal = Number(value);\n    if (isNaN(numberVal)) {\n        return value;\n    } else {\n        return numberVal;\n    }\n}\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Code,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    EditableCell,\n    ICellRenderer,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport {\n    handleStringChange,\n    parseNumberOrString,\n    stringifyNodeDetail,\n} from \"../utils/InputFormUtils\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\n\nlet GraphNodeTable = observer(\n    class GraphNodeTable extends React.Component {\n        state = {\n            filterQuery: \"\",\n            addNodeDialogOpen: false,\n            deleteAlertOpen: false,\n            nodeToDelete: null as SerializedNode | null,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedNode[] = [];\n            State.graph.rawGraph.export().nodes.forEach((node) => {\n                if (\n                    node.key\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(node);\n                }\n            });\n            return newTable;\n        }\n\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        renderColumns: any = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it !== \"_options\") {\n                    return (\n                        <Column\n                            name={it}\n                            cellRenderer={(\n                                rowIndex: number,\n                                columnIndex: number\n                            ) => this.renderCell(rowIndex, it)}\n                        />\n                    );\n                }\n                return null;\n            });\n            return columns.filter((element) => {\n                return element !== undefined;\n            });\n        };\n\n        renderCell = (rowIndex: number, attribute: string) => {\n            let cellAttributes = this.filteredTable[rowIndex].attributes!!;\n            let cell = cellAttributes[attribute];\n\n            return (\n                <EditableCell\n                    value={cell}\n                    onChange={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    onConfirm={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    tooltip={cell}\n                />\n            );\n        };\n\n        // if the input is a number in string, it will convert the string into number to store\n        setValue = (value: string, rowIndex: number, attribute: string) => {\n            let id = this.filteredTable[rowIndex].key;\n            State.graph.rawGraph.setNodeAttribute(\n                id,\n                attribute,\n                parseNumberOrString(value)\n            );\n        };\n\n        deleteNodeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                nodeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteNodeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropNode(\n                            this.state.nodeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                    style={{ minWidth: \"60vw\" }}\n                >\n                    <p>\n                        Are you sure you want to delete the node with ID{\" \"}\n                        <Code>{this.state.nodeToDelete?.key}</Code> with\n                        attributes:\n                        <Code>\n                            {stringifyNodeDetail(\n                                this.state.nodeToDelete\n                                    ?.attributes as Attributes\n                            )}\n                        </Code>\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <Callout\n                        title={\n                            \"Try to click on a cell and type in something...\"\n                        }\n                        intent=\"primary\"\n                        icon=\"edit\"\n                    >\n                        The corresponding value of a node's attribute can be\n                        modified by clicking the cell and type in\n                    </Callout>\n\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() => {\n                                State.preferences.AddNodeDialogOpen = true;\n                            }}\n                            icon=\"new-object\"\n                            intent=\"primary\"\n                            text=\"Add Node\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Node...\"\n                            value={this.state.filterQuery}\n                            fill={true}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n\n                    <Table\n                        className=\"argo-table\"\n                        defaultRowHeight={30}\n                        numRows={this.filteredTable.length}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteNodeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"ID\"\n                            //@ts-ignore\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.filteredTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                    {this.deleteNodeAlert()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class NodeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"node\">\n                    <GraphNodeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, FormGroup, MenuItem, Tooltip } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { stringifyNodeDetail } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the text to be shown above the selectButton\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    text: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * the {nodeId} is the id of the selected node\n     *\n     * @memberof Props\n     */\n    onChange: (nodeId: string) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class NodeChooser extends React.Component<Props, {}> {\n        state = {\n            select: \"Choose \" + this.props.text,\n        };\n\n        render() {\n            return (\n                <FormGroup\n                    label={this.props.text}\n                    labelFor=\"text-input\"\n                    labelInfo=\"(required)\"\n                >\n                    <Select\n                        filterable={true}\n                        items={State.graph.rawGraph.export().nodes}\n                        itemPredicate={(\n                            query: string,\n                            item: SerializedNode<Attributes>\n                        ) => {\n                            return item.key.includes(query);\n                        }}\n                        itemRenderer={(item: SerializedNode<Attributes>) => {\n                            return (\n                                <Tooltip\n                                    content={stringifyNodeDetail(\n                                        item.attributes ?? {}\n                                    )}\n                                >\n                                    <MenuItem\n                                        key={item.key}\n                                        text={item.key}\n                                        onClick={() => {\n                                            let key = item.key;\n                                            this.setState({ select: key });\n                                            this.props.onChange(key);\n                                        }}\n                                    />\n                                </Tooltip>\n                            );\n                        }}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                        onItemSelect={() => {}}\n                    >\n                        <Button\n                            text={this.state.select}\n                            rightIcon=\"double-caret-vertical\"\n                        />\n                    </Select>\n                </FormGroup>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Code,\n    Dialog,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport { Attributes, SerializedEdge } from \"graphology-types\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\nimport NodeChooser from \"../utils/NodeChooser\";\n\nlet GraphEdgeTable = observer(\n    class GraphEdgeTable extends React.Component {\n        state = {\n            addEdgeDialogOpen: false,\n            deleteAlertOpen: false,\n            edgeToDelete: null as null | SerializedEdge<Attributes>,\n            filterQuery: null as null | string,\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedEdge<Attributes>[] = [];\n            State.graph.rawGraph.export().edges.forEach((edge) => {\n                if (\n                    !this.state.filterQuery ||\n                    edge.source\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    edge.target\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(edge);\n                }\n            });\n            return newTable;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(\n                            this.state.edgeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.key}</Code> from Node ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.source}</Code> to Node\n                        ID <Code>{this.state.edgeToDelete?.target}</Code>. This\n                        action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        addEdgeDialog = () => {\n            return (\n                <Dialog\n                    isOpen={this.state.addEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => this.setState({ addEdgeDialogOpen: false })}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() =>\n                                    this.setState({ addEdgeDialogOpen: false })\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.setState({ addEdgeDialogOpen: false });\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() =>\n                                this.setState({ addEdgeDialogOpen: true })\n                            }\n                            icon=\"new-link\"\n                            intent=\"primary\"\n                            text=\"Add Edge\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Source or Target of an Edge...\"\n                            value={this.state.filterQuery ?? \"\"}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n                    <Table\n                        className=\"argo-table\"\n                        numRows={this.filteredTable.length}\n                        defaultRowHeight={30}\n                        renderMode={RenderMode.NONE}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteEdgeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"Source\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].source}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                        <Column\n                            name=\"Target\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].target}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                    </Table>\n                    {this.deleteEdgeAlert()}\n                    {this.addEdgeDialog()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class EdgeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"edge\">\n                    <GraphEdgeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import {\n    Button,\n    Card,\n    Elevation,\n    FormGroup,\n    H5,\n    InputGroup,\n    Tooltip,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport State from \"../../state\";\nimport { Attributes } from \"graphology-types\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * function to call when a new node is successfully added\n     * the {nodeId} is the id of the newly added node, {attributes} is the attributes of the newly added node\n     *\n     * @memberof Props\n     */\n    onAdded: (nodeId: string, attributes: Attributes) => void;\n}\n\nexport default observer(\n    class NodeAdder extends React.Component<Props, {}> {\n        state = {\n            newNodeId: \"\",\n            attributes: {} as Attributes,\n        };\n\n        get canImport() {\n            return (\n                !State.graph.rawGraph.hasNode(this.state.newNodeId) &&\n                this.state.newNodeId !== \"\"\n            );\n        }\n\n        canImportTag = () => {\n            return this.canImport ? (\n                <Tooltip\n                    content={\n                        \"This Node Id is not used by any existing node yet\"\n                    }\n                    intent=\"success\"\n                >\n                    <Button icon=\"tick\" intent=\"success\" minimal={true} />\n                </Tooltip>\n            ) : (\n                <Tooltip\n                    content={\n                        \"This Node Id is currently in use by other nodes, try with another one instead\"\n                    }\n                    intent=\"warning\"\n                >\n                    <Button icon=\"cross\" intent=\"warning\" minimal={true} />\n                </Tooltip>\n            );\n        };\n\n        renderAttributesForm = (attributes: string[]) => {\n            return attributes.map((attribute) => {\n                if (attribute !== \"_options\" && attribute !== \"_visualize\") {\n                    return (\n                        <FormGroup label={attribute}>\n                            <InputGroup\n                                asyncControl={true}\n                                placeholder={\n                                    \"Enter the value for attribute: \" +\n                                    attribute\n                                }\n                                onChange={handleStringChange((value) => {\n                                    let newValue = this.state.attributes;\n                                    newValue[attribute] = parseNumberOrString(\n                                        value\n                                    );\n                                    this.setState({ attributes: newValue });\n                                })}\n                                value={this.state.attributes[attribute]}\n                            />\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        };\n\n        render() {\n            return (\n                <Card elevation={Elevation.ONE}>\n                    <FormGroup label=\"New Node ID\" labelInfo=\"(required)\">\n                        <InputGroup\n                            autoFocus={true}\n                            asyncControl={true}\n                            placeholder=\"Enter the new Node Id...\"\n                            intent={this.canImport ? \"success\" : \"warning\"}\n                            rightElement={this.canImportTag()}\n                            onChange={handleStringChange((value) =>\n                                this.setState({ newNodeId: value })\n                            )}\n                            value={this.state.newNodeId}\n                        />\n                    </FormGroup>\n                    <Card elevation={Elevation.ONE}>\n                        <H5>Attributes</H5>\n                        {this.renderAttributesForm(\n                            State.graph.metadata.nodeProperties\n                        )}\n                    </Card>\n                    <hr />\n                    <Button\n                        intent=\"primary\"\n                        onClick={() => {\n                            State.graph.decorateRawNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.graph.mutating.addNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            this.props.onAdded(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.preferences.AddNodeDialogOpen = false;\n                            // State.preferences.rightClickBackgroundPanelOpen = false;\n                            // this.forceUpdate();\n                            // State.graphDelegate.cameraFocusOn(this.state.newNodeId);\n                        }}\n                        disabled={!this.canImport}\n                    >\n                        Confirm\n                    </Button>\n                </Card>\n            );\n        }\n        componentDidMount = () => {\n            State.graph.metadata.nodeProperties.forEach((prop) => {\n                let newValue = this.state.attributes;\n                newValue[prop] = \"\";\n                this.setState({ attributes: newValue });\n            });\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Classes, Dialog, Tag } from \"@blueprintjs/core\";\nimport NodeAdder from \"../utils/NodeAdder\";\nimport State from \"../../state\";\n\nexport default observer(\n    class AddNodeDialog extends React.Component {\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddNodeDialogOpen}\n                    icon=\"new-object\"\n                    onClose={() => {\n                        State.preferences.AddNodeDialogOpen = false;\n                    }}\n                    title=\"Add Node\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add node with unique node id to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> node means there should only exist\n                            one node that has the respective node id.\n                        </p>\n                        <Tag>New edges are added to the end of the table</Tag>\n                        <hr />\n                        <NodeAdder\n                            onAdded={() => {\n                                this.setState({ addNodeDialogOpen: false });\n                                this.forceUpdate();\n                            }}\n                        />\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Dialog,\n    Divider,\n    Intent,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport NodeChooser from \"../utils/NodeChooser\";\nexport default observer(\n    class AddEdgeDialog extends React.Component {\n        state = {\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => {\n                        State.preferences.AddEdgeDialogOpen = false;\n                    }}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() => {\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.forceUpdate();\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\n// import PreferencesDialog from \"./PreferencesDialog\";\nimport ImportCSVDialog from \"./dialogs/ImportCSVDialog\";\nimport ImportGEXFDialog from \"./dialogs/ImportGEXFDialog\";\nimport ImportSamplesDialog from \"./dialogs/ImportGEXFDialog\";\nimport ExportDialog from \"./dialogs/ExportDialog\";\n// import ProjectDetailDialog from \"./ProjectDetailDialog\";\n// import RenameSnapshotDialog from \"./RenameSnapshotDialog\";\n// import StatisticsDialog from './StatisticsDialog';\n// import HelpDialog from './HelpDialog';\n// import NeighborDialog from './NeighborDialog';\nimport NodeDataSheetDialog from \"./dialogs/NodeDataSheetDialog\";\nimport EdgeDataSheetDialog from \"./dialogs/EdgeDataSheetDialog\";\nimport AddNodeDialog from \"./dialogs/AddNodeDialog\";\nimport AddEdgeDialog from \"./dialogs/AddEdgeDialog\";\n\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                {/* <PreferencesDialog /> */}\n                <ImportCSVDialog />\n                <ImportGEXFDialog />\n                <ImportSamplesDialog />\n                {/*\n                <ProjectDetailDialog />\n                <RenameSnapshotDialog />\n                <StatisticsDialog />\n                <HelpDialog />\n                <NeighborDialog />\\\n                */}\n                <AddNodeDialog />\n                <AddEdgeDialog />\n                <NodeDataSheetDialog />\n                <EdgeDataSheetDialog />\n                <ExportDialog />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state\";\nimport SpriteText from \"three-spritetext\";\nimport {\n    ICustomLinkObject,\n    ICustomNodeObject,\n} from \"../../state/GraphDelegate\";\nimport { reaction } from \"mobx\";\nimport { VisualizationMode } from \"../../state/NodeInteractionStore\";\n\ninterface Props {\n    controlType: \"trackball\" | \"orbit\" | \"fly\";\n}\n\nexport default observer(\n    class ThreeJSVis extends React.Component<Props, {}> {\n        state = {\n            visualizationGraph: State.graphDelegate.visualizationGraph(),\n            nodePointerInteraction: true,\n        };\n\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        graphDelegate = State.graphDelegate;\n\n        hoverNodeCallback = (\n            node: NodeObject | null,\n            previousNode: NodeObject | null\n        ) => {\n            if (State.search.isPreviewing) return;\n            // to avoid frequent refresh\n\n            if (node === null) {\n                State.interaction.currentlyHoveredNodeId = null;\n            } else if (node !== previousNode) {\n                let current: string = node.id as string;\n                State.interaction.previouslyHoveredNodeId =\n                    State.interaction.currentlyHoveredNodeId;\n                State.interaction.currentlyHoveredNodeId = current;\n            }\n        };\n\n        nodeLeftClickCallback = (node: NodeObject, event: MouseEvent) => {\n            let nodeId = node.id as string;\n            if (event.ctrlKey || event.shiftKey) {\n                // multi-selection\n                let index;\n                // if already in the list of selected, remove\n                if (\n                    (index = State.interaction.selectedNodes.indexOf(\n                        nodeId\n                    )) !== -1\n                ) {\n                    State.interaction.selectedNodes.splice(index, 1);\n                } else {\n                    // if not in the list, add\n                    State.interaction.selectedNodes.push(nodeId);\n                }\n            } else {\n                // single select\n                State.interaction.selectedNode = node.id as string;\n            }\n        };\n\n        nodeRightClickCallback = (node: NodeObject, event: MouseEvent) => {\n            State.interaction.selectedNode = node.id as string;\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickOn = \"Node\";\n            State.preferences.rightClickPanelOpen = true;\n            this.closeAllPanel();\n        };\n\n        backgroundClickCallback = (event: MouseEvent) => {\n            // cancel all selection\n            State.interaction.selectedNodes = [];\n            State.preferences.rightClickPanelOpen = false;\n            this.closeAllPanel();\n        };\n\n        backgroundRightClickCallback = (event: MouseEvent) => {\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickOn = \"Background\";\n            State.preferences.rightClickPanelOpen = true;\n\n            this.closeAllPanel();\n        };\n\n        computeNodeColor(_node: NodeObject) {\n            let node = _node as ICustomNodeObject;\n            if (node.hovered) {\n                return State.css.node.highlightColor;\n            } else if (node.selected) {\n                return State.css.node.selectedColor;\n            } else {\n                return State.css.node.defaultColor;\n            }\n        }\n\n        computeEdgeColor(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightColor;\n            } else if (edge.selected) {\n                return State.css.edge.selectedColor;\n            } else {\n                return State.css.edge.defaultColor;\n            }\n        }\n        computeEdgeWidth(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightWidth;\n            } else if (edge.selected) {\n                return State.css.edge.highlightWidth;\n            } else {\n                return State.css.edge.defaultWidth;\n            }\n        }\n        renderGraph = () => {\n            if (State.preferences.view === \"3D\") {\n                return (\n                    <ForceGraph3D\n                        // Data Segment\n                        ref={this.graphRef}\n                        graphData={this.state.visualizationGraph}\n                        controlType={this.props.controlType}\n                        // Node Visualization Segment\n                        nodeLabel=\"id\"\n                        nodeRelSize={State.css.node.size}\n                        nodeColor={this.computeNodeColor}\n                        nodeVisibility={this.graphDelegate.nodeVisibility}\n                        nodeResolution={State.css.node.resolution}\n                        nodeThreeObjectExtend={true}\n                        nodeThreeObject={(node) => {\n                            const sprite = new SpriteText(`${node.id}`);\n                            sprite.color = State.css.label.color;\n                            sprite.textHeight = State.css.label.size;\n                            sprite.visible = State.css.label.show;\n                            sprite.backgroundColor = \"\";\n                            sprite.translateX(State.css.node.size + 2);\n                            return sprite;\n                        }}\n                        // Node Manipulation Segment\n                        onNodeHover={this.hoverNodeCallback}\n                        onNodeClick={this.nodeLeftClickCallback}\n                        onNodeRightClick={this.nodeRightClickCallback}\n                        onNodeDragEnd={(node) => {\n                            node.fx = node.x;\n                            node.fy = node.y;\n                            node.fz = node.z;\n                        }}\n                        // Link Visualization Segment\n                        linkVisibility={this.graphDelegate.linkVisibility}\n                        linkWidth={this.computeEdgeWidth}\n                        linkColor={this.computeEdgeColor}\n                        // Graph Manipulation Segment\n                        onBackgroundRightClick={\n                            this.backgroundRightClickCallback\n                        }\n                        onBackgroundClick={this.backgroundClickCallback}\n                        enablePointerInteraction={\n                            this.state.nodePointerInteraction\n                        }\n                        // Engine\n                        onEngineTick={() => {\n                            this.graphDelegate.clusterObject.clusterDelegation();\n                        }}\n                    />\n                );\n                // } else {\n                //     return (\n                //         <ForceGraph2D\n                //             graphData={State.graph.adapterGraph}\n                //             dagMode={\"td\"}\n                //             // dagLevelDistance={300}\n                //             // backgroundColor=\"#101020\"\n                //             nodeRelSize={1}\n                //             // nodeId=\"path\"\n                //             // nodeVal={(node) => 100 / (node.level + 1)}\n                //             // nodeLabel=\"path\"\n                //             // nodeAutoColorBy=\"module\"\n                //             // linkDirectionalParticles={2}\n                //             // linkDirectionalParticleWidth={2}\n                //             d3VelocityDecay={0.3}\n                //         />\n                //     );\n            }\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        updateVisualizationGraph() {\n            this.setState({\n                visualizationGraph: State.graphDelegate.visualizationGraph(),\n            });\n        }\n\n        closeAllPanel() {\n            State.preferences.deleteEdgePanelOpen = false;\n        }\n\n        clusterInteractionListener(set: boolean) {\n            if (set) {\n                document.addEventListener(\n                    \"mousemove\",\n                    State.graphDelegate.onDocumentMouseMove,\n                    false\n                );\n            } else {\n                document.removeEventListener(\n                    \"mousemove\",\n                    State.graphDelegate.onDocumentMouseMove\n                );\n            }\n        }\n\n        componentDidMount() {\n            this.graphDelegate.mountDelegateMethods(this.graphMethods);\n            this.clusterInteractionListener(true);\n            ComponentRef.visualizer = this;\n        }\n    }\n);\n\nreaction(\n    () => State.interaction.visualizationMode,\n    (visualizationMode) => {\n        console.log(`changing mode to ${visualizationMode}`);\n        switch (visualizationMode) {\n            case VisualizationMode.Normal:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: true,\n                });\n                ComponentRef.visualizer?.clusterHoverListener(true);\n                break;\n\n            case VisualizationMode.NodeSelection:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: true,\n                });\n                ComponentRef.visualizer?.clusterHoverListener(false);\n                break;\n\n            case VisualizationMode.ClusterSelection:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: false,\n                });\n                ComponentRef.visualizer?.clusterHoverListener(true);\n                break;\n\n            case VisualizationMode.ClusterSplitting:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: false,\n                });\n                ComponentRef.visualizer?.clusterHoverListener(true);\n                break;\n        }\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, EditableCell, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state/index\";\nimport ComponentRef from \"../ComponentRef\";\n\ninterface Props {\n    /**\n     * the node id of the select node\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class NodeDetail extends React.Component<Props, {}> {\n        cellRenderer_property = (rowIndex: number) => {\n            return <Cell>{State.graph.metadata.nodeProperties[rowIndex]}</Cell>;\n        };\n\n        cellRenderer_value = (rowIndex: number) => {\n            let data = State.graph.rawGraph.getNodeAttribute(\n                this.props.onNode,\n                State.graph.metadata.nodeProperties[rowIndex]\n            );\n            // return a Editable Cell where user can edit the value of certain property;\n            return (\n                <EditableCell\n                    value={data}\n                    onChange={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    onConfirm={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    tooltip={data}\n                />\n            );\n        };\n\n        formatLongFloat = (nodeAttributeValue: any) => {\n            const num = Number(nodeAttributeValue);\n            if (Number.isNaN(num) || num > 1 || num < 0) {\n                // Do not format just return original\n                return nodeAttributeValue;\n            }\n            // Format to no more than 3 significant digit.\n            return Number.parseFloat(num.toString()).toPrecision(3);\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"node-details-table\"\n                        )}\n                    >\n                        <Table\n                            numRows={State.graph.metadata.nodeProperties.length}\n                            enableRowHeader={false}\n                        >\n                            <Column\n                                name=\"Properties\"\n                                cellRenderer={this.cellRenderer_property}\n                            />\n                            <Column\n                                name=\"Value\"\n                                cellRenderer={this.cellRenderer_value}\n                            />\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.nodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    class MultipleNodeDetail extends React.Component {\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"left-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"nodes-details-table\"\n                        )}\n                    >\n                        <Table numRows={State.interaction.selectedNodes.length}>\n                            {State.graph.metadata.nodeProperties.map((it) => (\n                                <Column\n                                    key={it}\n                                    name={it}\n                                    cellRenderer={(i) => (\n                                        <Cell>\n                                            {State.graph.rawGraph.getNodeAttribute(\n                                                State.interaction.selectedNodes[\n                                                    i\n                                                ] as string,\n                                                it as string\n                                            )}\n                                        </Cell>\n                                    )}\n                                />\n                            ))}\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.multiNodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { InputGroup, Menu, MenuItem } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\n\nexport default observer(\n    class SearchPanel extends React.Component {\n        renderSearchResults = () => {\n            return State.search.candidates.map((it) => {\n                return (\n                    <MenuItem\n                        text={it}\n                        onMouseOver={() => {\n                            State.search.isPreviewing = true;\n                            State.interaction.currentlyHoveredNodeId = it;\n                            State.graphDelegate.cameraFocusOn(it);\n                        }}\n                    />\n                );\n            });\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div className={classnames(\"search\")}>\n                        {State.search.candidates.length !== 0 && (\n                            <Menu\n                                large={true}\n                                className={classnames(\"search-menu\")}\n                                onMouseLeave={() => {\n                                    State.search.isPreviewing = false;\n                                }}\n                            >\n                                {this.renderSearchResults()}\n                            </Menu>\n                        )}\n                        <InputGroup\n                            asyncControl={true}\n                            large={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange(\n                                (value) => (State.search.searchStr = value)\n                            )}\n                            placeholder=\"Search any Node...\"\n                            value={State.search.searchStr}\n                        />\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport { Alert, Button, Card, Code, H6, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\n\ninterface Props {\n    /**\n     * the node id of the select node to delete Edge\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class DeleteEdgeInteractionPanel extends React.Component<Props, {}> {\n        state = {\n            targetNode: null as string | null,\n            deleteAlertOpen: false,\n        };\n\n        get neighbors(): string[] {\n            return State.graph.rawGraph.neighbors(this.props.onNode);\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            let targetNode = this.neighbors[rowIndex];\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                targetNode: targetNode,\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            if (this.state.targetNode === null) {\n                return null;\n            }\n\n            let edgeToDelete: string | undefined;\n\n            if (\n                (edgeToDelete = State.graph.rawGraph.edge(\n                    this.state.targetNode,\n                    this.props.onNode\n                )) === undefined\n            ) {\n                edgeToDelete = State.graph.rawGraph.edge(\n                    this.props.onNode,\n                    this.state.targetNode\n                );\n            }\n\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(edgeToDelete as string);\n                        this.setState({ deleteAlertOpen: false });\n                        State.preferences.deleteEdgePanelOpen = false;\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with Key{\" \"}\n                        <Code>{edgeToDelete as string}</Code> between Node ID{\" \"}\n                        <Code>{this.state.targetNode}</Code> and Node ID{\" \"}\n                        <Code>{this.props.onNode}</Code>. This action cannot be\n                        reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        neighborsRenderer: ICellRenderer = (rowIndex: number) => {\n            return (\n                <Cell interactive={true}>\n                    <div\n                        onMouseEnter={() => {\n                            State.graphDelegate.cameraFocusOn(\n                                this.props.onNode,\n                                400\n                            );\n                            State.interaction.selectedEdge = State.interaction.getEdgeKey(\n                                this.props.onNode,\n                                this.neighbors[rowIndex]\n                            ) as string;\n                        }}\n                    >\n                        {this.neighbors[rowIndex]}\n                    </div>\n                </Cell>\n            );\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card className={classnames(\"node-details-table\")}>\n                        <Button\n                            icon=\"cross\"\n                            onClick={() => {\n                                State.preferences.deleteEdgePanelOpen = false;\n                                State.interaction.selectedEdge = null;\n                                State.graphDelegate.graphDelegateMethods.refresh(); // update color of selected edges\n                            }}\n                        >\n                            Close\n                        </Button>\n                        <H6> Node ID: {this.props.onNode}</H6>\n                        <Table\n                            numRows={this.neighbors.length}\n                            defaultRowHeight={30}\n                            renderMode={RenderMode.NONE}\n                        >\n                            <Column\n                                name=\"\"\n                                cellRenderer={this.deleteEdgeRenderer}\n                                //@ts-ignore\n                                style={this.style}\n                            />\n                            <Column\n                                name=\"Node ID\"\n                                //@ts-ignore\n                                intent={Intent.PRIMARY}\n                                cellRenderer={this.neighborsRenderer}\n                            />\n                        </Table>\n                        {this.deleteEdgeAlert()}\n                    </Card>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Classes, Slider } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\n\nexport default observer(\n    class ClusterPanel extends React.Component {\n        state = {\n            shapeOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        forceCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Force\"\n                    isOpen={this.state.forceOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            forceOptionOpen: !this.state.forceOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Cluster Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.clusterForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.clusterForce}\n                        />\n                    </div>\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Normal Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.normalForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.normalForce}\n                        />\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <p style={{ textAlign: \"left\" }}>\n                            Cluster Shape:\n                            <span style={{ float: \"right\" }}>\n                                <SimpleSelect\n                                    items={[\"convexHull\", \"sphere\"]}\n                                    text={State.css.cluster.shape}\n                                    onSelect={(it) => {\n                                        State.css.cluster.shape = it;\n                                    }}\n                                    small={true}\n                                />\n                            </span>\n                        </p>\n                    </div>\n                    {State.css.cluster.shape === \"sphere\" && (\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            Cluster Resolution:\n                            <br />\n                            <Slider\n                                min={2}\n                                max={20}\n                                stepSize={1}\n                                labelStepSize={5}\n                                onChange={(value) => {\n                                    State.css.cluster.resolution = value;\n                                    State.graphDelegate.graphDelegateMethods.refresh();\n                                }}\n                                value={State.css.cluster.resolution}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Clusters</p>\n                    </div>\n                    {this.forceCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport {\n    Button,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport { ColorResult, SketchPicker } from \"react-color\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the color to be previewed on the button\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    color: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     *\n     * @memberof Props\n     */\n    onChange: (color: ColorResult) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class ColorPicker extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Popover\n                    interactionKind={PopoverInteractionKind.CLICK}\n                    popoverClassName=\"bp3-popover-content-sizing\"\n                    position={Position.RIGHT}\n                >\n                    <Button\n                        text=\"  \"\n                        style={{\n                            backgroundColor: this.props.color,\n                        }}\n                        small={true}\n                    />\n                    <div>\n                        <SketchPicker\n                            color={this.props.color}\n                            onChange={(it) => {\n                                this.props.onChange(it);\n                            }}\n                        />\n                    </div>\n                </Popover>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Classes } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    class EdgesPanel extends React.Component {\n        state = {\n            sizeOptionOpen: false,\n            thicknessOptionOpen: false,\n            colorOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        render() {\n            return (\n                <div>\n                    <p>{`Modifying All Edges`}</p>\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Default Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.defaultColor}\n                                            onChange={(it) => {\n                                                State.css.edge.defaultColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Selected Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.selectedColor}\n                                            onChange={(it) => {\n                                                State.css.edge.selectedColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Highlight Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={\n                                                State.css.edge.highlightColor\n                                            }\n                                            onChange={(it) => {\n                                                State.css.edge.highlightColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Slider, Switch } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport classnames from \"classnames\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    class LabelsPanel extends React.Component {\n        render() {\n            return (\n                <div>\n                    <Switch\n                        label=\"Show Node Label\"\n                        checked={State.css.label.show}\n                        onChange={() => {\n                            State.css.label.show = !State.css.label.show;\n                            State.graphDelegate.graphDelegateMethods.refresh();\n                        }}\n                    />\n                    <br />\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Label Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={10}\n                            stepSize={1}\n                            labelStepSize={2}\n                            onChange={(value) => {\n                                State.css.label.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.label.size}\n                        />\n                        <br />\n                        <p style={{ textAlign: \"left\" }}>\n                            Label Color:\n                            <span style={{ float: \"right\" }}>\n                                <ColorPicker\n                                    color={State.css.label.color}\n                                    onChange={(it) => {\n                                        State.css.label.color = it.hex;\n                                        State.graphDelegate.graphDelegateMethods.refresh();\n                                    }}\n                                />\n                            </span>\n                        </p>\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Classes, Slider } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    class NodesPanel extends React.Component {\n        state = {\n            timeOutRef: null,\n            colorOptionOpen: false,\n            sizeOptionOpen: false,\n            shapeOptionOpen: false,\n        };\n\n        colorCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Color\"\n                    isOpen={this.state.colorOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            colorOptionOpen: !this.state.colorOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Default Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.defaultColor}\n                                        onChange={(it) => {\n                                            State.css.node.defaultColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Selected Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.selectedColor}\n                                        onChange={(it) => {\n                                            State.css.node.selectedColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Highlight Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.highlightColor}\n                                        onChange={(it) => {\n                                            State.css.node.highlightColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        sizeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Size\"\n                    isOpen={this.state.sizeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            sizeOptionOpen: !this.state.sizeOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Node Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.node.size}\n                        />\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Node Resolution:\n                        <br />\n                        <Slider\n                            min={2}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.resolution = value;\n                            }}\n                            value={State.css.node.resolution}\n                        />\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Nodes</p>\n                    </div>\n                    {this.colorCollapse()}\n                    {this.sizeCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n","import { H3, Tab, Tabs } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport ClusterPanel from \"./ClusterPanel\";\nimport EdgesPanel from \"./EdgesPanel\";\nimport LabelsPanel from \"./LabelsPanel\";\nimport NodesPanel from \"./NodesPanel\";\n\nexport default observer(\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <H3>Graph Options</H3>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        <Tab\n                            id=\"clusters\"\n                            title=\"Clusters\"\n                            panel={<ClusterPanel />}\n                        />\n\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Intent, Position, Tooltip } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { VisualizationMode } from \"../../state/NodeInteractionStore\";\nimport { renderFilteredItems } from \"@blueprintjs/select\";\n\nexport default observer(\n    class InteractionModePanel extends React.Component {\n        getIntent(mode: VisualizationMode) {\n            switch (mode) {\n                case VisualizationMode.Normal:\n                    return Intent.PRIMARY;\n\n                case VisualizationMode.NodeSelection:\n                    return Intent.WARNING;\n\n                case VisualizationMode.ClusterSelection:\n                    return Intent.SUCCESS;\n\n                case VisualizationMode.ClusterSplitting:\n                    return Intent.DANGER;\n            }\n        }\n\n        renderMode(mode: VisualizationMode) {\n            return (\n                <Tooltip content={mode} position={Position.BOTTOM}>\n                    <Button\n                        className={classnames([\n                            Classes.BUTTON,\n                            Classes.MINIMAL,\n                        ])}\n                        text={mode}\n                        intent={this.getIntent(mode)}\n                        active={State.interaction.visualizationMode === mode}\n                        onClick={() => {\n                            State.interaction.visualizationMode = mode;\n                        }}\n                    />\n                </Tooltip>\n            );\n        }\n\n        render() {\n            return (\n                <div className=\"selection-action-panel\">\n                    {this.renderMode(VisualizationMode.Normal)}\n                    {this.renderMode(VisualizationMode.NodeSelection)}\n                    {this.renderMode(VisualizationMode.ClusterSelection)}\n                    {this.renderMode(VisualizationMode.ClusterSplitting)}\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Menu, MenuDivider, MenuItem } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { computed, makeObservable } from \"mobx\";\n\ninterface Props {\n    /**\n     * what place this RightClick interaction is activated\n     *\n     * @type {(\"Node\" | \"Cluster\" | \"Background\")}\n     */\n    on: \"Node\" | \"Cluster\" | \"Background\";\n}\n\nexport default observer(\n    class RightClickPanel extends React.Component<Props, {}> {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        renderNodeMenu() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuDivider\n                        title={\n                            (\"Node ID: \" +\n                                State.interaction\n                                    .currentlyHoveredNodeId) as string\n                        }\n                    />\n                    <MenuItem\n                        icon=\"graph-remove\"\n                        text=\"Delete Node\"\n                        onClick={() => {\n                            State.graph.mutating.dropNode(\n                                State.interaction\n                                    .currentlyHoveredNodeId as string\n                            );\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                    <MenuItem\n                        icon=\"new-link\"\n                        text=\"Add Edge\"\n                        onClick={() => {\n                            State.preferences.AddEdgeDialogOpen = true;\n                        }}\n                    />\n                    <MenuItem\n                        icon=\"cross\"\n                        text=\"Delete Edge\"\n                        onClick={() => {\n                            State.preferences.deleteEdgePanelOpen = true;\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                </Menu>\n            );\n        }\n\n        renderClusterMenu() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem\n                        icon=\"new-object\"\n                        text=\"Split Cluster\"\n                        onClick={() => {}}\n                    />\n                    <MenuItem\n                        icon=\"group-objects\"\n                        text=\"Merge Cluster\"\n                        onClick={() => {}}\n                    />\n                    <MenuDivider />\n                </Menu>\n            );\n        }\n\n        renderBackgroundMenu() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem\n                        icon=\"new-object\"\n                        text=\"Add Node\"\n                        onClick={() => {\n                            State.preferences.AddNodeDialogOpen = true;\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuItem\n                        icon=\"group-objects\"\n                        text=\"Add Node\"\n                        onClick={() => {\n                            State.preferences.AddNodeDialogOpen = true;\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                </Menu>\n            );\n        }\n\n        render() {\n            if (this.props.on === \"Node\") {\n                return this.renderNodeMenu();\n            } else if (this.props.on === \"Cluster\") {\n                return this.renderClusterMenu();\n            } else if (this.props.on === \"Background\") {\n                return this.renderBackgroundMenu();\n            }\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport NodeDetailPanel from \"./panels/NodeDetailPanel\";\nimport MultiDetailPanel from \"./panels/MultiDetailPanel\";\nimport SearchPanel from \"./panels/SearchPanel\";\nimport RightClickNodePanel from \"./panels/RightClickPanel\";\nimport DeleteEdgeInteractionPanel from \"./panels/DeleteEdgeInteractionPanel\";\nimport GraphOptionsCard from \"./panels/GraphOptionsCard\";\nimport InteractionModePanel from \"./panels/InteractionModePanel\";\nimport RightClickPanel from \"./panels/RightClickPanel\";\n\nexport default observer(\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.isGraphOptionsCardHidden = !State.preferences\n                .isGraphOptionsCardHidden;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.isGraphOptionsCardHidden\n                                    ? this.optionsInvisible\n                                    : this.optionsVisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            />\n                            <br />\n                            <GraphOptionsCard />\n                        </div>\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.isGraphOptionsCardHidden\n                                        ? this.sideButtonVis\n                                        : this.sideButtonInv\n                                }\n                            />\n                        </div>\n                    </div>\n\n                    {/* single selected */}\n                    {/* {State.graph.selectedNodes.length === 1 && (\n                        <NodeDetail node={State.graph.currentlyHoveredId} />\n                    )} */}\n                    {State.interaction.currentlyHoveredNodeId &&\n                        State.interaction.selectedNodes.length === 0 && (\n                            <NodeDetailPanel\n                                onNode={\n                                    State.interaction.currentlyHoveredNodeId\n                                }\n                            />\n                        )}\n\n                    {/* multiple selected */}\n                    {/* {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n                        <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n                    )} */}\n                    {State.interaction.selectedNodes.length !== 0 && (\n                        <MultiDetailPanel />\n                    )}\n\n                    <SearchPanel />\n                    {State.preferences.rightClickPanelOpen &&\n                        State.preferences.rightClickOn && (\n                            <RightClickPanel\n                                on={State.preferences.rightClickOn}\n                            />\n                        )}\n                    {State.preferences.deleteEdgePanelOpen &&\n                        State.interaction.selectedNode && (\n                            <DeleteEdgeInteractionPanel\n                                onNode={State.interaction.selectedNode}\n                            />\n                        )}\n                    <InteractionModePanel />\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/visualizer\";\n// import NodeDetail from \"./components/panels/NodeDetailPanel\";\n// import State from \"./state\";\n// import EdgesPanel from \"./components/panels/EdgesPanel\";\n// import LabelsPanel from \"./components/panels/LabelsPanel\";\n// import SelectionPanel from \"./components/panels/SelectionPanel\";\n// import GlobalPanel from \"./components/panels/GlobalPanel\";\n// import NodesPanel from \"./components/panels/NodesPanel\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}