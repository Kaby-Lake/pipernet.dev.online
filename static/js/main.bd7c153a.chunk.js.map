{"version":3,"sources":["state/PreferencesStore.ts","state/Cluster3dObjectStore.ts","state/GraphDelegate.ts","components/ComponentRef.tsx","state/GraphMutation.ts","state/GraphStore.ts","state/ImportStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/CssStore.ts","constants/index.ts","state/ClusterInteractionStore.ts","state/NodeInteractionStore.ts","state/HelperStackPanelStore.ts","state/SignalStore.tsx","state/index.ts","components/utils/InputFormUtils.ts","state/utils/ToasterUtils.ts","components/utils/ClusterChooser.tsx","images/icon.png","components/panels/SearchPanel.tsx","components/Navbar.tsx","components/utils/SimpleSelect.tsx","components/dialogs/importDialog.tsx","components/dialogs/ExportDialog.tsx","components/utils/DataSheetDialogWrapper.tsx","components/dialogs/NodeDataSheetDialog.tsx","components/utils/NodeChooser.tsx","components/dialogs/EdgeDataSheetDialog.tsx","components/utils/NodeAdder.tsx","components/dialogs/AddNodeDialog.tsx","components/dialogs/AddEdgeDialog.tsx","components/dialogs/ImportGEXFDialog.tsx","components/Dialogs.tsx","components/panels/SelectionBox.tsx","state/utils/MouseEventUtils.ts","components/panels/CanvasDraw/CanvasDrawFreehandPanel.tsx","components/panels/CanvasDraw/CanvasDrawStraightLinePanel.tsx","components/panels/CanvasDraw/CanvasDrawFreeCirclePanel.tsx","components/panels/CanvasDraw/CanvasDrawCenterCirclePanel.tsx","components/panels/CanvasDraw/CanvasDrawPanel.tsx","components/visualize/Visualizer.tsx","components/panels/NodeDetailPanel.tsx","components/panels/MultiDetailPanel.tsx","components/panels/DeleteEdgeInteractionPanel.tsx","components/utils/Collapsable.tsx","components/panels/GraphOptions/ClusterPanel.tsx","components/utils/ColorPicker.tsx","components/panels/GraphOptions/EdgesPanel.tsx","components/panels/GraphOptions/LabelsPanel.tsx","components/panels/GraphOptions/NodesPanel.tsx","components/panels/GraphOptions/GraphOptionsCard.tsx","components/utils/FormClusterOptionsCard.tsx","components/utils/FormTwoClusterOptionsCard.tsx","components/panels/InteractionModePanel/ClusterSplittingPanelStack.tsx","components/panels/InteractionModePanel/NodeSelectionPanel.tsx","components/panels/InteractionModePanel/InteractionModePanel.tsx","components/utils/MenuItemWithTooltip.tsx","components/panels/RightClickPanel/RightClickNodeMenu.tsx","components/panels/RightClickPanel/RightClickClusterMenu.tsx","components/panels/RightClickPanel/RightClickBackgroundMenu.tsx","components/panels/RightClickPanel/RightClickPanel.tsx","components/FloatingCards.tsx","App.tsx","index.js"],"names":["VisualizationMode","PreferencesStore","rightClickPositionX","rightClickPositionY","exportDialogOpen","preferenceDialogOpen","statisticsDialogOpen","AddNodeDialogOpen","AddEdgeDialogOpen","nodeDataSheetDialogOpen","edgeDataSheetDialogOpen","rightClickOn","rightClickPanelOpen","deleteEdgePanelOpen","graphOptionsCardOpen","visualizationMode","Normal","makeAutoObservable","this","except","Cluster3dObjectStore","threeScene","fusionClusterObjects","clusterObjectsMap","UUID2ClusterValueMap","canAlterNodePosition","remove","dispose","Map","initialMap","State","cluster","attributePoints","forEach","value","key","set","createMesh","THREE","add","clusterBy","convexHullObjects","initEmptyMapAndFusion","mesh","geometry","copy","convexHullObject","uuid","res","children","every","item","material","newMap","points","get","length","sphere","SphereGeometry","css","node","size","resolution","translate","x","y","z","tempArray","vector","push","positions","Float32Array","setAttribute","computeBoundingSphere","sphereGeo","boundingSphere","radius","center","shape","ConvexGeometry","Array","from","convexGeometry","visualize","graph","rawGraph","getNodeAttribute","geom","name","color","attributeColor","meshMaterial","meshNormalMaterial","oldOpacity","opacity","setTimeout","transparent","blending","side","depthWrite","shininess","_object","meshId","clusterInteraction","currentlyHoveredClusterId","meshHighlightMaterial","selectedClusters","includes","meshSelectedMaterial","chaserListX","chaserListY","chaserListZ","attributeKeys","sphereGeometry","position","computeNodeSphereDistribution","index","attribute","chaserX","chaser","initialValue","duration","target","chaserY","chaserZ","interval","setInterval","graphDelegate","graphDelegateMethods","refresh","clearInterval","numberOfPoints","dlong","Math","PI","sqrt","dz","long","ptsOnSphere","r","ptNew","cos","sin","createCustomNodeObject","_id","_cluster","id","hovered","chosen","multiSelected","isClusterNode","createCustomLinkObject","_source","_target","source","isClusterLink","GraphDelegate","clusterObject","_graphDelegateMethods","scene","newGraph","addInvisibleClusterNode","decorateRawGraph","tempGraph","nodes","links","forEachNode","attributes","forEachEdge","edge","oldGraph","graphCopy","names","getAttributeValues","clusterID","addNode","_visualize","addEdgeWithKey","nodeObject","linkObject","nodeId","distance","distRatio","hypot","cameraPosition","d3Force","link","clusterForce","normalForce","d3ReheatSimulation","ComponentRef","nodeDetail","multiNodeDetail","visualizer","clusterSplittingPanelStack","_instance","instance","reaction","interaction","currentlyHoveredNodeId","forceUpdate","GraphMutation","_this","that","newAttributes","hasOwnProperty","decorateRawNode","refreshGraph","dropNode","decorateRawEdge","addEdge","dropEdge","GraphStore","Graph","allowSelfLoops","multi","type","mutating","metadata","snapshotName","nodeProperties","_rawGraph","_metadata","flush","updateVisualizationGraph","ImportStore","clusterMap","isLoading","edgeFileName","nodeFileName","gexfFileName","clusterFileName","importDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedClusterFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","delimiter","edgeFile","fromId","toId","clusterFile","parent","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","result","replace","parse","comment","trim","auto_parse","skip_empty_lines","undefined","err","Toaster","create","Position","TOP","show","message","intent","Intent","DANGER","timeout","gexf","readCSV","temparr","leaves","leave","child","buildClusterMap","config","fromColumn","parseInt","toColumn","tempNodes","readNodeCSV","toString","Object","assign","readEdgeCSV","idx","hasNode","importClusterFromCSV","keys","csvFile","fileResult","clusterLink","d3","clusterRoot","d","parentId","console","log","readGEXF","entries","getNodeAttributes","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","join","it","onerror","error","action","onClick","window","location","reload","text","nodeFileConfig","SearchStore","isPreviewing","searchStr","filterProps","outputList","searchStrIgnoreCase","toLocaleLowerCase","searchAttr","ClusterStore","to","setCluster","keyValueMap","Set","keyAttribute","values","attributeKeysMap","colors","randomcolor","seed","count","NodeGlobalConfig","defaultColor","chosenColor","multiSelectedColor","highlightColor","EdgeGlobalConfig","selectedColor","defaultWidth","highlightWidth","LabelConfig","ClusterConfig","autoPlot","CssStore","label","isAnimating","DrawMode","NAVBAR_HEIGHT","InteractionStore","chosenNode","selectedNodes","selectedEdge","boxSelectionOpen","boxSelection_startPoint","boxSelection_endPoint","left","min","top","right","max","down","Attributes","coords","graph2ScreenCoords","neighbors","neighbor","getEdgeKey","node1","node2","go","back","oldAttributeVisualize","updateVisualizeAttributeParser","getEdgeAttribute","newAttribute","oldAttributes","ClusterInteractionStore","chosenCluster","drawPanelActivate","drawMode","FreeLine","lineSegment","confirmClusterSplittingTempData","event","signal","isMovingCamera","meshSpotlightMaterial","getObjectById","indexOf","splice","isRightClickingCluster","preferences","closeAllPanel","clusterValue","setNodeAttribute","screenCoords","coord","tempLineSegment","point","polygonContains","updateNodeVisualizeAttribute","centerX","centerY","pow","valueInWhite","valueInRed","nodesToAlter","HelperStackPanelStore","clusterSplittingPanelStackOpen","clusterSplittingCurrentStep","NodeSelectionPanelOpen","SignalStore","AppState","import","search","helper","NodeInteractionStore","privateConstructor","_state","autorun","renderImportEdgePreview","renderImportNodePreview","resumeAnimation","pauseAnimation","ClusterSplitting","step","order","number","fireImmediately","updateAllMaterials","selectedNode","updateEdgeVisualizeAttribute","currentlyHoveredNodeNeighborEdges","delay","handleStringChange","handler","stringifyNodeDetail","parseNumberOrString","numberVal","Number","isNaN","createToaster","NONE","observer","itemRenderer","props","handleClick","propertiesWithNone","unshift","items","showNone","fullProperties","filterable","onItemSelect","selected","onSelect","syncWith","React","Component","defaultProps","ClusterAdder","state","style","display","justifyContent","leftElement","icon","onChange","setState","placeholder","fill","_","onCreate","PRIMARY","filter","prefix","disabled","FILTER_OPTIONS","inputValueRenderer","a","query","onQueryChange","itemListPredicate","candidates","onMouseOver","cameraFocusOn","onMouseLeave","openOnKeyDown","noResults","popoverProps","minimal","zIndex","align","Alignment","LEFT","title","src","logo","width","height","alt","convexHullObject2","placement","BOTTOM","marginTop","marginLeft","checked","RIGHT","marginRight","open","CommonItemRenderer","itemPredicate","object","toLowerCase","small","PreviewTable","renderWrapper","className","numRows","selectedRegions","rows","cols","cellRenderer","i","multiDialogRef","createRef","canImport","renderNodesSelection","onInputChange","files","renderEdgesSelection","renderClusterSelection","newDelimiter","ref","classnames","isOpen","onClose","finalButtonProps","importGraphFromCSV","then","setGraph","hasAttribute","getAttribute","panel","Classes","DIALOG_BODY","alignItems","maxWidth","renderDelimiterSelection","nextButtonProps","large","ready","_node","_edge","write","headers","exportData","export","data","edges","interactive","elevation","Elevation","ONE","computeGEXFFile","filename","computeNodeFile","separator","computeEdgeFile","loading","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","for","onOpened","minWidth","renderTable","GraphNodeTable","filterQuery","addNodeDialogOpen","deleteAlertOpen","nodeToDelete","renderColumns","rowIndex","columnIndex","renderCell","element","cell","filteredTable","newVal","setValue","onConfirm","tooltip","deleteNodeRenderer","deleteNodeAlert","cancelButtonText","confirmButtonText","onCancel","textAlign","newTable","asyncControl","leftIcon","defaultRowHeight","SUCCESS","select","labelFor","labelInfo","rightIcon","GraphEdgeTable","addEdgeDialogOpen","edgeToDelete","chosenSource","chosenTarget","deleteEdgeRenderer","deleteEdgeAlert","addEdgeDialog","onClosed","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","hasEdge","renderMode","RenderMode","newNodeId","canImportTag","renderAttributesForm","newValue","componentDidMount","prop","autoFocus","rightElement","onAdded","fileIsSelect","importGraphFromGEXF","renderImportButton","Dialogs","boxStyle","startPoint","endPoint","mouseDown","onMouseDownCallback","startpoint","clientX","clientY","onMouseMoveCallback","_calculateSelectionBox","onMouseUpCallback","boxSelectNode","abs","onMouseDown","onMouseMove","onMouseUp","onDocumentLeftClick","evt","ReactDOM","findDOMNode","box","getBoundingClientRect","camera","unproject","intersects","sub","normalize","intersectObjects","clusterLeftClickCallback","onDocumentRightClick","clusterRightClickCallback","onDocumentMouseMove","clusterHoverCallback","canvasRef","clearDrawing","componentWillUnmount","current","JSON","canvasMethods","getSaveData","exportDrawing","boundingRect","canvasHeight","canvasWidth","lazyRadius","brushRadius","brushColor","catenaryColor","drawPoints","reverse","computeSplitCluster","clear","ctx","lineJoin","lineCap","clearRect","canvas","lineWidth","beginPath","moveTo","lineTo","strokeStyle","stroke","getContext","centerPoint","computeSplitClusterInCircle","arc","StraightLine","FreeCircle","CenterCircle","CanvasDrawCenterCirclePanel","visualizationGraph","nodePointerInteraction","clicking","graphRef","hoverNodeCallback","previousNode","nodeLeftClickCallback","NodeSelection","nodeRightClickCallback","graphMethods","backgroundClickCallback","backgroundRightClickCallback","renderGraph","graphData","nodeLabel","nodeRelSize","nodeColor","computeNodeColor","nodeVisibility","nodeResolution","nodeThreeObjectExtend","nodeThreeObject","sprite","SpriteText","textHeight","backgroundColor","visible","translateX","onNodeHover","onNodeClick","onNodeRightClick","onNodeDragEnd","fx","fy","fz","linkVisibility","linkWidth","computeEdgeWidth","linkColor","computeEdgeColor","onBackgroundRightClick","onBackgroundClick","enablePointerInteraction","onEngineTick","clusterDelegation","cooldownTicks","onEngineStop","alterNodePosition","debouncedMouseMoveCallback","DOM","debounce","CustomMouseEvent","addEventListener","removeEventListener","mountDelegateMethods","clusterInteractionListener","updateClusterForce","controls","nodeInteractionListener","ClusterSelection","cellRenderer_property","cellRenderer_value","onNode","formatLongFloat","nodeAttributeValue","num","parseFloat","toPrecision","enableRowHeader","targetNode","neighborsRenderer","onMouseEnter","LARGE","FILL","onToggle","shapeOptionOpen","forceOptionOpen","forceCollapse","stepSize","labelStepSize","shapeCollapse","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","sizeOptionOpen","thicknessOptionOpen","colorOptionOpen","hex","timeOutRef","colorCollapse","sizeCollapse","animate","Expander","selectedAttribute","callback","background","Colors","DARK_GRAY3","marginBottom","renderInput","anotherValue","FormClusterOptionsCard","titles","renderFirstPanel","renderSecondPanel","selectedValue","renderThirdPanel","value1","value2","splitCluster","renderWhichPanel","currentStep","renderWhichBack","PANEL_STACK_HEADER_BACK","renderPanelStack","PANEL_STACK_VIEW","minHeight","PANEL_STACK_HEADER","HEADING","ellipsize","usePortal","getMessage","BUTTON","MINIMAL","active","WARNING","mode","getIntent","MenuItemWithTooltip","tooltipText","formNewClusterOpen","clusterName","multiline","formNewCluster","releaseFromCluster","mergeSelectedClustersOpen","mergeNeighborsOpen","mergeNearestClustersOpen","nodeIds","forEachNeighbor","computeDistance","distanceTo","objects","shortest","mergeSelectedClusters","previewClusterNeighbors","previewNearestNeighbors","releaseSelectedClusters","deleteSelectedClusters","makeObservable","stylePosition","computed","on","RightClickNodeMenu","RightClickClusterMenu","RightClickBackgroundMenu","ELEVATION_1","renderMenuContent","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","TWO","GraphOptionsCard","paddingTop","paddingRight","paddingBottom","NodeDetailPanel","MultiDetailPanel","App","DARK","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd7c153a.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\n/**\n * @description the four interaction modes\n * @author Zichen XU, Zhiyuan LYU\n * @export\n * @enum {number}\n */\nexport enum VisualizationMode {\n    Normal = \"Normal\", // normal state\n    ClusterSelection = \"Cluster Selection\", // selecting the cluster to be Merged\n    NodeSelection = \"Node Selection\", // multi-selecting the node\n    ClusterSplitting = \"Cluster Splitting\", // drawing the line to split the cluster\n}\n\n/**\n * @description it controls the open/close of dialogs/panels\n * and the VisualizationMode(Normal/NodeSelection/ClusterSelection/ClusterSplitting) as well\n * @author Zichen XU\n * @export\n * @class PreferencesStore\n */\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // Right Click Position\n\n    rightClickPositionX = 30;\n    rightClickPositionY = 30;\n\n    // Dialog\n\n    exportDialogOpen = false;\n    private preferenceDialogOpen = false;\n    private statisticsDialogOpen = false;\n\n    AddNodeDialogOpen = false;\n    AddEdgeDialogOpen = false;\n\n    nodeDataSheetDialogOpen = false;\n    edgeDataSheetDialogOpen = false;\n\n    // Panel\n\n    rightClickOn = null as null | \"Node\" | \"Cluster\" | \"Background\";\n    rightClickPanelOpen = false;\n    deleteEdgePanelOpen = false;\n\n    graphOptionsCardOpen = false;\n\n    closeAllPanel(except?: string) {\n        this.deleteEdgePanelOpen = false;\n        this.graphOptionsCardOpen = false;\n        if (except !== \"rightClickPanel\") {\n            this.rightClickPanelOpen = false;\n        }\n    }\n\n    // 3D Graph\n\n    visualizationMode: VisualizationMode = VisualizationMode.Normal;\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport { SphereGeometry } from \"three\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport State from \".\";\nimport chaser from \"chaser\";\n\n/**\n * @description the code in this file basically initialize the corresponding Object3D for each cluster\n * control the addition/deletion/disposition/accessing/updatePosition/updateMaterial of clusters inside the scene\n * according to the updated map from ClusterStore\n * @author Zichen XU\n * @export\n * @class Cluster3dObjectStore\n */\nexport default class Cluster3dObjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description the THREE.js WebGL Scene of the visualization\n     * @author Zichen XU\n     * @type {THREE.Scene}\n     */\n    threeScene!: THREE.Scene;\n\n    /**\n     * @description all the clusters should form a 3D Group to be imported into Scene\n     * if no cluster attribute is set, this will be set to null\n     *\n     * each children is a THREE.Mesh\n     * @author Zichen XU\n     * @type {(THREE.Group | null)}\n     */\n    fusionClusterObjects: THREE.Group | null = null;\n\n    /**\n     * @description the map between attribute value and its corresponding Mesh Group\n     * if you want to update the geometry, plz update all the children inside which Mesh Group\n     * if no cluster attribute is set, this will be set to null\n     * @author Zichen XU\n     * @type {(Map<string | number, THREE.Mesh> | null)}\n     */\n    clusterObjectsMap: Map<string | number, THREE.Mesh> | null = null;\n\n    /**\n     * @description create empty BufferGeometry and mesh with colour\n     * then initialize $fusionClusterObjects and $clusterObjectsMap with it\n     * and then add the THREE.Group to the Scene\n     * @author Zichen XU\n     * @returns {*}\n     */\n    initEmptyMapAndFusion() {\n        if (this.fusionClusterObjects) {\n            this.threeScene.remove(this.fusionClusterObjects);\n            this.dispose();\n        }\n        // if (State.cluster.clusterBy === null) {\n        //     return;\n        // }\n        this.UUID2ClusterValueMap = new Map<string, string | number>();\n        let initialMap = new Map<string | number, THREE.Mesh>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            initialMap.set(\n                key,\n                this.createMesh(new THREE.BufferGeometry(), key)\n            );\n        });\n\n        this.clusterObjectsMap = initialMap;\n        this.fusionClusterObjects = new THREE.Group();\n        initialMap.forEach((value) => {\n            this.fusionClusterObjects?.add(value);\n        });\n        this.threeScene.add(this.fusionClusterObjects);\n    }\n\n    /**\n     * @description should be called on each render frame\n     * will update the geometry inside each cluster object\n     *\n     * if is the first time (both are null), will run initEmptyMapAndFusion() first\n     *\n     * if meet with clusterBy == null, will dispose all Object3d\n     * @author Zichen XU\n     * @returns {*}\n     */\n    clusterDelegation() {\n        if (State.cluster.clusterBy === null) {\n            return;\n        } else {\n            if (\n                this.fusionClusterObjects == null ||\n                this.convexHullObjects == null\n            ) {\n                this.initEmptyMapAndFusion();\n            }\n            this.clusterObjectsMap?.forEach(\n                (mesh: THREE.Mesh, key: string | number) => {\n                    mesh.geometry.copy(this.convexHullObject(key));\n                }\n            );\n        }\n    }\n\n    /**\n     * @description get the THREE.Mesh object by its uuid\n     * @author Zichen XU\n     * @param {string} uuid\n     * @returns {*}  {(THREE.Mesh | null)}\n     */\n    getObjectById(uuid: string): THREE.Mesh | null {\n        let res: THREE.Object3D | null = null;\n        this.fusionClusterObjects?.children.every((item: THREE.Object3D) => {\n            if (item.uuid === uuid) {\n                res = item;\n                return false;\n            } else {\n                return true;\n            }\n        });\n        return res;\n    }\n\n    /**\n     * @description dispose the geometries and materials in every clusterObject\n     * and set these props to be null, which indicates that no additional 3d object is added into Scene\n     * @author Zichen XU\n     */\n    private dispose() {\n        this.clusterObjectsMap?.forEach((mesh: THREE.Mesh) => {\n            let material = mesh.material as THREE.Material;\n            material.dispose();\n            mesh.geometry.dispose();\n        });\n        this.clusterObjectsMap = null;\n        this.fusionClusterObjects = null;\n        this.UUID2ClusterValueMap = new Map<string, string | number>();\n    }\n\n    /**\n     * @description the map between the value of the cluster and the BufferGeometry that this cluster created\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string | number, THREE.BufferGeometry>)}\n     */\n    get convexHullObjects(): Map<string | number, THREE.BufferGeometry> {\n        let newMap = new Map<string | number, THREE.BufferGeometry>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            newMap.set(key, this.convexHullObject(key));\n        });\n        return newMap;\n    }\n\n    /**\n     * @description get the computed convexHull BufferGeometry of the specified attribute value\n     * @author Zichen XU\n     * @param {(string | number)} key\n     * @returns {*}  {THREE.BufferGeometry}\n     */\n    private convexHullObject(key: string | number): THREE.BufferGeometry {\n        let points = State.cluster.attributePoints.get(key) as THREE.Vector3[];\n\n        if (!points || points.length === 0) {\n            return new THREE.BufferGeometry();\n        } else if (points.length === 1) {\n            let sphere = new SphereGeometry(\n                State.css.node.size + 5,\n                State.css.cluster.resolution,\n                State.css.cluster.resolution\n            );\n            sphere.translate(points[0].x, points[0].y, points[0].z);\n            return sphere;\n        } else if (points.length < 4) {\n            // there are 2 or 3 points in this cluster\n            let geometry = new THREE.BufferGeometry();\n            let tempArray: number[] = [];\n            points.forEach((vector) => {\n                tempArray.push(vector.x, vector.y, vector.z);\n            });\n            const positions = new Float32Array(tempArray);\n            geometry.setAttribute(\n                \"position\",\n                new THREE.BufferAttribute(positions, 3)\n            );\n            geometry.computeBoundingSphere();\n            let sphereGeo = geometry.boundingSphere as THREE.Sphere;\n            let sphere = new SphereGeometry(\n                sphereGeo.radius + 5,\n                State.css.cluster.resolution,\n                State.css.cluster.resolution\n            );\n            sphere.translate(\n                sphereGeo.center.x,\n                sphereGeo.center.y,\n                sphereGeo.center.z\n            );\n            return sphere;\n        } else {\n            if (State.css.cluster.shape === \"convexHull\") {\n                // when there are more than 3 points, simply gnerate a convexgeometry\n                return new ConvexGeometry(Array.from(points));\n            } else {\n                // State.css.clusterShape === \"Sphere\"\n                let convexGeometry = new ConvexGeometry(Array.from(points));\n                convexGeometry.computeBoundingSphere();\n                let sphereGeo = convexGeometry.boundingSphere as THREE.Sphere;\n                let sphere = new SphereGeometry(\n                    sphereGeo.radius + 5,\n                    State.css.cluster.resolution,\n                    State.css.cluster.resolution\n                );\n                sphere.translate(\n                    sphereGeo.center.x,\n                    sphereGeo.center.y,\n                    sphereGeo.center.z\n                );\n                return sphere;\n            }\n        }\n    }\n\n    public convexHullObject2(cluster : string[]): THREE.BufferGeometry {\n        let points = [] as THREE.Vector3[];\n        cluster.forEach((node)=>{\n            let visualize = State.graph.rawGraph.getNodeAttribute(node,\"_visualize\");\n            points.push(\n                new THREE.Vector3(\n                    visualize.x,\n                    visualize.y,\n                    visualize.z\n                )\n            );\n        });\n\n        if (!points || points.length === 0) {\n            return new THREE.BufferGeometry();\n        } else if (points.length === 1) {\n            let sphere = new SphereGeometry(\n                State.css.node.size + 5,\n                State.css.cluster.resolution,\n                State.css.cluster.resolution\n            );\n            sphere.translate(points[0].x, points[0].y, points[0].z);\n            return sphere;\n        } else if (points.length < 4) {\n            // there are 2 or 3 points in this cluster\n            let geometry = new THREE.BufferGeometry();\n            let tempArray: number[] = [];\n            points.forEach((vector) => {\n                tempArray.push(vector.x, vector.y, vector.z);\n            });\n            const positions = new Float32Array(tempArray);\n            geometry.setAttribute(\n                \"position\",\n                new THREE.BufferAttribute(positions, 3)\n            );\n            geometry.computeBoundingSphere();\n            let sphereGeo = geometry.boundingSphere as THREE.Sphere;\n            let sphere = new SphereGeometry(\n                sphereGeo.radius + 5,\n                State.css.cluster.resolution,\n                State.css.cluster.resolution\n            );\n            sphere.translate(\n                sphereGeo.center.x,\n                sphereGeo.center.y,\n                sphereGeo.center.z\n            );\n            return sphere;\n        } else {\n            if (State.css.cluster.shape === \"convexHull\") {\n                // when there are more than 3 points, simply gnerate a convexgeometry\n                return new ConvexGeometry(Array.from(points));\n            } else {\n                // State.css.clusterShape === \"Sphere\"\n                let convexGeometry = new ConvexGeometry(Array.from(points));\n                convexGeometry.computeBoundingSphere();\n                let sphereGeo = convexGeometry.boundingSphere as THREE.Sphere;\n                let sphere = new SphereGeometry(\n                    sphereGeo.radius + 5,\n                    State.css.cluster.resolution,\n                    State.css.cluster.resolution\n                );\n                sphere.translate(\n                    sphereGeo.center.x,\n                    sphereGeo.center.y,\n                    sphereGeo.center.z\n                );\n                return sphere;\n            }\n        }\n    }\n\n    /**\n     * @description create a Three.Group, which contains 2 Three.Mesh, of the input geometry\n     * @author Zichen XU\n     * @private\n     * @param {THREE.BufferGeometry} geom\n     * @param {(string | number)} name\n     * @returns {*}  {THREE.Mesh}\n     */\n    private createMesh(\n        geom: THREE.BufferGeometry,\n        name: string | number\n    ): THREE.Mesh {\n        const color = State.cluster.attributeColor.get(name);\n        const meshMaterial = new THREE.MeshBasicMaterial();\n        let mesh = new THREE.Mesh(geom, meshMaterial);\n        //@ts-ignore\n        mesh[\"_color\"] = color;\n        this.meshNormalMaterial(mesh);\n        this.UUID2ClusterValueMap.set(mesh.uuid, name);\n        mesh.name = \"THREE_CLUSTER_\" + name;\n        return mesh;\n    }\n\n    /**\n     * @description a map from (the uuid that get from the WebGL) to (the cluster value of this cluster)\n     * @author Zichen XU\n     * @type {(Map<string, string | number>)}\n     */\n    UUID2ClusterValueMap!: Map<string, string | number>;\n\n    /**\n     * @description add the mesh material a short highlight\n     * @author Zichen XU\n     * @param {THREE.Mesh} mesh\n     */\n    meshSpotlightMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        const oldOpacity = material.opacity;\n        material.opacity = 1;\n        setTimeout(() => {\n            material.opacity = oldOpacity;\n        }, 50);\n    }\n\n    /**\n     * @description set the mesh material to be highlighted\n     * @author Zichen XU\n     * @private\n     * @param {THREE.Mesh} mesh\n     */\n    private meshHighlightMaterial(mesh: THREE.Mesh) {\n        mesh.material = new THREE.MeshBasicMaterial({\n            //@ts-ignore\n            color: mesh[\"_color\"],\n            transparent: true,\n            opacity: 0.6,\n            blending: THREE.AdditiveBlending,\n        });\n        mesh.material.side = THREE.DoubleSide;\n        mesh.material.depthWrite = false;\n    }\n\n    /**\n     * @description set the mesh material to be as selected\n     * @author Zichen XU\n     * @private\n     * @param {THREE.Mesh} mesh\n     */\n    private meshSelectedMaterial(mesh: THREE.Mesh) {\n        mesh.material = new THREE.MeshPhongMaterial({\n            //@ts-ignore\n            color: mesh[\"_color\"],\n            shininess: 20,\n            // emissive: \"white\",\n            opacity: 0.9,\n            transparent: true,\n        });\n        mesh.material.depthWrite = false;\n    }\n\n    /**\n     * @description set the mesh material back to normal\n     * @author Zichen XU\n     * @private\n     * @param {THREE.Mesh} mesh\n     */\n    public meshNormalMaterial(mesh: THREE.Mesh) {\n        mesh.material = new THREE.MeshBasicMaterial({\n            //@ts-ignore\n            color: mesh[\"_color\"],\n            transparent: true,\n            opacity: 0.15,\n        });\n        mesh.material.side = THREE.DoubleSide;\n        mesh.material.depthWrite = false;\n    }\n\n    /**\n     * @description update and refresh all materials of all the cluster objects\n     * @author Zichen XU\n     */\n    updateAllMaterials() {\n        this.fusionClusterObjects?.children.forEach((_object) => {\n            let mesh = _object as THREE.Mesh;\n            const meshId = mesh.uuid;\n            if (State.clusterInteraction.currentlyHoveredClusterId === meshId) {\n                this.meshHighlightMaterial(mesh);\n            } else if (\n                State.clusterInteraction.selectedClusters.includes(meshId)\n            ) {\n                this.meshSelectedMaterial(mesh);\n            } else {\n                this.meshNormalMaterial(mesh);\n            }\n        });\n    }\n\n    /**\n     * @description determine whether at this time can the node to be auto-altered to the surface of the sphere\n     * if the engine reheat, will set this to true.\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    canAlterNodePosition: boolean = false;\n\n    /**\n     * @description alter the nodes onto the surface of the sphere in 1s\n     * using the computeNodeSphereDistribution() to compute the position\n     * @author Zichen XU\n     */\n    alterNodePosition() {\n        interface chaserAndPosition {\n            chaser: any;\n            position: { x: number; y: number; z: number };\n        }\n\n        let chaserListX: chaserAndPosition[] = [];\n        let chaserListY: chaserAndPosition[] = [];\n        let chaserListZ: chaserAndPosition[] = [];\n\n        State.cluster.attributeKeys.forEach((points, cluster) => {\n            const sphereGeometry = this.clusterObjectsMap?.get(\n                cluster\n            ) as THREE.Mesh;\n            const radius = sphereGeometry.geometry.boundingSphere?.radius!;\n            let position = sphereGeometry.geometry.boundingSphere?.center!;\n            let newPositions = this.computeNodeSphereDistribution(\n                radius,\n                points.length\n            );\n\n            newPositions.forEach((value, index) => {\n                let attribute = State.graph.rawGraph.getNodeAttribute(\n                    points[index],\n                    \"_visualize\"\n                );\n                const chaserX = chaser({\n                    initialValue: attribute.x,\n                    duration: 1000,\n                });\n                chaserX.target = value.x + position.x;\n                chaserListX.push({ chaser: chaserX, position: attribute });\n\n                const chaserY = chaser({\n                    initialValue: attribute.y,\n                    duration: 1000,\n                });\n                chaserY.target = value.y + position.y;\n                chaserListY.push({ chaser: chaserY, position: attribute });\n\n                const chaserZ = chaser({\n                    initialValue: attribute.z,\n                    duration: 1000,\n                });\n                chaserZ.target = value.z + position.z;\n                chaserListZ.push({ chaser: chaserZ, position: attribute });\n            });\n        });\n\n        let interval = setInterval(() => {\n            chaserListX.forEach((value) => {\n                value.position.x = value.chaser.value;\n            });\n            chaserListY.forEach((value) => {\n                value.position.y = value.chaser.value;\n            });\n            chaserListZ.forEach((value) => {\n                value.position.z = value.chaser.value;\n            });\n            State.graphDelegate.graphDelegateMethods.refresh();\n        }, 50);\n        setTimeout(() => clearInterval(interval), 1000);\n    }\n\n    /**\n     * @description using a algorithm to compute a array of points that distribute on the sphere specified by the radius\n     * @author Zichen XU\n     * @private\n     * @param {number} radius\n     * @param {number} [numberOfPoints=45]\n     * @returns {*}  {{ x: number; y: number; z: number }[]}\n     */\n    private computeNodeSphereDistribution(\n        radius: number,\n        numberOfPoints = 45\n    ): { x: number; y: number; z: number }[] {\n        let dlong = Math.PI * (3.0 - Math.sqrt(5.0));\n        let dz = 2.0 / numberOfPoints;\n        let long = 0.0;\n        let z = 1.0 - dz / 2.0;\n        let ptsOnSphere: { x: number; y: number; z: number }[] = [];\n        for (let index = 0; index < numberOfPoints; index++) {\n            let r = Math.sqrt(1.0 - z * z);\n            let ptNew = {\n                x: Math.cos(long) * r * radius,\n                y: Math.sin(long) * r * radius,\n                z: z * radius,\n            };\n            ptsOnSphere.push(ptNew);\n            z = z - dz;\n            long = long + dlong;\n        }\n        return ptsOnSphere;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport State from \".\";\nimport {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport Cluster3dObjectStore from \"./Cluster3dObjectStore\";\n\nexport type Partial<T> = {\n    [P in keyof T]?: T[P];\n};\n\n/**\n * @description\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n * @author Zichen XU\n * @export\n * @interface ICustomNodeObject\n * @extends {NodeObject}\n */\nexport interface ICustomNodeObject extends NodeObject {\n    hovered: boolean;\n    chosen: boolean;\n    multiSelected: boolean;\n    isClusterNode?: boolean;\n}\n\n/**\n * @description\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n * @author Zichen XU\n * @export\n * @interface ICustomLinkObject\n * @extends {LinkObject}\n */\nexport interface ICustomLinkObject extends LinkObject {\n    chosen: boolean;\n    hovered: boolean;\n    isClusterLink?: boolean;\n}\n\n/**\n * @description create a default CustomNodeObject by specifying the id\n * and whether this node is the cluster node\n * @author Zichen XU\n * @export\n * @param {string} _id\n * @param {boolean} [_cluster=false]\n * @returns {*}  {ICustomNodeObject}\n */\nexport function createCustomNodeObject(\n    _id: string,\n    _cluster: boolean = false\n): ICustomNodeObject {\n    return {\n        id: _id,\n        hovered: false,\n        chosen: false,\n        multiSelected: false,\n        isClusterNode: _cluster,\n    };\n}\n\n/**\n * @description create a default CustomLinkObject by specifying the source and target id\n * and whether this node is the cluster link\n * @author Zichen XU\n * @export\n * @param {string} _source\n * @param {string} _target\n * @param {boolean} [_cluster=false]\n * @returns {*}  {ICustomLinkObject}\n */\nexport function createCustomLinkObject(\n    _source: string,\n    _target: string,\n    _cluster: boolean = false\n): ICustomLinkObject {\n    return {\n        source: _source,\n        target: _target,\n        hovered: false,\n        chosen: false,\n        isClusterLink: _cluster,\n    };\n}\n\n/**\n * @description acts as a bridge between the graphology graph data structure and the 3d-force-graph we use to render the 3D scene\n * The visualizationGraph() will compute the clustered graph to be send to 3d-renderer\n * The cluster data generated by ClusterStore will be used in this process.\n *\n * we define some customized interfaces ICustomNodeObject and ICustomLinkObject which extends from the Node/LinkObject of 3d-force-graph\n * with adding fields like hovered, selected and multiSelected to deal with the WebGL mouse interaction.\n * This class also includes reference to the React.Ref of 3d-renderer\n * with providing functions like auto-focus the camera as well as update the force inside the cluster.\n * @author Zichen XU\n * @export\n * @class GraphDelegate\n */\nexport default class GraphDelegate {\n    constructor() {\n        makeAutoObservable(this);\n        this.clusterObject = new Cluster3dObjectStore();\n    }\n\n    /**\n     * @description assign the force-graph methods to this class\n     * should be called as long as the visualizer react component is mounted\n     * @author Zichen XU\n     * @param {ForceGraphMethods} _graphDelegateMethods\n     */\n    mountDelegateMethods(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.clusterObject.threeScene = this.graphDelegateMethods.scene();\n    }\n\n    /**\n     * @description the ForceGraphMethods exposed by the visualization force-graph\n     * @author Zichen XU\n     * @see ForceGraphMethods\n     * @type {ForceGraphMethods}\n     */\n    graphDelegateMethods!: ForceGraphMethods;\n\n    /**\n     * @description compute the delegate graph that will be used by the ForceGraph3D\n     * will add invisible cluster nodes and edges to balance the clustered graph and adjust force\n     * the NodeObject and LinkObject inside attributes (named _visualize) will be used.\n     *\n     * @author Zichen XU\n     * @returns {*}\n     */\n    visualizationGraph() {\n        let newGraph: Graph;\n        if (State.cluster.clusterBy === null) {\n            newGraph = State.graph.rawGraph;\n        } else {\n            newGraph = this.addInvisibleClusterNode(\n                State.graph.decorateRawGraph(State.graph.rawGraph)\n            );\n        }\n        let tempGraph = {\n            nodes: [] as ICustomLinkObject[],\n            links: [] as ICustomLinkObject[],\n        };\n        newGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        newGraph.forEachEdge((edge, attributes) => {\n            tempGraph.links.push(attributes[\"_visualize\"]);\n        });\n        return tempGraph;\n    }\n\n    /**\n     * @description return a new graph that contains the invisible clusters, formed as nodes\n     * as well as the edges that connected to the cluster node to simulate the force within the same cluster\n     * the new graph is a deep copy of the old node, so no worries of the original graph DS\n     * @author Zichen XU\n     * @private\n     * @param {Graph} oldGraph\n     * @returns {*}  {Graph}\n     */\n    private addInvisibleClusterNode(oldGraph: Graph): Graph {\n        let graphCopy = oldGraph.copy();\n        let names = [\n            \"_CLUSTER_1_\",\n            \"_CLUSTER_2_\",\n            \"_CLUSTER_3_\",\n            \"_CLUSTER_4_\",\n            \"_CLUSTER_5_\",\n            \"_CLUSTER_6_\",\n            \"_CLUSTER_7_\",\n            \"_CLUSTER_8_\",\n            \"_CLUSTER_9_\",\n            \"_CLUSTER_10_\",\n        ];\n        for (let index = 0; index < names.length; index++) {\n            State.cluster.getAttributeValues.forEach(\n                (attribute: string | number) => {\n                    // if a node does not belong to any cluster, a undefined will be formed with no cluster to generate\n                    if (attribute === \"undefined\") return;\n\n                    let clusterID = names[index] + attribute;\n                    graphCopy.addNode(clusterID, {\n                        _visualize: createCustomNodeObject(clusterID, true),\n                    });\n\n                    // add edges to simulate the force of the same cluster\n                    State.cluster.attributeKeys\n                        .get(attribute)\n                        ?.forEach((target) => {\n                            graphCopy.addEdgeWithKey(\n                                `${clusterID}-${target}`,\n                                clusterID,\n                                target,\n                                {\n                                    _visualize: createCustomLinkObject(\n                                        clusterID,\n                                        target,\n                                        true\n                                    ),\n                                }\n                            );\n                        });\n                }\n            );\n        }\n\n        return graphCopy;\n    }\n\n    /**\n     * @description determine whether this Node is the cluster delegate node\n     * @author Zichen XU\n     * @param {NodeObject} nodeObject\n     * @returns {*}\n     */\n    nodeVisibility(nodeObject: NodeObject) {\n        let node = nodeObject as ICustomNodeObject;\n        return !node.isClusterNode;\n    }\n\n    /**\n     * @description determine whether this edge is the cluster delegate edge\n     * @author Zichen XU\n     * @param {LinkObject} linkObject\n     * @returns {*}\n     */\n    linkVisibility(linkObject: LinkObject) {\n        let link = linkObject as ICustomLinkObject;\n        return !link.isClusterLink;\n    }\n\n    ////\n\n    /**\n     * @description the link to Cluster3dObjectStore to manipulate the cluster related to WebGL\n     * @author Zichen XU\n     * @type {Cluster3dObjectStore}\n     */\n    clusterObject: Cluster3dObjectStore;\n\n    ////\n\n    /**\n     * @description this will re-position the camera to focus on the specified node\n     * if distance not specified, a default of 40 will be used\n     * @author Zichen XU\n     * @param {string} nodeId the node to be focused\n     * @param {number} [distance=40] the ending distance between the camera and the node\n     * @returns {*}\n     */\n    cameraFocusOn(nodeId: string, distance: number = 80) {\n        let node = State.graph.rawGraph.getNodeAttribute(nodeId, \"_visualize\");\n        if (!(node.x && node.y && node.z)) return;\n        // Aim at node from outside it\n        const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n        this.graphDelegateMethods.cameraPosition(\n            {\n                x: node.x * distRatio,\n                y: node.y * distRatio,\n                z: node.z * distRatio,\n            }, // new position\n            { x: node.x, y: node.y, z: node.z }, // lookAt ({ x, y, z })\n            3000 // ms transition duration\n        );\n    }\n\n    ////\n\n    /**\n     * @description set the force inside each cluster in the ForceGraph\n     * @author Zichen XU\n     */\n    updateClusterForce() {\n        this.graphDelegateMethods\n            ?.d3Force(\"link\")\n            //@ts-ignore\n            ?.distance((link: CustomLinkObject) => {\n                return link.isClusterLink\n                    ? State.css.cluster.clusterForce\n                    : State.css.cluster.normalForce;\n            });\n        this.graphDelegateMethods.d3ReheatSimulation();\n    }\n}\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport State from \"../state\";\n\n/**\n * @description the React.ref for storing the components that may be used by others\n * @author Zichen XU\n * @class ComponentRef\n */\nclass ComponentRef {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    static _instance: ComponentRef | null = null;\n\n    nodeDetail!: React.Component | any;\n\n    multiNodeDetail!: React.Component | any;\n\n    visualizer!: React.Component | any;\n\n    // canvasDrawPanel!: React.Component | any;\n\n    // canvasDrawStraightLinePanel!: React.Component | any;\n\n    clusterSplittingPanelStack!: React.Component | any;\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (ComponentRef._instance === null) {\n            let instance = new ComponentRef();\n            ComponentRef._instance = instance;\n            return instance;\n        } else {\n            return ComponentRef._instance;\n        }\n    }\n}\n\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    () => ComponentRef.instance.nodeDetail?.forceUpdate()\n);\n\nexport default ComponentRef.instance;\n","import { Attributes, EdgeKey, NodeKey } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\nimport GraphStore from \"./GraphStore\";\n\n/**\n * the wrapper mutating function that relates to the mutation of the rawGraph DS\n * all the mutation of the Graph should all go through this API rather than calling on rawGraph directly.\n *\n * @export\n * @class GraphMutation\n */\nexport default class GraphMutation {\n    constructor(_this: GraphStore) {\n        makeAutoObservable(this);\n        this.that = _this;\n    }\n\n    /**\n     * @description the graph store\n     * @see GraphStore\n     * @author Zichen XU\n     * @private\n     * @type {GraphStore}\n     */\n    private that!: GraphStore;\n\n    /**\n     * @description add the node with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     * @author Zichen XU\n     * @param {NodeKey} node\n     * @param {Attributes} [attributes]\n     */\n    public addNode(node: NodeKey, attributes?: Attributes): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addNode(node, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * @description delete the node with this nodeId in the Graph and refresh the 3d Graph\n     * @author Zichen XU\n     * @param {string} nodeId\n     */\n    public dropNode(nodeId: string): void {\n        this.that.rawGraph.dropNode(nodeId);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * @description add the edge with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     * @author Zichen XU\n     * @param {NodeKey} source\n     * @param {NodeKey} target\n     * @param {Attributes} [attributes]\n     */\n    public addEdge(\n        source: NodeKey,\n        target: NodeKey,\n        attributes?: Attributes\n    ): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addEdge(source, target, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * @description delete the edge with this key in the Graph and refresh the 3d Graph\n     * @author Zichen XU\n     * @param {EdgeKey} edge\n     */\n    public dropEdge(edge: EdgeKey): void {\n        this.that.rawGraph.dropEdge(edge);\n        this.that.refreshGraph();\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { Attributes } from \"graphology-types\";\nimport {\n    createCustomNodeObject,\n    createCustomLinkObject,\n} from \"./GraphDelegate\";\nimport ComponentRef from \"../components/ComponentRef\";\nimport State from \".\";\nimport GraphMutation from \"./GraphMutation\";\n\n/**\n * @description the metadata that importDialog should update to this\n * @author Zichen XU\n * @export\n * @interface IMetaData\n */\nexport interface IMetaData {\n    snapshotName: string;\n\n    // attributes of nodes in imported graph\n    nodeProperties: string[];\n}\n\n/**\n * @description define a class for storing the raw graph (graphology object),\n * the related metadata information, the public api for setting, refreshing\n * and decorating(change the barebone graph into the appropriate instances that we use to send to 3d-graph renderer)\n * the graph as well as the entry of GraphMutation for manipulating the graph.\n * @author Zichen XU\n * @export\n * @class GraphStore\n */\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.mutating = new GraphMutation(this);\n    }\n\n    /**\n     * @description the graphology data structure to store a graph.\n     * has a lot of APIs to manipulate as well as iterate through the graph\n     * @author Zichen XU\n     * @type {Graph}\n     */\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: false,\n        multi: false,\n        type: \"undirected\",\n    });\n\n    /**\n     * @description should be called when individual nodes are added to the graph.\n     * add the CustomNodeObject to node attributes stored in the data structure\n     * @author Zichen XU\n     * @see CustomNodeObject\n     * @param {string} node\n     * @param {Attributes} attributes\n     */\n    decorateRawNode(node: string, attributes: Attributes) {\n        attributes._visualize = createCustomNodeObject(node, false);\n    }\n\n    /**\n     * should be called when individual edges are added to the graph.\n     *\n     * add the CustomLinkObject to node attributes stored in the data structure\n     * @see CustomLinkObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} source\n     * @param {string} target\n     * @param {Attributes} attributes\n     */\n    decorateRawEdge(source: string, target: string, attributes: Attributes) {\n        attributes._visualize = createCustomLinkObject(source, target, false);\n    }\n\n    /**\n     * should be called on every graph import\n     * add the the _visualize to every links inside the specified graph\n     *\n     * the _visualize is for storing the object to be send to front-end to render the graph\n     *\n     * @param {Graph} _rawGraph\n     * @return {*}  {Graph}\n     */\n    decorateRawGraph(_rawGraph: Graph): Graph {\n        _rawGraph.forEachNode((node, attributes) =>\n            this.decorateRawNode(node, attributes)\n        );\n\n        _rawGraph.forEachEdge((edge, attributes, source, target) =>\n            this.decorateRawEdge(source, target, attributes)\n        );\n        return _rawGraph;\n    }\n\n    /**\n     * proxy method to set the new graph\n     * if intend to set a new graph, please use this method instead of directly modify GraphStore\n     *\n     * @param {Graph} _rawGraph\n     * @param {IMetaData} _metadata\n     */\n    public setGraph(_rawGraph: Graph, _metadata: IMetaData | null = null) {\n        this.rawGraph = this.decorateRawGraph(_rawGraph);\n        if (_metadata) {\n            this.metadata = _metadata;\n        }\n        State.interaction.flush();\n        State.cluster.clusterBy = null;\n        State.graphDelegate.clusterObject.initEmptyMapAndFusion();\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * @description should be called when the graph gets updated\n     * (the data inside the graph gets updated, or the attribute to be clustered has changed)\n     * @author Zichen XU\n     */\n    public refreshGraph() {\n        State.interaction.flush();\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * @description the wrapper methods to mutate the graph\n     * all the mutations of the graph should go through this API rather than calling this.rawGraph.[mutate]\n     * has basic functions like addNode, dropNode, addEdge, dropEdge...\n     * @author Zichen XU\n     * @see {GraphMutation}\n     * @type {GraphMutation}\n     */\n    mutating: GraphMutation;\n\n    /**\n     * @description the metadata related to the raw graph\n     * should be updated if a new graph is imported\n     * @author Zichen XU\n     * @type {IMetaData}\n     */\n    metadata: IMetaData = {\n        snapshotName: \"SNAPSHOT\",\n        nodeProperties: [],\n    };\n}\n","import { Intent, Position, Toaster, TreeNode } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\nimport { IMetaData } from \"./GraphStore\";\nimport * as d3 from \"d3\";\nimport { tree } from \"d3\";\n\n/**\n * @description interface for the node file being configured\n * @author Zichen XU\n * @export\n * @interface INodeFileConfig\n */\nexport interface INodeFileConfig {\n    // the file is successfully parsed and ready for display\n    isReady: boolean;\n    parseError: boolean;\n    path: string;\n\n    // has header at the top\n    hasHeader: boolean;\n\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n    topN: any[];\n    //names for the columns of this csv\n    columns: string[];\n    mapping: {\n        id: string;\n    };\n    delimiter: string;\n}\n/**\n * @description interface for the edge file being configured\n * @author Zichen XU\n * @export\n * @interface IEdgeFileConfig\n */\nexport interface IEdgeFileConfig {\n    isReady: boolean;\n    parseError: boolean;\n\n    // should save the csv to temp for further change the cluster attribute\n    path: string;\n    hasHeader: boolean;\n\n    // array of objects storing the\n    topN: any[];\n    columns: string[];\n    mapping: {\n        fromId: string;\n        toId: string;\n    };\n    delimiter: string;\n}\n\n/**\n * @description interface for the cluster file being configured\n * @author Chen YANG\n * @export\n * @interface IClusterFileConfig\n */\n export interface IClusterFileConfig {\n    isReady: boolean;\n    parseError: boolean;\n\n    // should save the csv to temp for further change the cluster attribute\n    path: string;\n    hasHeader: boolean;\n\n    // array of objects storing the\n    topN: any[];\n    columns: string[];\n    mapping: {\n        name: string;\n        parent: string;\n    };\n    delimiter: string;\n}\n\n\n\n\n/**\n * @description this class defines some necessary configs for the graph-importing procedures\n * such as the `INodeFileConfig` and `IEdgeFileConfig` for customizing the csv/gexf file parsing procedure\n * Other functions like `renderImportNode/EdgePreview` renders the preview table in the ImportDialog\n * and `importGraphFromCSV/GEXF` reads the file input and produce the `graphology` object to be assigned to `GraphStore`\n * with some basic error handling strategies\n * These functions are designed to be synchronized to prevent frozen of UI.\n * @author Zichen XU\n * @export\n */\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n    // map between the cluster name and the nodes it contains\n    clusterMap : Map<string,string[]> | null = null;\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    //name of the cluster file***\n    clusterFileName = \"Choose Cluster File ...\";\n\n    importDialogOpen = false;\n\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n    selectedClusterFileFromInput!: Blob;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as INodeFileConfig,\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as IEdgeFileConfig,\n\n        clusterFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                name: \"Unknown\",\n                parent: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as IClusterFileConfig,\n    };\n\n    /**\n     * @description read the CSV file specified by fileObject, with options defined by other paras\n     * and return a list of objects containing the key-value pair of attribute-value\n     * @author Zichen XU\n     * @private\n     * @param {File} fileObject\n     * @param {boolean} hasHeader\n     * @param {string} delimiter\n     * @returns {*}  {Promise<any[]>}\n     *      * where Object is of { attribute: number | string, anotherAttribute: number | string, ... } type\n\n     */\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    /**\n     * @description parse the graph from import GEXF file specified in selectedGEXFFileFromInput\n     * and return a Graph object\n     * @author Zichen XU\n     * @private\n     * @returns {*}  {Promise<Graph>}\n     */\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, reader.result as string));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    this.isLoading = false;\n                }\n            };\n        });\n    }\n\n    /**\n     * @description helper function to read edge csv and call this.readCSV()\n     * @author Zichen XU\n     * @returns {*}  {Promise<any[]>}\n     */\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    /**\n     * @description helper function to read node csv and call this.readCSV()\n     * @author Zichen XU\n     * @returns {*}  {Promise<any[]>}\n     */\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    public buildClusterMap(node:d3.HierarchyNode<unknown>){\n        if(node.children === undefined){\n            return;\n        }\n        let temparr : string[] = [];\n        node.leaves().forEach((leave)=>{\n            if(leave.id != undefined){\n                temparr.push(leave.id);\n            }           \n        })\n        this.clusterMap?.set(node.id as string,temparr);\n        node.children.forEach((child:d3.HierarchyNode<unknown>)=>{\n            this.buildClusterMap(child);\n        })\n    }\n\n    /**\n     * @description will create a Graph structure to store the nodes and edges in the imported File\n     * should handle whether or not have the NodeFile, whether or not have the header of each file\n     * if successfully imported, change the .isReady to be true\n     * @author Zichen XU\n     * @returns {*}\n     */\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: false,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            if (this.importConfig.nodeFile.hasHeader) {\n                // if has header, then tempNodes returns an array of objects\n                tempNodes = (await this.readNodeCSV()) as Object[];\n                tempNodes.forEach((node) => {\n                    let nodeId = node[config.nodeFile.mapping.id].toString();\n                    delete node[config.nodeFile.mapping.id];\n                    graph.addNode(nodeId, node);\n                });\n            } else {\n                // if no header, then tempNodes returns an array of array\n                tempNodes = (await this.readNodeCSV()) as any[][];\n                tempNodes.forEach((node) => {\n                    let nodeId = node[config.nodeFile.mapping.id].toString();\n                    let attributes = Object.assign({}, node);\n                    delete attributes[config.nodeFile.mapping.id];\n                    graph.addNode(nodeId, attributes);\n                });\n            }\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge, idx) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, {});\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, {});\n            }\n            graph.addEdgeWithKey(idx, fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        this.importClusterFromCSV(this.selectedClusterFileFromInput);\n\n        \n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            } as IMetaData,\n        };\n\n\n\n\n        \n    }\n\n\n    /**\n     * @description will convert import CSV cluster file into tree structure and use it to build clusterMap\n     * @author Chen YANG\n     * @returns {*}\n     */\n    public async importClusterFromCSV(csvFile:Blob){\n        var reader = new FileReader();\n        reader.readAsText(csvFile);\n        \n\n        reader.onload = ()=>{\n            let fileResult = reader.result;\n            if(fileResult != null){\n            \n                \n                const clusterLink = d3.csvParse(fileResult.toString());\n                const clusterRoot = d3.stratify()\n                    .id(function(d:any){return d.name})\n                    .parentId(function(d:any){return d.parent})\n                    (clusterLink);               \n\n                this.clusterMap = new Map<string,string[]>();\n                this.buildClusterMap(clusterRoot);\n                console.log(this.clusterMap);\n                // console.log(\"test\");\n                // console.log(\".children:\"+clusterRoot.children)\n                // console.log(\".data:\"+clusterRoot.data)\n                // console.log(\".id:\"+clusterRoot.id)\n                // console.log(\".parent:\"+clusterRoot.parent)\n\n            }\n            \n        }\n    }\n\n\n\n\n\n    /**\n     * @description will create a Graph structure to store the nodes and edges in the imported File\n     * please use try catch to avoid any invalid GEXF file\n     * @author Zichen XU\n     * @returns {*}\n     */\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n        for (const [key] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            } as IMetaData,\n        };\n    }\n\n    /**\n     * @description change the importConfig.edgeFile.topN to be the top 10 parsed elements in the input edge file\n     * change the importConfig.edgeFile.columns to be the attributes of the imported edge file\n     * set the .mapping.fromId and .mapping.toId to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedEdgeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @author Zichen XU\n     * @returns {*}\n     */\n    public async renderImportEdgePreview() {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter: delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter: delimiter,\n                          });\n                    edgeFileConfig.topN = it;\n                    edgeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (edgeFileConfig.columns.length >= 2) {\n                        edgeFileConfig.mapping.fromId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                        edgeFileConfig.isReady = true;\n                    } else if (edgeFileConfig.columns.length === 1) {\n                        edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        edgeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n\n    /**\n     * @description change the importConfig.nodeFile.topN to be the top 10 parsed elements in the input node file\n     * change the importConfig.nodeFile.columns to be the attributes of the imported node file\n     * set the .mapping.id .mapping.cluster to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedNodeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n\n     * @author Zichen XU\n     * @returns {*} \n     */\n    public async renderImportNodePreview() {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter,\n                          });\n                    nodeFileConfig.topN = it;\n                    nodeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (nodeFileConfig.columns.length >= 1) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                        nodeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        nodeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport State from \".\";\n\n/**\n * @description this file is the backend support for the NodeSearch feature\n * and will compute the possible searching candidates according to the query parameters\n * @author Zichen XU\n * @export\n * @class SearchStore\n */\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description if is previewing, ignore all mouse hovers detected by NodeDetailPanel\n     * because it is showing the detail of selected node\n     * @author Zichen XU\n     */\n    isPreviewing = false;\n\n    /**\n     * @description the search string typed in by user\n     * can use defined regex like:\n     * id:123\n     * attr:color:red\n     * @author Zichen XU\n     */\n    searchStr = \"\";\n\n    /**\n     * @description if filter search is selected\n     * null will be to search on id, and others will be to search based on that attribute value\n     * @author Zichen XU\n     * @type {(string | null)}\n     */\n    filterProps: string | null = null;\n\n    // contains node ids\n\n    /**\n     * @description compute a list of nodeids queried by the searchStr\n     * @author Zichen XU\n     * @type {string[]}\n     */\n    get candidates(): string[] {\n        let outputList: string[] = [];\n        let searchStrIgnoreCase = this.searchStr.toLocaleLowerCase();\n        if (this.filterProps === null) {\n            // search on id\n            State.graph.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(searchStrIgnoreCase)) {\n                    outputList.push(node);\n                }\n            });\n        } else {\n            // have specify the attribute\n            const searchAttr = this.filterProps as string;\n            State.graph.rawGraph.forEachNode((node, attributes) => {\n                if (attributes.hasOwnProperty(searchAttr)) {\n                    let attribute = attributes[searchAttr];\n                    if (\n                        attribute\n                            .toString()\n                            .toLocaleLowerCase()\n                            .includes(searchStrIgnoreCase)\n                    ) {\n                        outputList.push(node);\n                    }\n                }\n            });\n        }\n        return outputList;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\nimport State from \".\";\n\n/**\n * this store handles the cluster generating according to the clusterBy defined by user\n * by applying the computed value in MobX\n * the keyAttributes, getAttributeValues, attributeKeys, attributeColor and attributePoints will auto-compute accordingly in code reference order\n * and ultimately produce a mapping from (the cluster value) to (a array of node points)\n * which shall be used by Cluster3DObjectStore to compute the 3D-convex hull used in the 3d-renderer\n *\n * @export\n * @class ClusterStore\n */\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description specify which attribute to be clustered\n     * the default value should be null, and front-end graph will interpret this to Not-Cluster\n     *\n     * @summary attention: please use setCluster() to alter this data\n     * @author Zichen XU\n     * @type {(string | null)}\n     */\n    clusterBy: string | null = null;\n\n    /**\n     * @description the setter of clusterBy\n     * will update the front-end 3d graph about the cluster changes\n     * @author Zichen XU\n     * @param {(string | null)} to\n     * @param {boolean} [forceUpdate=false]\n     */\n    setCluster(to: string | null, forceUpdate: boolean = false) {\n        if (forceUpdate) {\n            this.setCluster(null);\n            this.setCluster(to);\n        } else {\n            this.clusterBy = to;\n            State.graphDelegate.clusterObject.initEmptyMapAndFusion();\n            State.graph.refreshGraph();\n            State.graph.rawGraph.setAttribute(\"default\", to);\n        }\n    }\n\n    /**\n     * @computed\n     * @description a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the id of a Node -> the value of the attribute specified by $clusterBy]\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string, string | number>)}\n     */\n    get keyAttribute(): Map<string, string | number> {\n        const keyValueMap = new Map<string, string | number>();\n        if (this.clusterBy === null) {\n            return keyValueMap;\n        }\n        const attribute = this.clusterBy as string;\n\n        State.graph.rawGraph.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                if (attributes[attribute] === \"\") {\n                    // ignore those which empty attribute\n                } else {\n                    keyValueMap.set(key, attributes[attribute]);\n                }\n            } else {\n                // this attribute is undefined in this node\n            }\n        });\n        return keyValueMap;\n    }\n\n    /**\n     * @computed\n     * @description the possible attribute values of the attribute defined by $clusterBy\n     * @author Zichen XU\n     * @readonly\n     * @type {((string | number)[])}\n     */\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    /**\n     * @computed\n     * @description a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> a list of Node ids]\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string | number, string[]>)}\n     */\n    get attributeKeys(): Map<string | number, string[]> {\n        const attributeKeysMap = new Map<string | number, string[]>();\n        this.getAttributeValues.forEach((value) => {\n            attributeKeysMap.set(value, []);\n        });\n        this.keyAttribute.forEach((value, key) => {\n            attributeKeysMap.get(value)?.push(key);\n        });\n        return attributeKeysMap;\n    }\n\n    /**\n     * @computed\n     * @description a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the random colour of this cluster]\n     * used to avoid re-compute the colours on every frame refresh\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string | number, string>)}\n     */\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.forEach((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    /**\n     * @computed\n     * @description a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the Nodes points in that cluster]\n     * will change on every frame refresh as the Node's position keeps changing.\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string | number, THREE.Vector3[]>)}\n     */\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.forEach((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        State.graph.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * @description the global configurations for the css of all nodes\n * @author Zichen XU\n * @class NodeGlobalConfig\n */\nclass NodeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n    defaultColor: string = \"#808080\";\n    chosenColor: string = \"#ffffAA\";\n    multiSelectedColor: string = \"#ffffff\";\n    highlightColor: string = \"#ff6060\";\n\n    resolution = 12;\n\n    size = 4;\n}\n\n/**\n * @description the global configurations for the css of all edges\n * @author Zichen XU\n * @class EdgeGlobalConfig\n */\nclass EdgeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    defaultColor = \"#ffffff\";\n    selectedColor = \"#ffff00\";\n    highlightColor = \"#ff8E8E\";\n\n    defaultWidth: number = 1;\n\n    highlightWidth: number = 2;\n\n    resolution = 6;\n}\n/**\n * @description the global configurations for the css of all labels\n * @author Zichen XU\n * @class LabelConfig\n */\nclass LabelConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    show = true;\n    color = \"#d3d3d3\";\n    size = 4;\n}\n/**\n * @description the global configurations for the css of all clusters\n * @author Zichen XU\n * @class ClusterConfig\n */\nclass ClusterConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    autoPlot = false;\n    clusterForce = 30;\n    normalForce = 50;\n    resolution = 10;\n    shape: \"convexHull\" | \"sphere\" = \"sphere\";\n}\n\n/**\n * @description as the name indicates, it stores the customized style of Nodes/Edges/Label/Clusters\n * and any change on it should then call State.graphDelegate.graphDelegateMethods.refresh() to apply changes\n * @author Zichen XU, Zhiyuan LYU\n * @export\n * @class CssStore\n */\nexport default class CssStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.node = new NodeGlobalConfig();\n        this.edge = new EdgeGlobalConfig();\n        this.label = new LabelConfig();\n        this.cluster = new ClusterConfig();\n    }\n\n    node!: NodeGlobalConfig;\n\n    edge!: EdgeGlobalConfig;\n\n    label!: LabelConfig;\n\n    cluster!: ClusterConfig;\n\n    isAnimating: boolean = true;\n}\n","import convert from \"xml-js\";\n\nexport const GITHUB_URL = \"\";\n\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\n    [\n        \"Les Miserables\",\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\n    ],\n    [\"COVID-19 Citation Graph 06-02\", \"../samples/json/a.json\"],\n];\n\nexport async function fetchSampleGraph(url: string) {\n    try {\n        let response = await fetch(url, { mode: \"no-cors\" });\n        let gexfJson = await response.json();\n        return new File([convert.json2xml(gexfJson)], \"sample.gexf\", {\n            type: \"text/xml\",\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const NAVBAR_HEIGHT = 50;\n\nexport const NODE_AND_EDGE_FILE = \"import both nodes and edges file\";\nexport const ONLY_EDGE_FILE = \"only import edges file\";\n\nexport const COLOR_LIST = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32,\n};\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport { polygonContains } from \"d3-polygon\";\nimport State from \".\";\n\nexport enum DrawMode {\n    StraightLine,\n    FreeLine,\n    FreeCircle,\n    CenterCircle,\n}\n\n/**\n * @description the cluster-mouse-interaction related filed and functions are hereby written in this class\n * such as `currentlyHoveredClusterId`, `selectedCluster` and `selectedClusters`,\n * these selection should be `flush()` after using(or before entering another interaction mode)\n * the callback functions of mouse events are presented as well to handle events like hover/left/rightClick.\n * There are also helper methods to deal with features like mergeCluster and SplitCluster.\n *\n * In the cluster splitting procedure, after user draw a curved link,\n * the segment of that line will be stored in the `lineSegment` and `computeSplitCluster` will be called to compute the two stack of split nodes,\n * the result will be stored inside `confirmClusterSplittingTempData` waiting for the final `splitCluster()` function to confirm this operation\n * @author Zichen XU\n * @export\n * @class ClusterInteractionStore\n *\n */\nexport default class ClusterInteractionStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description the cluster UUID (assigned by THREE.js) of the hovered cluster\n     * @author Zichen XU\n     * @type {(string | null)}\n     */\n\n    currentlyHoveredClusterId: string | null = null;\n\n    /**\n     * @description the selected Cluster UUID used in choosing which cluster to be split\n     * @author Zichen XU\n     * @type {(string | null)}\n     */\n    chosenCluster: string | null = null;\n\n    /**\n     * @description the selected Clusters UUID used in choosing which clusters to be merged\n     * @author Zichen XU\n     * @type {string[]}\n     */\n    selectedClusters: string[] = [];\n\n    /**\n     * @description flush the above fields in situations like switching VisualizationMode\n     * re-import or after graph mutation\n     * @author Zichen XU\n     */\n    flush() {\n        this.currentlyHoveredClusterId = null;\n        this.chosenCluster = null;\n        this.selectedClusters = [];\n    }\n\n    /**\n     * @description this will only be active in the ClusterSelection and ClusterSplit\n     * it will set the selectedCluster and add/remove this cluster in the selectedClusters list\n     * @author Zichen XU\n     * @param {string} uuid uuid of the custer on left-click\n     * @param {MouseEvent} event\n     */\n    clusterLeftClickCallback(uuid: string, event: MouseEvent) {\n        if (State.signal.isMovingCamera) return;\n        State.graphDelegate.clusterObject.meshSpotlightMaterial(\n            State.graphDelegate.clusterObject.getObjectById(uuid) as THREE.Mesh\n        );\n        // multi-selection\n        let index;\n\n        State.clusterInteraction.chosenCluster = uuid;\n\n        // if already in the list of selected, remove\n        if (\n            (index = State.clusterInteraction.selectedClusters.indexOf(\n                uuid\n            )) !== -1\n        ) {\n            State.clusterInteraction.selectedClusters.splice(index, 1);\n        } else {\n            // if not in the list, add\n            State.clusterInteraction.selectedClusters.push(uuid);\n        }\n    }\n\n    /**\n     * @description this will only be active in the ClusterSelection and ClusterSplit\n     * it will set the currentlyHoveredClusterId to this cluster\n     * @author Zichen XU\n     * @param {(string | null)} uuid of the custer on mouse hover\n     * @param {MouseEvent} event\n     */\n    clusterHoverCallback(uuid: string | null, event: MouseEvent) {\n        State.clusterInteraction.currentlyHoveredClusterId = uuid;\n    }\n\n    /**\n     * @description this will only be active in the ClusterSelection\n     * it will set the selectedCluster to this cluster and open the rightClickPanel\n     * @author Zichen XU\n     * @param {(string | null)} uuid of the custer on mouse hover\n     * @param {MouseEvent} event\n     */\n    clusterRightClickCallback(uuid: string | null, event: MouseEvent) {\n        State.signal.isRightClickingCluster = true;\n\n        State.clusterInteraction.chosenCluster = uuid;\n        State.preferences.rightClickPositionX = event.x;\n        State.preferences.rightClickPositionY = event.y;\n        // if selected cluster is not in the list, then add\n        if (uuid) {\n            if (!this.selectedClusters.includes(uuid)) {\n                this.selectedClusters.push(uuid);\n            }\n            State.preferences.rightClickOn = \"Cluster\";\n        } else {\n            State.preferences.rightClickOn = \"Background\";\n        }\n        State.preferences.rightClickPanelOpen = true;\n        State.preferences.closeAllPanel(\"rightClickPanel\");\n    }\n\n    /**\n     * @description loop through the selected clusters and set the nodes within that cluster\n     * @author Zichen XU\n     */\n    releaseSelectedClusters() {\n        if (\n            this.selectedClusters.length === 0 &&\n            this.currentlyHoveredClusterId\n        ) {\n            this.selectedClusters.push(this.currentlyHoveredClusterId);\n        }\n        this.selectedClusters.forEach((uuid) => {\n            const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                uuid\n            ) as string | number;\n            const keys = State.cluster.attributeKeys.get(clusterValue);\n            keys?.forEach((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(\n                    nodeId,\n                    State.cluster.clusterBy as string,\n                    \"\"\n                );\n            });\n        });\n        State.cluster.setCluster(State.cluster.clusterBy, true);\n        this.flush();\n    }\n\n    /* --------------- The below content is for cluster splitting --------------- */\n\n    /**\n     * @description whether the drawing panel used in ClusterSplit is active\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    drawPanelActivate: boolean = false;\n\n    /**\n     * @description whether to draw a straight line or a curved line when clustering\n     *\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    drawMode: DrawMode = DrawMode.FreeLine;\n\n    /**\n     * @description the line segments returned by drawing a line\n     * it has the left/right-top points as well to form a polygon\n     * @author Zichen XU\n     * @type {any[]}\n     */\n    lineSegment!: any[];\n\n    /**\n     * @description the temp data returned by splitting the cluster\n     * the value attribute is either 0 or 1 to form two clusters\n     * this data is saved to preview the split to user and wait for final confirmation\n     * @author Zichen XU\n     * @type {({\n     *               value: number;\n     *               id: string;\n     *               x: number;\n     *               y: number;\n     *           }[]\n     *         | null)}\n     */\n    confirmClusterSplittingTempData:\n        | {\n              value: number;\n              id: string;\n              x: number;\n              y: number;\n          }[]\n        | null = null;\n\n    /**\n     * @description compute the clusterSplittingTempData based on the lineSegment data\n     * using the polygonContains to determine which node is in selection\n     * the value attribute is either 0 or 1 to form two clusters\n     * this data is saved to preview the split to user and wait for final confirmation\n     * @author Zichen XU\n     */\n    computeSplitCluster() {\n        let screenCoords = [] as {\n            id: string;\n            x: number;\n            y: number;\n            value: number;\n        }[];\n        const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n            State.clusterInteraction.chosenCluster as string\n        );\n        let keys = State.cluster.attributeKeys.get(clusterValue!) as string[];\n        keys.forEach((node) => {\n            let attribute = State.graph.rawGraph.getNodeAttributes(node);\n            let coord = State.graphDelegate.graphDelegateMethods.graph2ScreenCoords(\n                attribute._visualize.x,\n                attribute._visualize.y,\n                attribute._visualize.z\n            );\n            screenCoords.push({ id: node, x: coord.x, y: coord.y, value: 0 });\n        });\n\n        let tempLineSegment: [number, number][] = this.lineSegment.map(\n            (value) => {\n                return [value.x, value.y];\n            }\n        );\n\n        screenCoords.forEach((point) => {\n            let inside = polygonContains(tempLineSegment, [point.x, point.y]);\n\n            if (inside) {\n                State.interaction.updateNodeVisualizeAttribute(point.id, {\n                    hovered: true,\n                });\n                point.value = 1;\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(point.id, {\n                    hovered: false,\n                });\n                point.value = 0;\n            }\n        });\n\n        State.graphDelegate.graphDelegateMethods.refresh();\n        this.confirmClusterSplittingTempData = screenCoords;\n    }\n\n    computeSplitClusterInCircle(\n        centerX: number,\n        centerY: number,\n        radius: number\n    ) {\n        let screenCoords = [] as {\n            id: string;\n            x: number;\n            y: number;\n            value: number;\n        }[];\n        const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n            State.clusterInteraction.chosenCluster as string\n        );\n        let keys = State.cluster.attributeKeys.get(clusterValue!) as string[];\n        keys.forEach((node) => {\n            let attribute = State.graph.rawGraph.getNodeAttributes(node);\n            let coord = State.graphDelegate.graphDelegateMethods.graph2ScreenCoords(\n                attribute._visualize.x,\n                attribute._visualize.y,\n                attribute._visualize.z\n            );\n            screenCoords.push({ id: node, x: coord.x, y: coord.y, value: 0 });\n        });\n\n        screenCoords.forEach((point) => {\n            let distance = Math.sqrt(\n                Math.pow(point.x - centerX, 2) + Math.pow(point.y - centerY, 2)\n            );\n\n            if (distance < radius) {\n                // in the drawn area\n                State.interaction.updateNodeVisualizeAttribute(point.id, {\n                    hovered: true,\n                });\n                point.value = 1;\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(point.id, {\n                    hovered: false,\n                });\n                point.value = 0;\n            }\n        });\n\n        State.graphDelegate.graphDelegateMethods.refresh();\n        this.confirmClusterSplittingTempData = screenCoords;\n    }\n\n    /**\n     * @description this will be called when user confirm the cluster split\n     * it will set the attribute of these two groups to be different\n     * and clear the tempData\n     * @author Zichen XU\n     * @param {string} attribute\n     * @param {(number | string)} valueInWhite\n     * @param {(number | string)} valueInRed\n     */\n    splitCluster(\n        attribute: string,\n        valueInWhite: number | string,\n        valueInRed: number | string\n    ) {\n        const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n            this.chosenCluster as string\n        ) as string | number;\n        const nodesToAlter = State.cluster.attributeKeys.get(\n            clusterValue\n        ) as string[];\n        this.confirmClusterSplittingTempData?.forEach((node) => {\n            if (nodesToAlter.includes(node.id)) {\n                State.graph.rawGraph.setNodeAttribute(\n                    node.id,\n                    attribute,\n                    node.value === 1 ? valueInRed : valueInWhite\n                );\n            }\n        });\n        this.confirmClusterSplittingTempData = null;\n        State.cluster.setCluster(attribute, true);\n    }\n}\n","import { Attributes } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\nimport { NAVBAR_HEIGHT } from \"../constants\";\nimport { ICustomLinkObject, ICustomNodeObject } from \"./GraphDelegate\";\nexport default class InteractionStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description the currently selected node\n     * represents the node being right-clicked on\n     * @author Zhiyuan LYU\n     * @type {(string | null)}\n     */\n    chosenNode: string | null = null;\n\n    /**\n     * @description the currently selected nodes id\n     * the singleNodeDetailPanel will render and refresh if this changes\n     * used in NodeSelection panel to do actions on those selected nodes\n     * @author Zhiyuan LYU\n     * @type {string[]}\n     */\n    selectedNodes: string[] = [];\n\n    /**\n     * @description the currently selected edge id\n     * @author Zhiyuan LYU\n     * @type {(string | null)}\n     */\n    selectedEdge: string | null = null;\n\n    /**\n     * @description when the menuItem 'box-select Node' of RightClickPanel is clicked, then this will be set to true,\n     *  and the component 'SelectionBox' will be  visualized only the mode is 'Node Selection' and this variable is true\n     * @author Zhiyuan LYU\n     * @type {boolean}\n     */\n    boxSelectionOpen: boolean = false;\n\n    /**\n     * @description this stores the x and y coordinates when mouse clicked down for box selection\n     * @author Zhiyuan LYU\n     * @type {Attributes}\n     */\n    boxSelection_startPoint: Attributes = {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * @description this stores the x and y coordinates when mouse clicked up for box selection\n     * @author Zhiyuan LYU\n     * @type {Attributes}\n     */\n    boxSelection_endPoint: Attributes = {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * @description compute the selected node within this selection box\n     * @author Zhiyuan LYU\n     */\n    boxSelectNode() {\n        //clear selectedNodes\n        State.interaction.selectedNodes = [];\n\n        //calculate the box\n        let left = Math.min(\n            this.boxSelection_startPoint.x,\n            this.boxSelection_endPoint.x\n        );\n        let top =\n            Math.min(\n                this.boxSelection_startPoint.y,\n                this.boxSelection_endPoint.y\n            ) - NAVBAR_HEIGHT;\n        let right = Math.max(\n            this.boxSelection_startPoint.x,\n            this.boxSelection_endPoint.x\n        );\n        let down =\n            Math.max(\n                this.boxSelection_startPoint.y,\n                this.boxSelection_endPoint.y\n            ) - NAVBAR_HEIGHT;\n\n        //check which node is inside the box,if true push them into selectedNodes\n        State.graph.rawGraph.forEachNode((node, Attributes) => {\n            let coords = State.graphDelegate.graphDelegateMethods.graph2ScreenCoords(\n                Attributes._visualize.x,\n                Attributes._visualize.y,\n                Attributes._visualize.z\n            );\n            if (\n                left <= coords.x &&\n                coords.x <= right &&\n                top <= coords.y &&\n                down >= coords.y\n            ) {\n                State.interaction.selectedNodes.push(node);\n            }\n        });\n    }\n\n    /**\n     * @description the currently hovered node id\n     * the multiNodeDetailPanel will render and refresh if this changes\n     * @author Zhiyuan LYU\n     * @type {(string | null)}\n     */\n    currentlyHoveredNodeId: string | null = null;\n\n    /**\n     * @description compute the neighbors of the currently hovered node id\n     * @author Zichen XU\n     * @readonly\n     * @type {(string[] | null)}\n     */\n    get currentlyHoveredNodeNeighborEdges(): string[] | null {\n        if (this.currentlyHoveredNodeId === null) {\n            return null;\n        } else {\n            let neighbors = State.graph.rawGraph.neighbors(\n                this.currentlyHoveredNodeId\n            );\n            return neighbors?.map((neighbor: string) => {\n                return this.getEdgeKey(\n                    neighbor,\n                    this.currentlyHoveredNodeId as string\n                ) as string;\n            });\n        }\n    }\n\n    /**\n     * @description get the key of the edge with source and target bidirectional\n     * @author Zhiyuan LYU\n     * @param {string} node1\n     * @param {string} node2\n     * @returns {*}  {(string | null)}\n     */\n    getEdgeKey(node1: string, node2: string): string | null {\n        let go: string | undefined = State.graph.rawGraph.edge(node1, node2);\n        if (go === undefined) {\n            let back: string | undefined = State.graph.rawGraph.edge(\n                node2,\n                node1\n            );\n            if (back === undefined) {\n                return null;\n            } else {\n                return back;\n            }\n        } else {\n            return go;\n        }\n    }\n\n    /**\n     * @description update the _visualize object inside node attribute and calls graph refresh\n     * @author Zichen XU\n     * @param {string} id\n     * @param {Attributes} attribute\n     * @param {(Attributes | null)} [oldAttributeVisualize=null]\n     */\n    updateNodeVisualizeAttribute(\n        id: string,\n        attribute: Partial<ICustomNodeObject>,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getNodeAttribute(\n                id,\n                \"_visualize\"\n            );\n        }\n\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n\n    /**\n     * @description update the _visualize object inside edge attribute and calls graph refresh\n     * @author Zichen XU\n     * @param {string} key\n     * @param {Attributes} attribute\n     * @param {(Attributes | null)} [oldAttributeVisualize=null]\n     */\n    updateEdgeVisualizeAttribute(\n        key: string,\n        attribute: Partial<ICustomLinkObject>,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getEdgeAttribute(\n                key,\n                \"_visualize\"\n            );\n        }\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n\n    /**\n     * @description helper method to call by updateEdgeVisualizeAttribute and updateNodeVisualizeAttribute\n     * @author Zichen XU\n     * @private\n     * @param {*} newAttribute\n     * @param {*} oldAttributes\n     */\n    private updateVisualizeAttributeParser(\n        newAttribute: any,\n        oldAttributes: any\n    ) {\n        if (newAttribute.hasOwnProperty(\"hovered\")) {\n            oldAttributes.hovered = newAttribute.hovered;\n        } else if (newAttribute.hasOwnProperty(\"chosen\")) {\n            oldAttributes.chosen = newAttribute.chosen;\n        } else if (newAttribute.hasOwnProperty(\"multiSelected\")) {\n            oldAttributes.multiSelected = newAttribute.multiSelected;\n        }\n    }\n\n    /**\n     * @description should call this on every refresh of graph DS\n     * or simply change the InteractionMode\n     * @author Zichen XU\n     */\n    flush() {\n        this.chosenNode = null;\n        this.selectedNodes = [];\n        this.selectedEdge = null;\n        this.currentlyHoveredNodeId = null;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * @description you may notice that when selecting different VisualizationMode\n * a popover which contains either simple configs or helper messages will pop up\n * this class stores the necessary information to make that happen\n * @author Zichen XU\n * @export\n * @class HelperStackPanelStore\n */\nexport default class HelperStackPanelStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // Cluster Splitting\n\n    /**\n     * @description if the clusterSplittingPanelStackOpen is open\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    clusterSplittingPanelStackOpen: boolean = false;\n\n    /**\n     * @description can back to any step, and UI should refresh accordingly\n     *\n     * @author Zichen XU\n     * @type {(1 | 2 | 3)}\n     */\n    clusterSplittingCurrentStep: 1 | 2 | 3 = 1;\n\n    /**\n     * @description if the NodeSelectionPanelOpen is open\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    NodeSelectionPanelOpen: boolean = false;\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * @description signals for use of ui interaction\n * @author Zichen XU\n * @export\n */\nexport default class SignalStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    isRightClickingCluster: boolean = false;\n\n    isMovingCamera: boolean = false;\n}\n","import { autorun, reaction } from \"mobx\";\n\nimport PreferencesStore, { VisualizationMode } from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\nimport CssStore from \"./CssStore\";\nimport GraphDelegate from \"./GraphDelegate\";\nimport NodeInteractionStore from \"./NodeInteractionStore\";\nimport ClusterInteractionStore from \"./ClusterInteractionStore\";\nimport HelperStackPanelStore from \"./HelperStackPanelStore\";\nimport SignalStore from \"./SignalStore\";\n\n/**\n * @description the overall state to store all information of this project\n * use the observable and observer to refresh the React UI\n * @author Zichen XU\n * @class AppState\n */\nclass AppState {\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    graphDelegate!: GraphDelegate;\n    interaction!: NodeInteractionStore;\n    clusterInteraction!: ClusterInteractionStore;\n    import!: ImportStore;\n    search!: SearchStore;\n    cluster!: ClusterStore;\n    helper!: HelperStackPanelStore;\n    css!: CssStore;\n    signal!: SignalStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.graphDelegate = new GraphDelegate();\n        this.interaction = new NodeInteractionStore();\n        this.clusterInteraction = new ClusterInteractionStore();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.cluster = new ClusterStore();\n        this.helper = new HelperStackPanelStore();\n        this.css = new CssStore();\n        this.signal = new SignalStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// this is for easily debugging in runtime\n//@ts-ignore\nwindow._state = State;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\n// set the graph to suspend animating according to State.css.isAnimating\nautorun(() => {\n    if (State.css.isAnimating) {\n        State.graphDelegate.graphDelegateMethods?.resumeAnimation();\n    } else {\n        State.graphDelegate.graphDelegateMethods?.pauseAnimation();\n    }\n});\n\n// if cluster selected, goto step 2\nautorun(() => {\n    if (\n        State.preferences.visualizationMode ===\n        VisualizationMode.ClusterSplitting\n    ) {\n        if (State.clusterInteraction.chosenCluster) {\n            State.helper.clusterSplittingCurrentStep = 2;\n            console.log(\"cluster selected\");\n        }\n    } else {\n        State.clusterInteraction.drawPanelActivate = false;\n    }\n});\n\n// the preparation and cleaning when changing of Step\nreaction(\n    () => State.helper.clusterSplittingCurrentStep,\n    (step) => {\n        console.log(`Graph Splitting change to step ${step}`);\n        switch (step) {\n            case 1:\n                State.clusterInteraction.drawPanelActivate = false;\n                State.clusterInteraction.confirmClusterSplittingTempData = null;\n                State.interaction.flush();\n                State.clusterInteraction.flush();\n                State.graphDelegate.graphDelegateMethods.refresh();\n                break;\n\n            case 2:\n                State.clusterInteraction.drawPanelActivate = true;\n                State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n                    State.interaction.updateNodeVisualizeAttribute(\n                        node,\n                        { hovered: false, chosen: false, multiSelected: false },\n                        oldAttributes._visualize\n                    );\n                });\n                State.clusterInteraction.confirmClusterSplittingTempData = null;\n                State.interaction.flush();\n                State.graphDelegate.graphDelegateMethods.refresh();\n                break;\n\n            case 3:\n                State.clusterInteraction.drawPanelActivate = false;\n                break;\n        }\n    }\n);\n\n// if graph is empty, suspend the animation to save computing power\nreaction(\n    () => State.graph.rawGraph?.order,\n    (number) => {\n        if (number === 0) {\n            State.css.isAnimating = false;\n            console.log(\"Pause Animating\");\n        } else {\n            State.css.isAnimating = true;\n            console.log(\"Resume Animating\");\n        }\n    },\n    { fireImmediately: true }\n);\n\n// auto highlight the hovered Cluster\nreaction(\n    () => State.clusterInteraction.currentlyHoveredClusterId,\n    (currentlyHoveredClusterId) => {\n        console.log(\"currentlyHoveredNodeId\", currentlyHoveredClusterId);\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto highlight the selected Cluster\nreaction(\n    () => State.clusterInteraction.chosenCluster,\n    () => {\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto highlight the selected Clusters\nreaction(\n    () => State.clusterInteraction.selectedClusters,\n    () => {\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto color the hovered Node\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    (currentlyHoveredNodeId) => {\n        console.log(\"currentlyHoveredNodeId\", currentlyHoveredNodeId);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (node === currentlyHoveredNodeId) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n    }\n);\n\n// auto color the chosen node (right click on)\nreaction(\n    () => State.interaction.chosenNode,\n    (selectedNode) => {\n        console.log(\"chosenNode\", selectedNode);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNode === node) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { chosen: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { chosen: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto color the selected nodes\nreaction(\n    () => State.interaction.selectedNodes.map((node) => node),\n    (selectedNodes) => {\n        console.log(\"selectedNodes\", selectedNodes);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNodes.includes(node)) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { multiSelected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { multiSelected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto color the selected edge\nreaction(\n    () => State.interaction.selectedEdge,\n    (selectedEdge) => {\n        console.log(\"selectedEdge\", selectedEdge);\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (selectedEdge === edge) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { chosen: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { chosen: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto color the neighbor edges\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    () => {\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (\n                State.interaction.currentlyHoveredNodeNeighborEdges?.includes(\n                    edge\n                )\n            ) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto set the signal to be false\nautorun(\n    () => {\n        if (State.signal.isMovingCamera) {\n            State.signal.isMovingCamera = false;\n        }\n    },\n    {\n        delay: 50,\n    }\n);\n\nautorun(\n    () => {\n        if (State.signal.isRightClickingCluster) {\n            State.signal.isRightClickingCluster = false;\n        }\n    },\n    {\n        delay: 50,\n    }\n);\n\nexport default State;\n","import { Attributes } from \"graphology-types\";\nimport React from \"react\";\n\n/** Event handler that exposes the target element's value as a boolean. */\nexport function handleBooleanChange(handler: (checked: boolean) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).checked);\n}\n\n/** Event handler that exposes the target element's value as a string. */\nexport function handleStringChange(handler: (value: string) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).value);\n}\n\n/** Event handler that exposes the target element's value as an inferred generic type. */\nexport function handleValueChange<T>(handler: (value: T) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler(((event.target as HTMLInputElement).value as unknown) as T);\n}\n\n/** Event handler that exposes the target element's value as a number. */\nexport function handleNumberChange(handler: (value: number) => void) {\n    return handleStringChange((value) => handler(+value));\n}\n\nexport function stringifyNodeDetail(attributes: Attributes): string {\n    let res = \"\";\n    for (var attribute in attributes) {\n        if (\n            attributes.hasOwnProperty(attribute) &&\n            attribute !== \"_visualize\" &&\n            attribute !== \"_options\"\n        ) {\n            res += attribute + \" : \" + attributes[attribute] + \" ; \";\n        }\n    }\n\n    return res;\n}\n\nexport function parseNumberOrString(value: string): string | number {\n    if (value === \"\") {\n        return \"\";\n    }\n    let numberVal = Number(value);\n    if (isNaN(numberVal)) {\n        return value;\n    } else {\n        return numberVal;\n    }\n}\n","import { Intent, Position, Toaster, ToasterPosition } from \"@blueprintjs/core\";\nimport React from \"react\";\n\nexport function createToaster(\n    message: React.ReactNode,\n    position: ToasterPosition = Position.TOP,\n    timeout: number = 5000,\n    intent: Intent = Intent.NONE\n) {\n    Toaster.create({\n        position: position,\n    }).show({\n        message: message,\n        intent: intent,\n        timeout: timeout,\n    });\n}\n","import React, { MouseEventHandler } from \"react\";\nimport { Button, Icon, InputGroup, Intent, MenuItem } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { copy } from \"copy-anything\";\nimport { handleStringChange } from \"./InputFormUtils\";\nimport { createToaster } from \"../../state/utils/ToasterUtils\";\n\ninterface Props {\n    /**\n     * whether or not to show the None\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    showNone: boolean;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * if None is selected, the item props will be set to null\n     *\n     * @memberof Props\n     */\n    onSelect: (item: string | null) => void;\n\n    /**\n     * the selected to display will sync with this props\n     *\n     * @type {(string | null)}\n     * @memberof Props\n     */\n    syncWith: string | null;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\nexport default observer(\n    /**\n     * @description this component can be used to choose the attribute among all the attributes\n     * with addition none to choose (can be toggled to off)\n     *\n     * to use it, you have to specify whether to add additional None to the list\n     * and onChange function to call when a candidate is selected\n     * @author Zichen XU\n     * @class ClusterChooser\n     * @extends {React.Component<Props, {}>}\n     */\n    class ClusterChooser extends React.Component<Props, {}> {\n        static defaultProps = {\n            showNone: true,\n        };\n\n        get fullProperties(): string[] {\n            let propertiesWithNone = copy(State.graph.metadata.nodeProperties);\n            propertiesWithNone.unshift(\"None\");\n            return propertiesWithNone;\n        }\n\n        itemRenderer = (\n            item: any,\n            props: CustomIItemRendererProps\n        ): JSX.Element | null => {\n            if (item === \"None\") {\n                return (\n                    <MenuItem\n                        intent=\"primary\"\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            } else {\n                return (\n                    <MenuItem\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            }\n        };\n\n        render() {\n            return (\n                <Select\n                    items={\n                        this.props.showNone\n                            ? this.fullProperties\n                            : State.graph.metadata.nodeProperties\n                    }\n                    itemRenderer={this.itemRenderer}\n                    filterable={false}\n                    onItemSelect={(item: string) => {\n                        let selected = item === \"None\" ? null : item;\n                        this.props.onSelect(selected);\n                    }}\n                    {...this.props}\n                >\n                    <Button\n                        text={this.props.syncWith ?? this.fullProperties[0]}\n                    />\n                </Select>\n            );\n        }\n    }\n);\n\ninterface ClusterAdderProps {\n    onCreate: (attribute: string) => void;\n}\n\nexport const ClusterAdder = observer(\n    class ClusterAdder extends React.Component<ClusterAdderProps> {\n        state = {\n            attribute: \"\",\n        };\n\n        render() {\n            return (\n                <div\n                    style={{ display: \"flex\", justifyContent: \"space-between\" }}\n                >\n                    <InputGroup\n                        leftElement={<Icon icon=\"tag\" />}\n                        onChange={handleStringChange((value) => {\n                            this.setState({ attribute: value });\n                        })}\n                        placeholder=\"New Attribute Name\"\n                        fill={true}\n                        value={this.state.attribute}\n                    />\n                    <Button\n                        onClick={() => {\n                            if (\n                                this.state.attribute === \"\" ||\n                                State.graph.metadata.nodeProperties.includes(\n                                    this.state.attribute\n                                )\n                            ) {\n                                createToaster(\n                                    `Attribute name ${this.state.attribute} already exists`,\n                                    undefined,\n                                    undefined,\n                                    Intent.DANGER\n                                );\n                                return;\n                            }\n                            State.graph.metadata.nodeProperties.push(\n                                this.state.attribute\n                            );\n                            State.graph.rawGraph.forEachNode(\n                                (_, attributes) => {\n                                    attributes[this.state.attribute] = \"\";\n                                }\n                            );\n                            this.props.onCreate(this.state.attribute);\n                            this.setState({ attributes: \"\" });\n                        }}\n                        intent={Intent.PRIMARY}\n                    >\n                        Add\n                    </Button>\n                </div>\n            );\n        }\n    }\n);\n","export default __webpack_public_path__ + \"static/media/icon.d621d30f.png\";","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Button, ControlGroup, MenuItem } from \"@blueprintjs/core\";\nimport { Select, Suggest } from \"@blueprintjs/select\";\nimport { CustomIItemRendererProps } from \"../utils/SimpleSelect\";\n\ninterface IFilterOption {\n    text: React.ReactNode;\n    disabled: boolean;\n    attribute?: string;\n}\n\nexport default observer(\n    /**\n     * @description the search bar to be placed in the navigation bar\n     * @author Zichen XU\n     * @class SearchPanel\n     * @extends {React.Component}\n     */\n    class SearchPanel extends React.Component {\n        get FILTER_OPTIONS(): IFilterOption[] {\n            let prefix: IFilterOption[] = [\n                { text: \"ID includes\", disabled: false },\n                { text: <b>Or Search Attributes</b>, disabled: true },\n            ];\n            State.graph.metadata.nodeProperties.forEach((it) =>\n                prefix.push({\n                    text: `Attribute: ${it}`,\n                    disabled: false,\n                    attribute: it,\n                })\n            );\n            return prefix;\n        }\n\n        state = {\n            filter: \"ID includes\" as string,\n        };\n\n        private itemRenderer(\n            item: IFilterOption,\n            props: CustomIItemRendererProps\n        ): JSX.Element | null {\n            return (\n                <MenuItem\n                    key={item.text?.toString()}\n                    disabled={item.disabled}\n                    onClick={props.handleClick}\n                    text={item.text}\n                />\n            );\n        }\n\n        render() {\n            return (\n                <div>\n                    <ControlGroup>\n                        <Select\n                            items={this.FILTER_OPTIONS}\n                            itemRenderer={this.itemRenderer}\n                            filterable={false}\n                            onItemSelect={(item) => {\n                                this.setState({\n                                    filter: item.text,\n                                });\n                                State.search.filterProps =\n                                    item.attribute ?? null;\n                            }}\n                        >\n                            <Button icon=\"filter\">{this.state.filter}</Button>\n                        </Select>\n                        <Suggest\n                            inputValueRenderer={(a) => a}\n                            query={State.search.searchStr}\n                            onQueryChange={(value) =>\n                                (State.search.searchStr = value)\n                            }\n                            itemListPredicate={() => State.search.candidates}\n                            itemRenderer={(value: string) => (\n                                <MenuItem\n                                    text={value}\n                                    onMouseOver={() => {\n                                        State.search.isPreviewing = true;\n                                        State.interaction.currentlyHoveredNodeId = value;\n                                        State.graphDelegate.cameraFocusOn(\n                                            value\n                                        );\n                                    }}\n                                    onMouseLeave={() => {\n                                        State.search.isPreviewing = false;\n                                    }}\n                                />\n                            )}\n                            items={State.search.candidates}\n                            openOnKeyDown={true}\n                            noResults={\n                                <MenuItem disabled={true} text=\"No results.\" />\n                            }\n                            popoverProps={{ minimal: true }}\n                        />\n                    </ControlGroup>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport {\n    Button,\n    Menu,\n    MenuDivider,\n    MenuItem,\n    Position,\n    Switch,\n    Navbar as BlueprintNavbar,\n    NavbarGroup,\n    Alignment,\n    NavbarHeading,\n    NavbarDivider,\n} from \"@blueprintjs/core\";\nimport ClusterChooser from \"./utils/ClusterChooser\";\nimport logo from \"../images/icon.png\";\nimport State from \"../state\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport SearchPanel from \"./panels/SearchPanel\";\nimport * as THREE from \"three\";\nimport { ARROW_RIGHT } from \"@blueprintjs/core/lib/esm/common/keys\";\nimport { random } from \"lodash\";\nimport { color } from \"d3-color\";\n\n\nexport default observer(\n    /**\n     * @description the navigation bar on the top\n     * @author Zichen XU\n     * @class Navbar\n     * @extends {React.Component}\n     */\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <BlueprintNavbar\n                    //@ts-ignore\n                    style={{ zIndex: 2 }}\n                >\n                    <NavbarGroup align={Alignment.LEFT}>\n                        <img\n                            title=\"ClusterGrapher\"\n                            id=\"ClusterGrapher Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                            alt=\"ClusterGrapher Logo\"\n                        />\n                        <MenuDivider />\n                        <NavbarHeading>ClusterGrapher</NavbarHeading>\n                        <Popover2\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Open GEXF\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Import from CSV\"\n                                        icon=\"import\"\n                                        onClick={() => {\n                                            State.import.importDialogOpen = true;\n                                        }}\n                                    >\n                                        {/* {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        disabled={true}\n                                                        onClick={() => {\n                                                            fetchSampleGraph(\n                                                                sampleSnapshotUrl\n                                                            ).then((file) => {\n                                                                State.import.selectedGEXFFileFromInput = file;\n                                                                State.import\n                                                                    .importGraphFromGEXF()\n                                                                    .then(\n                                                                        (\n                                                                            res\n                                                                        ) => {\n                                                                            State.graph.rawGraph =\n                                                                                res.graph;\n                                                                            State.graph.metadata =\n                                                                                res.metadata;\n                                                                        }\n                                                                    );\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )} */}\n                                    </MenuItem>\n                                    <MenuItem\n                                        text=\"Load Cluster\"\n                                        icon=\"import\"\n                                        onClick={()=>{\n                                            State.import.clusterMap?.forEach((value)=>{\n                                                let sphere = new THREE.Mesh(State.graphDelegate.clusterObject.convexHullObject2(value), new THREE.MeshBasicMaterial);\n                                                State.graphDelegate.clusterObject.meshNormalMaterial(sphere);\n                                                State.graphDelegate.clusterObject.fusionClusterObjects?.add(sphere);\n                                            });\n                                            // let o = [] as string[];\n                                            // let i : number;\n                                            // for (i=0;i<20;i++){\n                                            //     o.push(String(i));\n                                            // }\n                                            // let material = new THREE.MeshBasicMaterial({\n                                            //     //@ts-ignore\n                                            //     color: 0xFFABAB,\n                                            //     transparent: true,\n                                            //     opacity: 0.15,\n                                            // });\n                                                                                       \n                                            // let aa = [\"2\",\"3\",\"12\",\"13\",\"14\",\"15\", \"18\"];\n                                            // let ba = [\"12\",\"13\",\"14\",\"15\",\"18\"];\n                                            // let ca = [\"14\",\"15\",\"18\"];\n                                            // let ab = [\"4\",\"5\",\"6\",\"7\",\"10\",\"11\",\"8\",\"9\",\"16\",\"17\",\"19\"];\n                                            // let bb = [\"4\",\"10\",\"11\",\"16\",\"17\"];\n                                            // let cb = [\"10\",\"11\",\"16\",\"17\"];\n                                            // let da = [\"16\",\"17\"];\n                                            // let bc = [\"5\",\"6\",\"7\"];\n                                            // let bd = [\"8\",\"9\",\"19\"];\n                                            // let db = [\"19\"];\n                                            \n                                                                                     \n                                            // let sphere = new THREE.Mesh(State.graphDelegate.clusterObject.convexHullObject2(o),material);\n                                            // State.graphDelegate.clusterObject.meshNormalMaterial(sphere);\n                                            // State.graphDelegate.clusterObject.fusionClusterObjects?.add(sphere);\n                                            // sphere = new THREE.Mesh(State.graphDelegate.clusterObject.convexHullObject2(aa),material);\n                                            // State.graphDelegate.clusterObject.meshNormalMaterial(sphere);\n                                            // State.graphDelegate.clusterObject.fusionClusterObjects?.add(sphere);\n                                            // sphere = new THREE.Mesh(State.graphDelegate.clusterObject.convexHullObject2(ba),material);\n                                            // State.graphDelegate.clusterObject.meshNormalMaterial(sphere);\n                                            // State.graphDelegate.clusterObject.fusionClusterObjects?.add(sphere);\n                                            // sphere = new THREE.Mesh(State.graphDelegate.clusterObject.convexHullObject2(ca),material);\n                                            // State.graphDelegate.clusterObject.meshNormalMaterial(sphere);\n                                            // State.graphDelegate.clusterObject.fusionClusterObjects?.add(sphere);\n                                            // sphere = new THREE.Mesh(State.graphDelegate.clusterObject.convexHullObject2(ab),material);\n                                            // State.graphDelegate.clusterObject.meshNormalMaterial(sphere);\n                                            // State.graphDelegate.clusterObject.fusionClusterObjects?.add(sphere);\n                                            // sphere = new THREE.Mesh(State.graphDelegate.clusterObject.convexHullObject2(bb),material);\n                                            // State.graphDelegate.clusterObject.meshNormalMaterial(sphere);\n                                            // State.graphDelegate.clusterObject.fusionClusterObjects?.add(sphere);\n                                            // sphere = new THREE.Mesh(State.graphDelegate.clusterObject.convexHullObject2(cb),material);\n                                            // State.graphDelegate.clusterObject.meshNormalMaterial(sphere);\n                                            // State.graphDelegate.clusterObject.fusionClusterObjects?.add(sphere);\n                                            // sphere = new THREE.Mesh(State.graphDelegate.clusterObject.convexHullObject2(da),material);\n                                            // State.graphDelegate.clusterObject.meshNormalMaterial(sphere);\n                                            // State.graphDelegate.clusterObject.fusionClusterObjects?.add(sphere);\n                                            // sphere = new THREE.Mesh(State.graphDelegate.clusterObject.convexHullObject2(bc),material);\n                                            // State.graphDelegate.clusterObject.meshNormalMaterial(sphere);\n                                            // State.graphDelegate.clusterObject.fusionClusterObjects?.add(sphere);\n                                            // sphere = new THREE.Mesh(State.graphDelegate.clusterObject.convexHullObject2(bd),material);\n                                            // State.graphDelegate.clusterObject.meshNormalMaterial(sphere);\n                                            // State.graphDelegate.clusterObject.fusionClusterObjects?.add(sphere);\n                                            // sphere = new THREE.Mesh(State.graphDelegate.clusterObject.convexHullObject2(db),material);\n                                            // State.graphDelegate.clusterObject.meshNormalMaterial(sphere);\n                                            // State.graphDelegate.clusterObject.fusionClusterObjects?.add(sphere);\n                                        }}\n                                    >\n                                    </MenuItem>\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Export Graph\"\n                                        onClick={() => {\n                                            State.preferences.exportDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            placement={Position.BOTTOM}\n                        >\n                            <Button minimal={true} icon=\"document\">\n                                Graph\n                            </Button>\n                        </Popover2>\n                        <Popover2\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Node DataSheet\"\n                                        icon=\"ungroup-objects\"\n                                        onClick={() => {\n                                            State.preferences.nodeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Edge DataSheet\"\n                                        icon=\"link\"\n                                        onClick={() => {\n                                            State.preferences.edgeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            placement={Position.BOTTOM}\n                        >\n                            <Button minimal={true} icon=\"wrench\">\n                                Tools\n                            </Button>\n                        </Popover2>\n                        <Switch\n                            style={{ marginTop: 10, marginLeft: 8 }}\n                            label=\"Graph Animation\"\n                            checked={State.css.isAnimating}\n                            onChange={() =>\n                                (State.css.isAnimating = !State.css.isAnimating)\n                            }\n                        />\n                    </NavbarGroup>\n\n                    {/* <ButtonGroup>\n                        <SimpleSelect\n                            className={classnames([Classes.ALERT_CONTENTS])}\n                            items={[\"3D\", \"2D\"]}\n                            value={State.preferences.view}\n                            onSelect={(it) => (State.preferences.view = it)}\n                        />\n                        <Divider />\n                    </ButtonGroup> */}\n\n                    <NavbarGroup align={Alignment.RIGHT}>\n                        <SearchPanel />\n                        <NavbarDivider />\n                        <div style={{ marginRight: 6 }}>Clustered by</div>\n                        <ClusterChooser\n                            onSelect={(cluster) => {\n                                State.cluster.setCluster(cluster);\n                            }}\n                            syncWith={State.cluster.clusterBy}\n                        />\n                        {/* <NavbarDivider />\n                        <SimpleSelect\n                            items={[\"trackball\", \"orbit\", \"fly\"]}\n                            text={State.preferences.controlType}\n                            onSelect={(it) => {\n                                State.preferences.controlType = it;\n                                ComponentRef.visualizer.updateVisualizationGraph();\n                            }}\n                        /> */}\n                        <Button\n                            minimal={true}\n                            icon=\"code\"\n                            onClick={() => {\n                                window.open(\n                                    \"https://github.com/grp202004/PiperNet\"\n                                );\n                            }}\n                        />\n                    </NavbarGroup>\n                </BlueprintNavbar>\n            );\n        }\n    }\n);\n","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { ItemPredicate, Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    items: any[];\n    onSelect: (\n        item: any,\n        event?: React.SyntheticEvent<HTMLElement, Event> | undefined\n    ) => void;\n    text: string;\n    small: boolean;\n    search: boolean;\n}\n\nexport interface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\nexport function CommonItemRenderer(\n    item: any,\n    props: CustomIItemRendererProps\n): JSX.Element | null {\n    return <MenuItem key={item} onClick={props.handleClick} text={item} />;\n}\n\nexport default observer(\n    /**\n     * @description provides a interface for choosing between elements\n     * @author Zichen XU\n     * @class SimpleSelect\n     * @extends {React.Component<Props, {}>}\n     */\n    class SimpleSelect extends React.Component<Props, {}> {\n        static defaultProps = {\n            small: false,\n            search: false,\n        };\n\n        itemPredicate: ItemPredicate<string> = (\n            query: string,\n            object: string\n        ) => {\n            return object.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n        };\n        render() {\n            if (this.props.search) {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemPredicate={this.itemPredicate}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={true}\n                        onItemSelect={this.props.onSelect}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            } else {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={false}\n                        onItemSelect={this.props.onSelect}\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            }\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Callout,\n    Classes,\n    FileInput,\n    Spinner,\n    Switch,\n    Tag,\n    MultistepDialog,\n    DialogStep,\n    H4,\n    H2,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport { IEdgeFileConfig, INodeFileConfig ,IClusterFileConfig } from \"../../state/ImportStore\";\n\ninterface PreviewTableProps {\n    file: INodeFileConfig | IEdgeFileConfig | IClusterFileConfig;\n}\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component<PreviewTableProps, {}> {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top {this.file.topN.length} rows of the\n                        selected file are displayed.\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    /**\n     * @description The multistep dialog for importing csv Node and Edge files\n     * @author Chenghao SHI\n     * @extends {React.Component}\n     */\n    class ImportDialog extends React.Component {\n        private multiDialogRef = React.createRef<MultistepDialog>();\n\n        state = {\n            delimiter: \",\",\n            step: 0,\n        };\n\n        canImport = () => {\n            if (State.import.importConfig.hasNodeFile) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            return State.import.importConfig.hasNodeFile ? (\n                <>\n                    <FileInput\n                        text={State.import.nodeFileName}\n                        onInputChange={(event) => {\n                            let target = event.target as HTMLInputElement;\n                            if (!target.files || target.files.length < 1) {\n                                return;\n                            }\n                            State.import.importConfig.hasNodeFile = true;\n                            State.import.nodeFileName = target.files[0].name;\n                            // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                            State.import.selectedNodeFileFromInput =\n                                target.files[0];\n                        }}\n                    />\n\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                text={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                        </div>\n                    )}\n                </>\n            ) : (\n                <H4>You don't need to import node file</H4>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <>\n                    <FileInput\n                        text={State.import.edgeFileName}\n                        onInputChange={(event) => {\n                            let target = event.target as HTMLInputElement;\n                            if (!target.files || target.files.length < 1) {\n                                return;\n                            }\n                            State.import.edgeFileName = target.files[0].name;\n                            State.import.selectedEdgeFileFromInput =\n                                target.files[0];\n                        }}\n                    />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div>\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </>\n            );\n        };\n\n\n        renderClusterSelection = () => {\n            const clusterFile = State.import.importConfig.clusterFile;\n            return (\n                <>\n                    <FileInput\n                        text={State.import.clusterFileName}\n                        onInputChange={(event) => {\n                            let target = event.target as HTMLInputElement;\n                            if (!target.files || target.files.length < 1) {\n                                return;\n                            }\n                            State.import.clusterFileName = target.files[0].name;\n                            State.import.selectedClusterFileFromInput =\n                                target.files[0];\n                        }}\n                    />\n\n                    {clusterFile.isReady && (\n                        <div>\n                            <PreviewTable file={clusterFile} />\n                            <br />\n                            Column for Cluster ID:\n                            <SimpleSelect\n                                items={clusterFile.columns}\n                                text={clusterFile.mapping.name}\n                                onSelect={(it) =>\n                                    (clusterFile.mapping.name = it)\n                                }\n                            />\n                            <br />\n                            \n                        </div>\n                    )}\n                </>\n            );\n        };\n\n\n\n\n        renderDelimiterSelection() {\n            return (\n                <div>\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        text={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter === \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter === \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <MultistepDialog\n                    ref={this.multiDialogRef}\n                    className={classnames(\"multistep-dialog-box\")}\n                    icon=\"import\"\n                    isOpen={State.import.importDialogOpen}\n                    onClose={() => {\n                        State.import.importDialogOpen = false;\n                    }}\n                    finalButtonProps={{\n                        intent: \"primary\",\n                        onClick: () => {\n                            State.import.isLoading = true;\n                            State.import.importGraphFromCSV().then((res) => {\n                                State.graph.setGraph(res.graph, res.metadata);\n                                if (\n                                    State.graph.rawGraph.hasAttribute(\"default\")\n                                ) {\n                                    State.cluster.setCluster(\n                                        State.graph.rawGraph.getAttribute(\n                                            \"default\"\n                                        )\n                                    );\n                                }\n                                State.import.isLoading = false;\n                                State.import.importDialogOpen = false;\n                            });\n                        },\n                        disabled: !(\n                            !State.import.importConfig.hasNodeFile ||\n                            (State.import.importConfig.hasNodeFile &&\n                                State.import.importConfig.nodeFile.isReady)\n                        ),\n                        text: \"Import\",\n                    }}\n                    onChange={(id) => {\n                        this.setState({\n                            step: id,\n                        });\n                    }}\n                    title=\"Open Files\"\n                >\n                    <DialogStep\n                        id=\"csv_edge\"\n                        title=\"Choose a Edge file\"\n                        panel={\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"multistep-dialog-body\"\n                                )}\n                                style={{\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    display: \"flex\",\n                                }}\n                            >\n                                {State.import.isLoading ? (\n                                    <Spinner />\n                                ) : (\n                                    <div>\n                                        <div\n                                            className={classnames(\n                                                Classes.DIALOG_BODY,\n                                                \"import-dialog\"\n                                            )}\n                                            style={{ maxWidth: \"40vw\" }}\n                                        >\n                                            {this.renderEdgesSelection()}\n                                            <br />\n                                            {this.renderDelimiterSelection()}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        }\n                        nextButtonProps={{\n                            disabled: !State.import.importConfig.edgeFile\n                                .isReady,\n                        }}\n                    />\n                    <DialogStep\n                        id=\"csv_node_need\"\n                        title=\"Do I need to import node file ?\"\n                        panel={\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"multistep-dialog-body\"\n                                )}\n                                style={{\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                }}\n                            >\n                                <H2>Do I need to import node file?</H2>\n                                <H4>\n                                    You can import nodes file to add node\n                                    attributes to this graph\n                                </H4>\n                                <p>\n                                    To import attributes we will need to proceed\n                                    another csv files: a list of nodes, Nodes\n                                    must have at least an ID, other fields are\n                                    optional\n                                </p>\n                                <br />\n                                <Switch\n                                    large={true}\n                                    checked={\n                                        State.import.importConfig.hasNodeFile\n                                    }\n                                    label=\"I want to import node file\"\n                                    onChange={() =>\n                                        (State.import.importConfig.hasNodeFile = !State\n                                            .import.importConfig.hasNodeFile)\n                                    }\n                                />\n                            </div>\n                        }\n                    />\n                    <DialogStep\n                        id=\"csv_node\"\n                        title=\"Choose a Node file\"\n                        panel={\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"multistep-dialog-body\"\n                                )}\n                                style={{\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    display: \"flex\",\n                                }}\n                            >\n                                {State.import.isLoading ? (\n                                    <Spinner />\n                                ) : (\n                                    <div>\n                                        <div\n                                            className={classnames(\n                                                Classes.DIALOG_BODY,\n                                                \"import-dialog\"\n                                            )}\n                                            style={{ maxWidth: \"40vw\" }}\n                                        >\n                                            {this.renderNodesSelection()}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        }\n                    />\n\n\n                    <DialogStep\n                        id=\"csv_cluster\"\n                        title=\"Choose a Cluster file\"\n                        panel={\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"multistep-dialog-body\"\n                                )}\n                                style={{\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    display: \"flex\",\n                                }}\n                            >\n                                {State.import.isLoading ? (\n                                    <Spinner />\n                                ) : (\n                                    <div>\n                                        <div\n                                            className={classnames(\n                                                Classes.DIALOG_BODY,\n                                                \"import-dialog\"\n                                            )}\n                                            style={{ maxWidth: \"40vw\" }}\n                                        >\n                                            {this.renderClusterSelection()}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        }\n                    />\n\n                </MultistepDialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Card,\n    Classes,\n    Dialog,\n    Divider,\n    Elevation,\n    H3,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport gexf from \"graphology-gexf/browser\";\nimport State from \"../../state\";\nimport { CSVLink } from \"react-csv\";\n\nexport default observer(\n    /**\n     * @description Dialog used to export the graph into GEXF file or CSV Node/Edge files\n     * @author Chenghao SHI\n     * @extends {React.Component}\n     */\n    class ExportDialog extends React.Component {\n        state = {\n            ready: true,\n        };\n\n        /**\n         * compute the GEXF file from rawGraph\n         * delete the temporary _visualize attribute from the graph\n         *\n         * @returns {*}\n         */\n        computeGEXFFile() {\n            let graphCopy = State.graph.rawGraph.copy();\n            graphCopy.forEachNode((_node, attributes: any) => {\n                delete attributes[\"_visualize\"];\n            });\n            graphCopy.forEachEdge((_edge, attributes: any) => {\n                delete attributes[\"_visualize\"];\n            });\n            return gexf.write(graphCopy);\n        }\n\n        computeNodeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [];\n            headers.push({ label: \"_id\", key: \"_id\" });\n            State.graph.metadata.nodeProperties.map((value) => {\n                headers.push({ label: value, key: value });\n                return null;\n            });\n\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.nodes.forEach((node) => {\n                data.push({\n                    _id: node.key,\n                    ...node.attributes,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        computeEdgeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [\n                { label: \"source\", key: \"source\" },\n                { label: \"target\", key: \"target\" },\n            ];\n\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.edges.forEach((edge) => {\n                data.push({\n                    source: edge.source,\n                    target: edge.target,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"projects\"\n                    isOpen={State.preferences.exportDialogOpen}\n                    onClose={() => {\n                        State.preferences.exportDialogOpen = false;\n                    }}\n                    title={`Export Graph`}\n                >\n                    {!this.state.ready ? (\n                        <Spinner />\n                    ) : (\n                        <div className={classnames(Classes.DIALOG_BODY)}>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    GEXF Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://gephi.org/gexf/format/\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n                                <Divider />\n\n                                <CSVLink\n                                    data={this.computeGEXFFile()}\n                                    filename={\"Snapshot-GEXF.gexf\"}\n                                    className=\"btn btn-primary\"\n                                    target=\"_blank\"\n                                >\n                                    <Button>Download GEXF File</Button>\n                                </CSVLink>\n                            </Card>\n                            <br />\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    CSV Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://github.com/grp202004/PiperNet#data-import\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n\n                                <Divider />\n                                <ButtonGroup>\n                                    <CSVLink\n                                        data={this.computeNodeFile().data}\n                                        headers={this.computeNodeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Node.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Node File</Button>\n                                    </CSVLink>\n                                    <Divider />\n                                    <CSVLink\n                                        data={this.computeEdgeFile().data}\n                                        headers={this.computeEdgeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Edge.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Edge File</Button>\n                                    </CSVLink>\n                                </ButtonGroup>\n                            </Card>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Dialog } from \"@blueprintjs/core\";\nimport { Column, Table, TableLoadingOption } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\ninterface Props {\n    for: string;\n    children: React.ReactNode;\n}\n\nexport default observer(\n    /**\n     * @description the wrapper for data sheet dialog, provides a loading state before the data shows\n     * @author Zichen XU\n     * @class DataSheetDialogWrapper\n     * @extends {React.Component<Props, {}>}\n     */\n    class DataSheetDialogWrapper extends React.Component<Props, {}> {\n        state = {\n            loading: true,\n        };\n\n        renderTable() {\n            if (this.state.loading) {\n                return (\n                    <div className=\"argo-table-container\">\n                        <Table\n                            className=\"pt-bordered pt-striped\"\n                            numRows={20}\n                            loadingOptions={[\n                                TableLoadingOption.CELLS,\n                                TableLoadingOption.COLUMN_HEADERS,\n                                TableLoadingOption.ROW_HEADERS,\n                            ]}\n                        >\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                        </Table>\n                    </div>\n                );\n            } else {\n                return this.props.children;\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"database\"\n                    isOpen={\n                        this.props.for === \"node\"\n                            ? State.preferences.nodeDataSheetDialogOpen\n                            : State.preferences.edgeDataSheetDialogOpen\n                    }\n                    onOpened={() => {\n                        setTimeout(() => {\n                            this.setState({\n                                loading: false,\n                            });\n                        }, 100);\n                    }}\n                    onClose={() => {\n                        if (this.props.for === \"node\") {\n                            State.preferences.nodeDataSheetDialogOpen = false;\n                        } else {\n                            State.preferences.edgeDataSheetDialogOpen = false;\n                        }\n                        this.setState({\n                            loading: true,\n                        });\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        {this.renderTable()}\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Code,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    EditableCell,\n    ICellRenderer,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport {\n    handleStringChange,\n    parseNumberOrString,\n    stringifyNodeDetail,\n} from \"../utils/InputFormUtils\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\n\nlet GraphNodeTable = observer(\n    class GraphNodeTable extends React.Component {\n        state = {\n            filterQuery: \"\",\n            addNodeDialogOpen: false,\n            deleteAlertOpen: false,\n            nodeToDelete: null as SerializedNode | null,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedNode[] = [];\n            State.graph.rawGraph.export().nodes.forEach((node) => {\n                if (\n                    node.key\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(node);\n                }\n            });\n            return newTable;\n        }\n\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        renderColumns: any = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it !== \"_options\") {\n                    return (\n                        <Column\n                            name={it}\n                            cellRenderer={(\n                                rowIndex: number,\n                                columnIndex: number\n                            ) => this.renderCell(rowIndex, it)}\n                        />\n                    );\n                }\n                return null;\n            });\n            return columns.filter((element) => {\n                return element !== undefined;\n            });\n        };\n\n        renderCell = (rowIndex: number, attribute: string) => {\n            let cellAttributes = this.filteredTable[rowIndex].attributes!!;\n            let cell = cellAttributes[attribute];\n\n            return (\n                <EditableCell\n                    value={cell}\n                    onChange={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    onConfirm={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    tooltip={cell}\n                />\n            );\n        };\n\n        // if the input is a number in string, it will convert the string into number to store\n        setValue = (value: string, rowIndex: number, attribute: string) => {\n            let id = this.filteredTable[rowIndex].key;\n            State.graph.rawGraph.setNodeAttribute(\n                id,\n                attribute,\n                parseNumberOrString(value)\n            );\n        };\n\n        deleteNodeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                nodeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteNodeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropNode(\n                            this.state.nodeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                    style={{ minWidth: \"60vw\" }}\n                >\n                    <p>\n                        Are you sure you want to delete the node with ID{\" \"}\n                        <Code>{this.state.nodeToDelete?.key}</Code> with\n                        attributes:\n                        <Code>\n                            {stringifyNodeDetail(\n                                this.state.nodeToDelete\n                                    ?.attributes as Attributes\n                            )}\n                        </Code>\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <Callout\n                        title={\n                            \"Try to click on a cell and type in something...\"\n                        }\n                        intent=\"primary\"\n                        icon=\"edit\"\n                    >\n                        The corresponding value of a node's attribute can be\n                        modified by clicking the cell and type in\n                    </Callout>\n\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() => {\n                                State.preferences.AddNodeDialogOpen = true;\n                            }}\n                            icon=\"new-object\"\n                            intent=\"primary\"\n                            text=\"Add Node\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Node...\"\n                            value={this.state.filterQuery}\n                            fill={true}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n\n                    <Table\n                        className=\"argo-table\"\n                        defaultRowHeight={30}\n                        numRows={this.filteredTable.length}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteNodeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"ID\"\n                            //@ts-ignore\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.filteredTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                    {this.deleteNodeAlert()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    /**\n     * @description the node data sheet table\n     * @author Zichen XU\n     * @class NodeDataSheetDialog\n     * @extends {React.Component}\n     */\n    class NodeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"node\">\n                    <GraphNodeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, FormGroup, MenuItem, Tooltip } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { stringifyNodeDetail } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the text to be shown above the selectButton\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    text: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * the {nodeId} is the id of the selected node\n     *\n     * @memberof Props\n     */\n    onChange: (nodeId: string) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    /**\n     * @description this component can be used to choose the node among all the nodes\n     * with basic search filters available\n     *\n     * to use it, you have to specify the text shown above the selectButton\n     * as well as the onChange function to call when a candidate is selected\n     * @author Zichen XU\n     * @class NodeChooser\n     * @extends {React.Component<Props, {}>}\n     */\n    class NodeChooser extends React.Component<Props, {}> {\n        state = {\n            select: \"Choose \" + this.props.text,\n        };\n\n        render() {\n            return (\n                <FormGroup\n                    label={this.props.text}\n                    labelFor=\"text-input\"\n                    labelInfo=\"(required)\"\n                >\n                    <Select\n                        filterable={true}\n                        items={State.graph.rawGraph.export().nodes}\n                        itemPredicate={(\n                            query: string,\n                            item: SerializedNode<Attributes>\n                        ) => {\n                            return item.key.includes(query);\n                        }}\n                        itemRenderer={(item: SerializedNode<Attributes>) => {\n                            return (\n                                <Tooltip\n                                    content={stringifyNodeDetail(\n                                        item.attributes ?? {}\n                                    )}\n                                >\n                                    <MenuItem\n                                        key={item.key}\n                                        text={item.key}\n                                        onClick={() => {\n                                            let key = item.key;\n                                            this.setState({ select: key });\n                                            this.props.onChange(key);\n                                        }}\n                                    />\n                                </Tooltip>\n                            );\n                        }}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                        onItemSelect={() => {}}\n                    >\n                        <Button\n                            text={this.state.select}\n                            rightIcon=\"double-caret-vertical\"\n                        />\n                    </Select>\n                </FormGroup>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Code,\n    Dialog,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport { Attributes, SerializedEdge } from \"graphology-types\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\nimport NodeChooser from \"../utils/NodeChooser\";\n\nlet GraphEdgeTable = observer(\n    class GraphEdgeTable extends React.Component {\n        state = {\n            addEdgeDialogOpen: false,\n            deleteAlertOpen: false,\n            edgeToDelete: null as null | SerializedEdge<Attributes>,\n            filterQuery: null as null | string,\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedEdge<Attributes>[] = [];\n            State.graph.rawGraph.export().edges.forEach((edge) => {\n                if (\n                    !this.state.filterQuery ||\n                    edge.source\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    edge.target\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(edge);\n                }\n            });\n            return newTable;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(\n                            this.state.edgeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.key}</Code> from Node ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.source}</Code> to Node\n                        ID <Code>{this.state.edgeToDelete?.target}</Code>. This\n                        action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        addEdgeDialog = () => {\n            return (\n                <Dialog\n                    isOpen={this.state.addEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => this.setState({ addEdgeDialogOpen: false })}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() =>\n                                    this.setState({ addEdgeDialogOpen: false })\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.setState({ addEdgeDialogOpen: false });\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() =>\n                                this.setState({ addEdgeDialogOpen: true })\n                            }\n                            icon=\"new-link\"\n                            intent=\"primary\"\n                            text=\"Add Edge\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Source or Target of an Edge...\"\n                            value={this.state.filterQuery ?? \"\"}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n                    <Table\n                        className=\"argo-table\"\n                        numRows={this.filteredTable.length}\n                        defaultRowHeight={30}\n                        renderMode={RenderMode.NONE}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteEdgeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"Source\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].source}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                        <Column\n                            name=\"Target\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].target}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                    </Table>\n                    {this.deleteEdgeAlert()}\n                    {this.addEdgeDialog()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    /**\n     * @description the edge data sheet table\n     * @author Zichen XU\n     * @class EdgeDataSheetDialog\n     * @extends {React.Component}\n     */\n    class EdgeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"edge\">\n                    <GraphEdgeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import {\n    Button,\n    Card,\n    Elevation,\n    FormGroup,\n    H5,\n    InputGroup,\n    Tooltip,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport State from \"../../state\";\nimport { Attributes } from \"graphology-types\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * function to call when a new node is successfully added\n     * the {nodeId} is the id of the newly added node, {attributes} is the attributes of the newly added node\n     *\n     * @memberof Props\n     */\n    onAdded: (nodeId: string, attributes: Attributes) => void;\n}\n\nexport default observer(\n    /**\n     * @description This component will be used to be part of addNodeDialog\n     * @author Zichen XU,Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class NodeAdder extends React.Component<Props, {}> {\n        state = {\n            newNodeId: \"\",\n            attributes: {} as Attributes,\n        };\n\n        get canImport() {\n            return (\n                !State.graph.rawGraph.hasNode(this.state.newNodeId) &&\n                this.state.newNodeId !== \"\"\n            );\n        }\n\n        canImportTag = () => {\n            return this.canImport ? (\n                <Tooltip\n                    content={\n                        \"This Node Id is not used by any existing node yet\"\n                    }\n                    intent=\"success\"\n                >\n                    <Button icon=\"tick\" intent=\"success\" minimal={true} />\n                </Tooltip>\n            ) : (\n                <Tooltip\n                    content={\n                        \"This Node Id is currently in use by other nodes, try with another one instead\"\n                    }\n                    intent=\"warning\"\n                >\n                    <Button icon=\"cross\" intent=\"warning\" minimal={true} />\n                </Tooltip>\n            );\n        };\n\n        renderAttributesForm = (attributes: string[]) => {\n            return attributes.map((attribute) => {\n                if (attribute !== \"_options\" && attribute !== \"_visualize\") {\n                    return (\n                        <FormGroup label={attribute}>\n                            <InputGroup\n                                asyncControl={true}\n                                placeholder={\n                                    \"Enter the value for attribute: \" +\n                                    attribute\n                                }\n                                onChange={handleStringChange((value) => {\n                                    let newValue = this.state.attributes;\n                                    newValue[attribute] = parseNumberOrString(\n                                        value\n                                    );\n                                    this.setState({ attributes: newValue });\n                                })}\n                                value={this.state.attributes[attribute]}\n                            />\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        };\n\n        render() {\n            return (\n                <Card elevation={Elevation.ONE}>\n                    <FormGroup label=\"New Node ID\" labelInfo=\"(required)\">\n                        <InputGroup\n                            autoFocus={true}\n                            asyncControl={true}\n                            placeholder=\"Enter the new Node Id...\"\n                            intent={this.canImport ? \"success\" : \"warning\"}\n                            rightElement={this.canImportTag()}\n                            onChange={handleStringChange((value) =>\n                                this.setState({ newNodeId: value })\n                            )}\n                            value={this.state.newNodeId}\n                        />\n                    </FormGroup>\n                    <Card elevation={Elevation.ONE}>\n                        <H5>Attributes</H5>\n                        {this.renderAttributesForm(\n                            State.graph.metadata.nodeProperties\n                        )}\n                    </Card>\n                    <hr />\n                    <Button\n                        intent=\"primary\"\n                        onClick={() => {\n                            State.graph.decorateRawNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.graph.mutating.addNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            this.props.onAdded(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.preferences.AddNodeDialogOpen = false;\n                            // State.preferences.rightClickBackgroundPanelOpen = false;\n                            // this.forceUpdate();\n                            // State.graphDelegate.cameraFocusOn(this.state.newNodeId);\n                        }}\n                        disabled={!this.canImport}\n                    >\n                        Confirm\n                    </Button>\n                </Card>\n            );\n        }\n        componentDidMount = () => {\n            State.graph.metadata.nodeProperties.forEach((prop) => {\n                let newValue = this.state.attributes;\n                newValue[prop] = \"\";\n                this.setState({ attributes: newValue });\n            });\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Classes, Dialog, Tag } from \"@blueprintjs/core\";\nimport NodeAdder from \"../utils/NodeAdder\";\nimport State from \"../../state\";\n\nexport default observer(\n    /**\n     * @description the dialog for adding nodes with fields for the user to fill in\n     * @author Zichen XU\n     * @class AddNodeDialog\n     * @extends {React.Component}\n     */\n    class AddNodeDialog extends React.Component {\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddNodeDialogOpen}\n                    icon=\"new-object\"\n                    onClose={() => {\n                        State.preferences.AddNodeDialogOpen = false;\n                    }}\n                    title=\"Add Node\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add node with unique node id to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> node means there should only exist\n                            one node that has the respective node id.\n                        </p>\n                        <Tag>New nodes are added to the end of the table</Tag>\n                        <hr />\n                        <NodeAdder\n                            onAdded={() => {\n                                this.setState({ addNodeDialogOpen: false });\n                                this.forceUpdate();\n                            }}\n                        />\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Dialog,\n    Divider,\n    Intent,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport NodeChooser from \"../utils/NodeChooser\";\nexport default observer(\n    /**\n     * @description This component will be used when adding a edge\n     * @author Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class AddEdgeDialog extends React.Component {\n        state = {\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => {\n                        State.preferences.AddEdgeDialogOpen = false;\n                    }}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() => {\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                            {/* //todo:\n                            <Button\n                                onClick={() => {\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                            >\n                                Preview\n                            </Button> */}\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.forceUpdate();\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Classes,\n    ControlGroup,\n    Dialog,\n    FileInput,\n    Intent,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\nexport default observer(\n    /**\n     * @description the dialog for GEXF import\n     * @author Zichen XU\n     * @class ImportGEXFDialog\n     * @extends {React.Component}\n     */\n    class ImportGEXFDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <ButtonGroup>\n                            <Button\n                                disabled={!this.state.fileIsSelect}\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.import.isLoading = true;\n                                    State.import\n                                        .importGraphFromGEXF()\n                                        .then((res) => {\n                                            State.graph.setGraph(\n                                                res.graph,\n                                                res.metadata\n                                            );\n\n                                            if (\n                                                State.graph.rawGraph.hasAttribute(\n                                                    \"default\"\n                                                )\n                                            ) {\n                                                State.cluster.setCluster(\n                                                    State.graph.rawGraph.getAttribute(\n                                                        \"default\"\n                                                    )\n                                                );\n                                            }\n\n                                            State.import.isLoading = false;\n                                            State.import.importGEXFDialogOpen = false;\n                                        });\n                                }}\n                                text=\"Import\"\n                            />\n                        </ButtonGroup>\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"document-open\"\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;\n                    }}\n                    title=\"Open GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <ControlGroup>\n                                    <FileInput\n                                        text={State.import.gexfFileName}\n                                        onInputChange={(event) => {\n                                            let target = event.target as HTMLInputElement;\n                                            if (\n                                                !target.files ||\n                                                target.files.length < 1\n                                            ) {\n                                                return;\n                                            }\n                                            State.import.gexfFileName =\n                                                target.files[0].name;\n                                            // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                            State.import.selectedGEXFFileFromInput =\n                                                target.files[0];\n\n                                            this.setState({\n                                                fileIsSelect: true,\n                                            });\n                                        }}\n                                    />\n                                </ControlGroup>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\n\nimport ImportDialog from \"./dialogs/importDialog\";\nimport ExportDialog from \"./dialogs/ExportDialog\";\nimport NodeDataSheetDialog from \"./dialogs/NodeDataSheetDialog\";\nimport EdgeDataSheetDialog from \"./dialogs/EdgeDataSheetDialog\";\nimport AddNodeDialog from \"./dialogs/AddNodeDialog\";\nimport AddEdgeDialog from \"./dialogs/AddEdgeDialog\";\nimport ImportGEXFDialog from \"./dialogs/ImportGEXFDialog\";\n\n/**\n * @description all the dialogs that may appear\n * @author Zichen XU, Zhiyuan LYU\n * @export\n * @class Dialogs\n * @extends {React.Component}\n */\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                <ImportGEXFDialog />\n                <ImportDialog />\n                <AddNodeDialog />\n                <AddEdgeDialog />\n                <NodeDataSheetDialog />\n                <EdgeDataSheetDialog />\n                <ExportDialog />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Attributes } from \"graphology-types\";\nimport classnames from \"classnames\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    /**\n     * @description This component will be used when multi-select in the mode 'node selection'.\n     * @author Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class SelectionBox extends React.Component {\n        state = {\n            boxStyle: {\n                left: 0,\n                top: 0,\n                width: 0,\n                height: 0,\n            },\n            startPoint: { x: 0, y: 0 },\n            endPoint: { x: 0, y: 0 },\n            mouseDown: false,\n        };\n\n        onMouseDownCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            let startpoint = { x: event.clientX, y: event.clientY };\n            this.setState({\n                startPoint: startpoint,\n                endPoint: startpoint,\n                mouseDown: true,\n            });\n        };\n\n        onMouseMoveCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            if (this.state.mouseDown) {\n                let endPoint = { x: event.clientX, y: event.clientY };\n                this.setState({\n                    endPoint: endPoint,\n                    boxStyle: this._calculateSelectionBox(\n                        this.state.startPoint,\n                        this.state.endPoint\n                    ),\n                });\n            }\n        };\n\n        onMouseUpCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            State.interaction.boxSelection_endPoint = {\n                x: this.state.endPoint.x,\n                y: this.state.endPoint.y,\n            };\n            State.interaction.boxSelection_startPoint = {\n                x: this.state.startPoint.x,\n                y: this.state.startPoint.y,\n            };\n\n            this.setState({\n                startPoint: { x: 0, y: 0 },\n                endPoint: { x: 0, y: 0 },\n                boxStyle: {\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                },\n                mouseDown: false,\n            });\n            State.interaction.boxSelectionOpen = false;\n            State.interaction.boxSelectNode();\n        };\n\n        _calculateSelectionBox(\n            startPoint: Attributes,\n            endPoint: Attributes\n        ): Attributes {\n            let left = Math.min(startPoint.x, endPoint.x);\n            let top = Math.min(startPoint.y, endPoint.y);\n            let width = Math.abs(startPoint.x - endPoint.x);\n            let height = Math.abs(startPoint.y - endPoint.y);\n            return { left: left, top: top, width: width, height: height };\n        }\n\n        render() {\n            return (\n                <div\n                    className={classnames(\"boxCanvas\")}\n                    onMouseDown={this.onMouseDownCallback}\n                    onMouseMove={this.onMouseMoveCallback}\n                    onMouseUp={this.onMouseUpCallback}\n                >\n                    <div\n                        className={classnames(\"selectionBox\")}\n                        style={this.state.boxStyle}\n                    ></div>\n                </div>\n            );\n        }\n    }\n);\n","import ReactDOM from \"react-dom\";\nimport State from \"..\";\nimport * as THREE from \"three\";\nimport { Object3D } from \"three\";\nimport ComponentRef from \"../../components/ComponentRef\";\n\nexport const onDocumentLeftClick: EventListener = (evt: Event) => {\n    const event = evt as MouseEvent;\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterLeftClickCallback(\n            intersects[0].object.uuid,\n            event\n        );\n        console.log(\"currently Clicked ClusterId\", intersects[0].object.uuid);\n    }\n};\n\nexport const onDocumentRightClick: EventListener = (evt: Event) => {\n    const event = evt as MouseEvent;\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterRightClickCallback(\n            intersects[0].object.uuid,\n            event\n        );\n    } else {\n        State.clusterInteraction.clusterRightClickCallback(null, event);\n    }\n    console.log(\n        \"currently Right-Clicked ClusterId\",\n        intersects[0]?.object?.uuid ?? null\n    );\n};\n\nexport function onDocumentMouseMove(this: Element, event: MouseEvent) {\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        State.clusterInteraction.currentlyHoveredClusterId = null;\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterHoverCallback(\n            intersects[0].object.uuid,\n            event\n        );\n    } else {\n        State.clusterInteraction.clusterHoverCallback(null, event);\n    }\n    console.log(\n        \"currentlyHoveredClusterId\",\n        intersects[0]?.object?.uuid ?? null\n    );\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport State from \"../../../state\";\nimport { NAVBAR_HEIGHT } from \"../../../constants\";\nimport { ICanvasDrawProps } from \"./CanvasDrawPanel\";\n\nexport default observer(\n    /**\n     * @description canvas to draw free-hand gesture when cluster splitting\n     * @author Zichen XU\n     * @class CanvasDrawFreehandPanel\n     */\n    class CanvasDrawFreehandPanel extends React.Component<\n        ICanvasDrawProps,\n        {}\n    > {\n        //@ts-ignore\n        canvasRef: React.MutableRefObject<CanvasDraw> = React.createRef();\n\n        get canvasMethods() {\n            return this.canvasRef.current;\n        }\n\n        render() {\n            return (\n                <div\n                    onMouseUp={() => {\n                        const data = JSON.parse(\n                            this.canvasMethods.getSaveData()\n                        );\n                        if (data.lines[0].points.length > 4) {\n                            this.exportDrawing();\n                        }\n                    }}\n                >\n                    <CanvasDraw\n                        ref={this.canvasRef}\n                        style={{\n                            position: \"absolute\",\n                            top: this.props.boundingRect.y,\n                        }}\n                        canvasHeight={this.props.boundingRect.height}\n                        canvasWidth={this.props.boundingRect.width}\n                        lazyRadius={0}\n                        brushRadius={3}\n                        brushColor={\"#F6B26B\"}\n                        catenaryColor={\"#F6B26B\"}\n                    />\n                </div>\n            );\n        }\n\n        exportDrawing() {\n            State.helper.clusterSplittingCurrentStep = 3;\n            const data = JSON.parse(this.canvasMethods.getSaveData());\n            let drawPoints = data?.lines[0]?.points as {\n                x: number;\n                y: number;\n            }[];\n            if (!drawPoints) {\n                return;\n            }\n            drawPoints.forEach((value) => {\n                value.y += NAVBAR_HEIGHT;\n            });\n\n            // line was drawn left to right\n            if (drawPoints[0].x < drawPoints[drawPoints.length - 1].x) {\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.props.boundingRect.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            } else {\n                drawPoints.reverse();\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.props.boundingRect.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            }\n\n            State.clusterInteraction.lineSegment = drawPoints;\n            State.clusterInteraction.computeSplitCluster();\n        }\n\n        clearDrawing() {\n            this.canvasMethods.clear();\n        }\n\n        componentDidMount = () => {\n            this.clearDrawing();\n        };\n\n        componentWillUnmount = () => {\n            this.clearDrawing();\n        };\n    }\n);\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport State from \"../../../state\";\nimport { ICanvasDrawProps } from \"./CanvasDrawPanel\";\n\nexport default observer(\n    /**\n     * @description the canvas to draw a straight line when splitting the cluster\n     * @author Zichen XU\n     * @class CanvasDrawStraightLinePanel\n     */\n\n    class CanvasDrawStraightLinePanel extends React.Component<ICanvasDrawProps> {\n        private startPoint = { x: 0, y: 0 };\n        private endPoint = { x: 100, y: 100 };\n        private mouseDown = false;\n\n        onMouseDownCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            this.startPoint = { x: event.clientX, y: event.clientY - 50 };\n            this.endPoint = { x: event.clientX, y: event.clientY - 50 };\n            this.mouseDown = true;\n        };\n\n        onMouseMoveCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            if (this.mouseDown) {\n                this.endPoint = { x: event.clientX, y: event.clientY - 50 };\n                this.drawPoints();\n            }\n        };\n\n        onMouseUpCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            if (this.mouseDown) {\n                this.mouseDown = false;\n                this.exportDrawing();\n            }\n        };\n\n        exportDrawing() {\n            State.helper.clusterSplittingCurrentStep = 3;\n            let drawPoints = [\n                { x: this.startPoint.x, y: this.startPoint.y },\n                { x: this.endPoint.x, y: this.endPoint.y },\n            ] as {\n                x: number;\n                y: number;\n            }[];\n\n            // line was drawn left to right\n            if (drawPoints[0].x < drawPoints[1].x) {\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.props.boundingRect.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            } else {\n                drawPoints.reverse();\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.props.boundingRect.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            }\n\n            State.clusterInteraction.lineSegment = drawPoints;\n            State.clusterInteraction.computeSplitCluster();\n        }\n\n        ctx!: CanvasRenderingContext2D;\n\n        drawPoints() {\n            this.ctx.lineJoin = \"round\";\n            this.ctx.lineCap = \"round\";\n            this.ctx.clearRect(\n                0,\n                0,\n                this.ctx.canvas.width,\n                this.ctx.canvas.height\n            );\n            this.ctx.lineWidth = 5;\n\n            this.ctx.beginPath();\n\n            this.ctx.moveTo(this.startPoint.x, this.startPoint.y);\n            this.ctx.lineTo(this.endPoint.x, this.endPoint.y);\n\n            this.ctx.strokeStyle = \"#F6B26B\";\n            this.ctx.stroke();\n        }\n\n        clearDrawing() {\n            this.ctx?.clearRect(\n                0,\n                0,\n                this.ctx.canvas.width,\n                this.ctx.canvas.height\n            );\n        }\n\n        render() {\n            return (\n                <canvas\n                    style={{\n                        position: \"absolute\",\n                        zIndex: 20,\n                    }}\n                    width={this.props.boundingRect.width}\n                    height={this.props.boundingRect.height}\n                    ref={(canvas) => {\n                        if (canvas) {\n                            this.ctx = canvas.getContext(\n                                \"2d\"\n                            ) as CanvasRenderingContext2D;\n                        }\n                    }}\n                    onMouseDown={this.onMouseDownCallback}\n                    onMouseMove={this.onMouseMoveCallback}\n                    onMouseUp={this.onMouseUpCallback}\n                />\n            );\n        }\n\n        componentDidMount = () => {\n            this.clearDrawing();\n        };\n\n        componentWillUnmount = () => {\n            this.clearDrawing();\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport State from \"../../../state\";\nimport { NAVBAR_HEIGHT } from \"../../../constants\";\nimport { ICanvasDrawProps } from \"./CanvasDrawPanel\";\n\nexport default observer(\n    /**\n     * @description canvas to draw free circle gesture when cluster splitting\n     * @author Zichen XU\n     * @class CanvasDrawFreeCirclePanel\n     */\n    class CanvasDrawFreeCirclePanel extends React.Component<\n        ICanvasDrawProps,\n        {}\n    > {\n        //@ts-ignore\n        canvasRef: React.MutableRefObject<CanvasDraw> = React.createRef();\n\n        get canvasMethods() {\n            return this.canvasRef.current;\n        }\n\n        render() {\n            return (\n                <div\n                    onMouseUp={() => {\n                        const data = JSON.parse(\n                            this.canvasMethods.getSaveData()\n                        );\n                        if (data.lines[0].points.length > 4) {\n                            this.exportDrawing();\n                        }\n                    }}\n                >\n                    <CanvasDraw\n                        ref={this.canvasRef}\n                        style={{\n                            position: \"absolute\",\n                            top: this.props.boundingRect.y,\n                        }}\n                        canvasHeight={this.props.boundingRect.height}\n                        canvasWidth={this.props.boundingRect.width}\n                        lazyRadius={0}\n                        brushRadius={3}\n                        brushColor={\"#F6B26B\"}\n                        catenaryColor={\"#F6B26B\"}\n                    />\n                </div>\n            );\n        }\n\n        exportDrawing() {\n            State.helper.clusterSplittingCurrentStep = 3;\n            const data = JSON.parse(this.canvasMethods.getSaveData());\n            let drawPoints = data?.lines[0]?.points as {\n                x: number;\n                y: number;\n            }[];\n            if (!drawPoints) {\n                return;\n            }\n            drawPoints.forEach((value) => {\n                value.y += NAVBAR_HEIGHT;\n            });\n\n            // form a circle\n            drawPoints.push(drawPoints[0]);\n\n            State.clusterInteraction.lineSegment = drawPoints;\n            State.clusterInteraction.computeSplitCluster();\n        }\n\n        clearDrawing() {\n            this.canvasMethods.clear();\n        }\n\n        componentDidMount = () => {\n            this.clearDrawing();\n        };\n\n        componentWillUnmount = () => {\n            this.clearDrawing();\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { NAVBAR_HEIGHT } from \"../../../constants\";\nimport { ICanvasDrawProps } from \"./CanvasDrawPanel\";\n\nexport default observer(\n    /**\n     * @description canvas to draw circle gesture when cluster splitting\n     * @author Zichen XU\n     * @class CanvasDrawFreeCirclePanel\n     */\n    class CanvasDrawFreeCirclePanel extends React.Component<\n        ICanvasDrawProps,\n        {}\n    > {\n        private centerPoint = { x: 0, y: 0 } as { x: number; y: number };\n        private radius = 0 as number;\n        private mouseDown = false;\n\n        onMouseDownCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            this.centerPoint = {\n                x: event.clientX,\n                y: event.clientY - NAVBAR_HEIGHT,\n            };\n            this.mouseDown = true;\n        };\n\n        onMouseMoveCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            if (this.mouseDown) {\n                this.radius = Math.sqrt(\n                    Math.pow(event.clientX - this.centerPoint.x, 2) +\n                        Math.pow(\n                            event.clientY - NAVBAR_HEIGHT - this.centerPoint.y,\n                            2\n                        )\n                );\n                this.drawPoints();\n            }\n        };\n\n        onMouseUpCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            if (this.mouseDown) {\n                this.mouseDown = false;\n                this.exportDrawing();\n            }\n        };\n\n        exportDrawing() {\n            State.helper.clusterSplittingCurrentStep = 3;\n\n            // State.clusterInteraction.lineSegment = drawPoints;\n            State.clusterInteraction.computeSplitClusterInCircle(\n                this.centerPoint.x,\n                this.centerPoint.y,\n                this.radius\n            );\n        }\n\n        ctx!: CanvasRenderingContext2D;\n\n        drawPoints() {\n            this.ctx.lineJoin = \"round\";\n            this.ctx.lineCap = \"round\";\n            this.ctx.clearRect(\n                0,\n                0,\n                this.ctx.canvas.width,\n                this.ctx.canvas.height\n            );\n            this.ctx.lineWidth = 5;\n\n            this.ctx.beginPath();\n\n            this.ctx.arc(\n                this.centerPoint.x,\n                this.centerPoint.y,\n                this.radius,\n                0,\n                2 * Math.PI\n            );\n\n            this.ctx.strokeStyle = \"#F6B26B\";\n            this.ctx.stroke();\n        }\n\n        clearDrawing() {\n            this.ctx?.clearRect(\n                0,\n                0,\n                this.ctx.canvas.width,\n                this.ctx.canvas.height\n            );\n        }\n\n        render() {\n            return (\n                <canvas\n                    style={{\n                        position: \"absolute\",\n                        zIndex: 20,\n                    }}\n                    width={this.props.boundingRect.width}\n                    height={this.props.boundingRect.height}\n                    ref={(canvas) => {\n                        if (canvas) {\n                            this.ctx = canvas.getContext(\n                                \"2d\"\n                            ) as CanvasRenderingContext2D;\n                        }\n                    }}\n                    onMouseDown={this.onMouseDownCallback}\n                    onMouseMove={this.onMouseMoveCallback}\n                    onMouseUp={this.onMouseUpCallback}\n                />\n            );\n        }\n\n        componentDidMount = () => {\n            this.clearDrawing();\n        };\n\n        componentWillUnmount = () => {\n            this.clearDrawing();\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport ReactDOM from \"react-dom\";\nimport ComponentRef from \"../../ComponentRef\";\nimport { DrawMode } from \"../../../state/ClusterInteractionStore\";\nimport CanvasDrawFreehandPanel from \"./CanvasDrawFreehandPanel\";\nimport CanvasDrawStraightLinePanel from \"./CanvasDrawStraightLinePanel\";\nimport CanvasDrawFreeCirclePanel from \"./CanvasDrawFreeCirclePanel\";\nimport CanvasDrawCenterCirclePanel from \"./CanvasDrawCenterCirclePanel\";\nimport State from \"../../../state\";\n\nexport interface ICanvasDrawProps {\n    boundingRect: DOMRect;\n}\n\nexport default observer(\n    /**\n     * @description component that render different canvas drawing\n     * @author Zichen XU\n     * @class CanvasDrawPanel\n     */\n    class CanvasDrawPanel extends React.Component {\n        get canvas() {\n            let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n            return (element as Element)?.getBoundingClientRect();\n        }\n\n        render() {\n            switch (State.clusterInteraction.drawMode) {\n                case DrawMode.StraightLine:\n                    return (\n                        <CanvasDrawStraightLinePanel\n                            boundingRect={this.canvas}\n                        />\n                    );\n\n                case DrawMode.FreeLine:\n                    return (\n                        <CanvasDrawFreehandPanel boundingRect={this.canvas} />\n                    );\n\n                case DrawMode.FreeCircle:\n                    return (\n                        <CanvasDrawFreeCirclePanel boundingRect={this.canvas} />\n                    );\n\n                case DrawMode.CenterCircle:\n                    return (\n                        <CanvasDrawCenterCirclePanel\n                            boundingRect={this.canvas}\n                        />\n                    );\n            }\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state\";\nimport SpriteText from \"three-spritetext\";\nimport {\n    ICustomLinkObject,\n    ICustomNodeObject,\n} from \"../../state/GraphDelegate\";\nimport { reaction } from \"mobx\";\nimport { VisualizationMode } from \"../../state/PreferencesStore\";\nimport SelectionBox from \"../panels/SelectionBox\";\nimport * as CustomMouseEvent from \"../../state/utils/MouseEventUtils\";\nimport CanvasDrawPanel from \"../panels/CanvasDraw/CanvasDrawPanel\";\nimport { createToaster } from \"../../state/utils/ToasterUtils\";\nimport { Position } from \"@blueprintjs/core\";\nimport ReactDOM from \"react-dom\";\nimport { TrackballControls } from \"three/examples/jsm/controls/TrackballControls\";\nimport { debounce } from \"lodash\";\n\nexport default observer(\n    class ThreeJSVis extends React.Component {\n        state = {\n            visualizationGraph: State.graphDelegate.visualizationGraph(),\n            nodePointerInteraction: true,\n        };\n\n        clicking = false;\n\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        graphDelegate = State.graphDelegate;\n\n        hoverNodeCallback = (\n            node: NodeObject | null,\n            previousNode: NodeObject | null\n        ) => {\n            if (State.search.isPreviewing) return;\n            // to avoid frequent refresh\n\n            if (node === null) {\n                State.interaction.currentlyHoveredNodeId = null;\n            } else if (node !== previousNode) {\n                let current: string = node.id as string;\n                State.interaction.currentlyHoveredNodeId = current;\n            }\n            // console.log(State.graph.rawGraph);\n        };\n\n        nodeLeftClickCallback = (node: NodeObject, event: MouseEvent) => {\n            if (!this.state.nodePointerInteraction) {\n                return;\n            }\n            let nodeId = node.id as string;\n            if (\n                State.preferences.visualizationMode ===\n                VisualizationMode.NodeSelection\n            ) {\n                // multi-selection\n                let index;\n                // if already in the list of selected, remove\n                if (\n                    (index = State.interaction.selectedNodes.indexOf(\n                        nodeId\n                    )) !== -1\n                ) {\n                    State.interaction.selectedNodes.splice(index, 1);\n                } else {\n                    // if not in the list, add\n                    State.interaction.selectedNodes.push(nodeId);\n                }\n            } else {\n                // single select\n                State.interaction.selectedNodes = [node.id as string];\n            }\n        };\n\n        nodeRightClickCallback = (node: NodeObject, event: MouseEvent) => {\n            if (!this.state.nodePointerInteraction) {\n                return;\n            }\n            State.interaction.chosenNode = node.id as string;\n            // if selected node is not in the list, then add\n            if (\n                !State.interaction.selectedNodes.includes(\n                    State.interaction.chosenNode\n                )\n            ) {\n                State.interaction.selectedNodes.push(\n                    State.interaction.chosenNode\n                );\n            }\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickOn = \"Node\";\n            State.preferences.rightClickPanelOpen = true;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n            setTimeout(() => {\n                this.graphMethods.resumeAnimation();\n            }, 200);\n        };\n\n        backgroundClickCallback = () => {\n            // cancel all selection\n            State.interaction.flush();\n            State.interaction.selectedNodes = [];\n            State.preferences.rightClickPanelOpen = false;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n        };\n\n        backgroundRightClickCallback = (event: MouseEvent) => {\n            if (\n                !this.state.nodePointerInteraction ||\n                State.signal.isRightClickingCluster\n            ) {\n                return;\n            }\n            this.graphMethods.pauseAnimation();\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickOn = \"Background\";\n            State.preferences.rightClickPanelOpen = true;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n            setTimeout(() => {\n                this.graphMethods.resumeAnimation();\n            }, 200);\n        };\n\n        computeNodeColor(_node: NodeObject) {\n            let node = _node as ICustomNodeObject;\n            if (node.hovered) {\n                return State.css.node.highlightColor;\n            } else if (node.chosen) {\n                return State.css.node.chosenColor;\n            } else if (node.multiSelected) {\n                return State.css.node.multiSelectedColor;\n            } else {\n                return State.css.node.defaultColor;\n            }\n        }\n\n        computeEdgeColor(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightColor;\n            } else if (edge.chosen) {\n                return State.css.edge.selectedColor;\n            } else {\n                return State.css.edge.defaultColor;\n            }\n        }\n\n        computeEdgeWidth(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightWidth;\n            } else if (edge.chosen) {\n                return State.css.edge.highlightWidth;\n            } else {\n                return State.css.edge.defaultWidth;\n            }\n        }\n\n        renderGraph = () => {\n            return (\n                <div>\n                    {State.preferences.visualizationMode ===\n                        VisualizationMode.NodeSelection &&\n                        State.interaction.boxSelectionOpen && <SelectionBox />}\n                    {State.preferences.visualizationMode ===\n                        VisualizationMode.ClusterSplitting &&\n                        State.clusterInteraction.drawPanelActivate && (\n                            <CanvasDrawPanel />\n                        )}\n                    <ForceGraph3D\n                        // Data Segment\n                        ref={this.graphRef}\n                        graphData={this.state.visualizationGraph}\n                        // Node Visualization Segment\n                        nodeLabel=\"id\"\n                        nodeRelSize={State.css.node.size}\n                        nodeColor={this.computeNodeColor}\n                        nodeVisibility={this.graphDelegate.nodeVisibility}\n                        nodeResolution={State.css.node.resolution}\n                        nodeThreeObjectExtend={true}\n                        nodeThreeObject={(node) => {\n                            const sprite = new SpriteText(`${node.id}`);\n                            sprite.color = State.css.label.color;\n                            sprite.textHeight = State.css.label.size;\n                            sprite.backgroundColor = \"\";\n                            sprite.visible = State.css.label.show;\n                            sprite.translateX(State.css.node.size + 2);\n                            return sprite;\n                        }}\n                        // Node Manipulation Segment\n                        onNodeHover={this.hoverNodeCallback}\n                        onNodeClick={this.nodeLeftClickCallback}\n                        onNodeRightClick={this.nodeRightClickCallback}\n                        onNodeDragEnd={(node) => {\n                            node.fx = node.x;\n                            node.fy = node.y;\n                            node.fz = node.z;\n                        }}\n                        // Link Visualization Segment\n                        linkVisibility={this.graphDelegate.linkVisibility}\n                        linkWidth={this.computeEdgeWidth}\n                        linkColor={this.computeEdgeColor}\n                        // Graph Manipulation Segment\n                        onBackgroundRightClick={\n                            this.backgroundRightClickCallback\n                        }\n                        onBackgroundClick={this.backgroundClickCallback}\n                        enablePointerInteraction={\n                            this.state.nodePointerInteraction\n                        }\n                        // Engine\n                        onEngineTick={() => {\n                            State.graphDelegate.clusterObject.canAlterNodePosition = true;\n                            this.graphDelegate.clusterObject.clusterDelegation();\n                        }}\n                        cooldownTicks={100}\n                        onEngineStop={() => {\n                            if (\n                                State.css.cluster.autoPlot &&\n                                State.css.cluster.shape === \"sphere\" &&\n                                State.graphDelegate.clusterObject\n                                    .canAlterNodePosition\n                            ) {\n                                console.log(\n                                    \"starts to plot points on the surface of the sphere\"\n                                );\n                                this.graphDelegate.clusterObject.alterNodePosition();\n                                State.graphDelegate.clusterObject.canAlterNodePosition = false;\n                            }\n                        }}\n                    />\n                </div>\n            );\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        updateVisualizationGraph() {\n            this.setState({\n                visualizationGraph: State.graphDelegate.visualizationGraph(),\n            });\n        }\n\n        nodeInteractionListener(set: boolean) {\n            this.setState({\n                nodePointerInteraction: set,\n            });\n        }\n\n        private debouncedMouseMoveCallback: any;\n\n        clusterInteractionListener(set: boolean) {\n            const DOM = ReactDOM.findDOMNode(this) as Element;\n            if (set) {\n                this.debouncedMouseMoveCallback = debounce(\n                    CustomMouseEvent.onDocumentMouseMove,\n                    25\n                );\n                DOM.addEventListener(\n                    \"mousemove\",\n                    this.debouncedMouseMoveCallback\n                );\n                DOM.addEventListener(\n                    \"click\",\n                    CustomMouseEvent.onDocumentLeftClick\n                );\n                DOM.addEventListener(\n                    \"contextmenu\",\n                    CustomMouseEvent.onDocumentRightClick\n                );\n            } else {\n                DOM.removeEventListener(\n                    \"mousemove\",\n                    this.debouncedMouseMoveCallback\n                );\n                DOM.removeEventListener(\n                    \"click\",\n                    CustomMouseEvent.onDocumentLeftClick\n                );\n                DOM.removeEventListener(\n                    \"contextmenu\",\n                    CustomMouseEvent.onDocumentRightClick\n                );\n            }\n        }\n\n        componentDidMount() {\n            this.graphDelegate.mountDelegateMethods(this.graphMethods);\n            this.clusterInteractionListener(true);\n            ComponentRef.visualizer = this;\n            this.graphDelegate.updateClusterForce();\n\n            const control = this.graphMethods.controls() as TrackballControls;\n            control.addEventListener(\"change\", () => {\n                State.signal.isMovingCamera = true;\n            });\n        }\n    }\n);\n\nreaction(\n    () => State.preferences.visualizationMode,\n    (visualizationMode) => {\n        State.preferences.closeAllPanel();\n        State.preferences.rightClickPanelOpen = false;\n        State.interaction.flush();\n        State.clusterInteraction.flush();\n        switch (visualizationMode) {\n            case VisualizationMode.Normal:\n                ComponentRef.visualizer?.nodeInteractionListener(true);\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                break;\n\n            case VisualizationMode.NodeSelection:\n                ComponentRef.visualizer?.nodeInteractionListener(true);\n                ComponentRef.visualizer?.clusterInteractionListener(false);\n                createToaster(\n                    <p>\n                        Select one or more <b>Nodes</b> and <b>Right-click</b>{\" \"}\n                        on one of them to open <b>Context Menu</b>\n                    </p>,\n                    Position.BOTTOM,\n                    10000\n                );\n                break;\n\n            case VisualizationMode.ClusterSelection:\n                ComponentRef.visualizer?.nodeInteractionListener(false);\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                createToaster(\n                    <p>\n                        Select one or more <b>Clusters</b> and{\" \"}\n                        <b>Right-click</b> on one of them to open{\" \"}\n                        <b>Context Menu</b>\n                    </p>,\n                    Position.BOTTOM,\n                    10000\n                );\n                break;\n\n            case VisualizationMode.ClusterSplitting:\n                ComponentRef.visualizer?.nodeInteractionListener(false);\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                State.helper.clusterSplittingPanelStackOpen = true;\n                break;\n        }\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Card } from \"@blueprintjs/core\";\nimport { Cell, Column, EditableCell, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state/index\";\nimport ComponentRef from \"../ComponentRef\";\n\ninterface Props {\n    /**\n     * the node id of the select node\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    /**\n     * @description Implementing a table showing the detail in formation of hovered Node\n     * in which the information could be changed by users\n     * @author Zhiyuan LYU Chenghao SHI\n     * @extends {React.Component<Props, {}>}\n     */\n    class NodeDetail extends React.Component<Props, {}> {\n        cellRenderer_property = (rowIndex: number) => {\n            return <Cell>{State.graph.metadata.nodeProperties[rowIndex]}</Cell>;\n        };\n\n        cellRenderer_value = (rowIndex: number) => {\n            let data = State.graph.rawGraph.getNodeAttribute(\n                this.props.onNode,\n                State.graph.metadata.nodeProperties[rowIndex]\n            );\n            // return a Editable Cell where user can edit the value of certain property;\n            return (\n                <EditableCell\n                    value={data}\n                    onChange={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    onConfirm={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    tooltip={data}\n                />\n            );\n        };\n\n        formatLongFloat = (nodeAttributeValue: any) => {\n            const num = Number(nodeAttributeValue);\n            if (Number.isNaN(num) || num > 1 || num < 0) {\n                // Do not format just return original\n                return nodeAttributeValue;\n            }\n            // Format to no more than 3 significant digit.\n            return Number.parseFloat(num.toString()).toPrecision(3);\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card className={\"node-details-table\"}>\n                        <Table\n                            numRows={State.graph.metadata.nodeProperties.length}\n                            enableRowHeader={false}\n                        >\n                            <Column\n                                name=\"Properties\"\n                                cellRenderer={this.cellRenderer_property}\n                            />\n                            <Column\n                                name=\"Value\"\n                                cellRenderer={this.cellRenderer_value}\n                            />\n                        </Table>\n                    </Card>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.nodeDetail = React.createRef();\n        };\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Card, Tag } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    /**\n     * @description This component will be used when multiple-choose nodes.\n     * @author Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class MultipleNodeDetail extends React.Component {\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"left-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card>\n                        <Table\n                            numRows={\n                                State.interaction.selectedNodes.length > 10\n                                    ? 10\n                                    : State.interaction.selectedNodes.length\n                            }\n                        >\n                            {State.graph.metadata.nodeProperties.map((it) => (\n                                <Column\n                                    key={it}\n                                    name={it}\n                                    cellRenderer={(i) => (\n                                        <Cell>\n                                            {State.graph.rawGraph.getNodeAttribute(\n                                                State.interaction.selectedNodes[\n                                                    i\n                                                ] as string,\n                                                it as string\n                                            )}\n                                        </Cell>\n                                    )}\n                                />\n                            ))}\n                        </Table>\n                        <Tag style={{ marginTop: \"3px\" }}>\n                            if select more than 10 nodes, only the top 10 nodes\n                            will be displayed\n                        </Tag>\n                    </Card>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.multiNodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { Alert, Button, Card, Code, H6, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\n\ninterface Props {\n    /**\n     * the node id of the select node to delete Edge\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    /**\n     * @description interactively delete or preview edge with a table shown at the right-bottom\n     * @author Zichen XU\n     * @class DeleteEdgeInteractionPanel\n     * @extends {React.Component<Props, {}>}\n     */\n    class DeleteEdgeInteractionPanel extends React.Component<Props, {}> {\n        state = {\n            targetNode: null as string | null,\n            deleteAlertOpen: false,\n        };\n\n        get neighbors(): string[] {\n            return State.graph.rawGraph.neighbors(this.props.onNode);\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            let targetNode = this.neighbors[rowIndex];\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                targetNode: targetNode,\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            if (this.state.targetNode === null) {\n                return null;\n            }\n\n            let edgeToDelete: string | undefined;\n\n            if (\n                (edgeToDelete = State.graph.rawGraph.edge(\n                    this.state.targetNode,\n                    this.props.onNode\n                )) === undefined\n            ) {\n                edgeToDelete = State.graph.rawGraph.edge(\n                    this.props.onNode,\n                    this.state.targetNode\n                );\n            }\n\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(edgeToDelete as string);\n                        this.setState({ deleteAlertOpen: false });\n                        State.preferences.deleteEdgePanelOpen = false;\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with Key{\" \"}\n                        <Code>{edgeToDelete as string}</Code> between Node ID{\" \"}\n                        <Code>{this.state.targetNode}</Code> and Node ID{\" \"}\n                        <Code>{this.props.onNode}</Code>. This action cannot be\n                        reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        neighborsRenderer: ICellRenderer = (rowIndex: number) => {\n            return (\n                <Cell interactive={true}>\n                    <div\n                        onMouseEnter={() => {\n                            State.graphDelegate.cameraFocusOn(\n                                this.props.onNode,\n                                400\n                            );\n                            State.interaction.selectedEdge = State.interaction.getEdgeKey(\n                                this.props.onNode,\n                                this.neighbors[rowIndex]\n                            ) as string;\n                        }}\n                    >\n                        {this.neighbors[rowIndex]}\n                    </div>\n                </Cell>\n            );\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card className={classnames(\"node-details-table\")}>\n                        <Button\n                            icon=\"cross\"\n                            onClick={() => {\n                                State.preferences.deleteEdgePanelOpen = false;\n                                State.interaction.selectedEdge = null;\n                                State.graphDelegate.graphDelegateMethods.refresh(); // update color of selected edges\n                            }}\n                        >\n                            Close\n                        </Button>\n                        <H6> Node ID: {this.props.onNode}</H6>\n                        <Table\n                            numRows={this.neighbors.length}\n                            defaultRowHeight={30}\n                            renderMode={RenderMode.NONE}\n                        >\n                            <Column\n                                name=\"\"\n                                cellRenderer={this.deleteEdgeRenderer}\n                                //@ts-ignore\n                                style={this.style}\n                            />\n                            <Column\n                                name=\"Node ID\"\n                                //@ts-ignore\n                                intent={Intent.PRIMARY}\n                                cellRenderer={this.neighborsRenderer}\n                            />\n                        </Table>\n                        {this.deleteEdgeAlert()}\n                    </Card>\n                </div>\n            );\n        }\n    }\n);\n","import React, { ReactNode } from \"react\";\nimport { Button, Card, Classes, Collapse, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    name: string;\n    isOpen: boolean;\n    onToggle: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n    children: ReactNode;\n}\n\nexport default observer(\n    /**\n     * @description the Collapsable HOC to wrap the content into a collapsable flip\n     * @author Zichen XU\n     * @class Collapsable\n     * @extends {React.Component<Props, {}>}\n     */\n    class Collapsable extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Card elevation={Elevation.THREE}>\n                    <Button\n                        className={classnames(\n                            Classes.LARGE,\n                            Classes.FILL,\n                            \"text-align-left\"\n                        )}\n                        rightIcon={\n                            this.props.isOpen ? \"chevron-up\" : \"chevron-down\"\n                        }\n                        onClick={this.props.onToggle}\n                    >\n                        {this.props.name}\n                    </Button>\n                    <Collapse isOpen={this.props.isOpen}>\n                        {this.props.children}\n                    </Collapse>\n                </Card>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { Card, Checkbox, Slider } from \"@blueprintjs/core\";\nimport Collapsable from \"../../utils/Collapsable\";\nimport SimpleSelect from \"../../utils/SimpleSelect\";\n\nexport default observer(\n    /**\n     * @description the sub-tab to alter the graph options of cluster\n     * @author Zichen XU, Zhiyuan LYU\n     * @class ClusterPanel\n     * @extends {React.Component}\n     */\n    class ClusterPanel extends React.Component {\n        state = {\n            shapeOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        forceCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Force\"\n                    isOpen={this.state.forceOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            forceOptionOpen: !this.state.forceOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        Cluster Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.clusterForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.clusterForce}\n                        />\n                    </Card>\n                    <Card className={\"sub-option\"}>\n                        Normal Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.normalForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.normalForce}\n                        />\n                    </Card>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        <p style={{ textAlign: \"left\" }}>\n                            Cluster Shape:\n                            <span style={{ float: \"right\" }}>\n                                <SimpleSelect\n                                    items={[\"convexHull\", \"sphere\"]}\n                                    text={State.css.cluster.shape}\n                                    onSelect={(it) => {\n                                        State.css.cluster.shape = it;\n                                        State.cluster.setCluster(\n                                            State.cluster.clusterBy,\n                                            true\n                                        );\n                                    }}\n                                    small={true}\n                                />\n                            </span>\n                        </p>\n                        <p style={{ display: \"flex\" }}>\n                            Auto plot nodes onto the surface of clusters\n                            <Checkbox\n                                checked={State.css.cluster.autoPlot}\n                                large={true}\n                                onChange={() => {\n                                    State.css.cluster.autoPlot = !State.css\n                                        .cluster.autoPlot;\n                                }}\n                            />\n                        </p>\n                    </Card>\n                    {State.css.cluster.shape === \"sphere\" && (\n                        <Card className={\"sub-option\"}>\n                            Cluster Resolution:\n                            <br />\n                            <Slider\n                                min={2}\n                                max={20}\n                                stepSize={1}\n                                labelStepSize={5}\n                                onChange={(value) => {\n                                    State.css.cluster.resolution = value;\n                                    State.graphDelegate.graphDelegateMethods.refresh();\n                                }}\n                                value={State.css.cluster.resolution}\n                            />\n                        </Card>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Clusters</p>\n                    </div>\n                    {this.forceCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    PopoverInteractionKind,\n    Position,\n    Popover,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport { ColorResult, SketchPicker } from \"react-color\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the color to be previewed on the button\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    color: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     *\n     * @memberof Props\n     */\n    onChange: (color: ColorResult) => void;\n}\n\nexport default observer(\n    /**\n     * @description this component can be used to choose the node among all the nodes, with basic search filters available\n     *\n     * to use it, you have to specify the text shown above the selectButton\n     * as well as the onChange function to call when a candidate is selected\n     * @author Zichen XU\n     * @class ColorPicker\n     * @extends {React.Component<Props, {}>}\n     */\n    class ColorPicker extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Popover\n                    interactionKind={PopoverInteractionKind.CLICK}\n                    popoverClassName=\"bp3-popover-content-sizing\"\n                    placement={Position.RIGHT}\n                >\n                    <Button\n                        text=\"  \"\n                        style={{\n                            backgroundColor: this.props.color,\n                        }}\n                        small={true}\n                    />\n                    <div>\n                        <SketchPicker\n                            color={this.props.color}\n                            onChange={(it) => {\n                                this.props.onChange(it);\n                            }}\n                        />\n                    </div>\n                </Popover>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { Card } from \"@blueprintjs/core\";\nimport Collapsable from \"../../utils/Collapsable\";\nimport ColorPicker from \"../../utils/ColorPicker\";\n\nexport default observer(\n    /**\n     * @description This component will be used to change styles of edge\n     * @author Zhiyuan LYU Zichen XU\n     * @extends {React.Component}\n     */\n    class EdgesPanel extends React.Component {\n        state = {\n            sizeOptionOpen: false,\n            thicknessOptionOpen: false,\n            colorOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        render() {\n            return (\n                <div>\n                    <p>Modifying All Edges</p>\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <Card className={\"sub-option\"}>\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Default Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.defaultColor}\n                                            onChange={(it) => {\n                                                State.css.edge.defaultColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Selected Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.selectedColor}\n                                            onChange={(it) => {\n                                                State.css.edge.selectedColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Highlight Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={\n                                                State.css.edge.highlightColor\n                                            }\n                                            onChange={(it) => {\n                                                State.css.edge.highlightColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n                        </Card>\n                    </Collapsable>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Card, Slider, Switch } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport ColorPicker from \"../../utils/ColorPicker\";\n\nexport default observer(\n    /**\n     * @description This component will be used to change style of label\n     * @author Zhiyuan LYU, Zichen XU\n     * @extends {React.Component}\n     */\n    class LabelsPanel extends React.Component {\n        render() {\n            return (\n                <div>\n                    <Switch\n                        label=\"Show Node Label\"\n                        checked={State.css.label.show}\n                        onChange={() => {\n                            State.css.label.show = !State.css.label.show;\n                            State.graphDelegate.graphDelegateMethods.refresh();\n                        }}\n                    />\n                    <br />\n                    <Card className={\"sub-option\"}>\n                        Label Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={10}\n                            stepSize={1}\n                            labelStepSize={2}\n                            onChange={(value) => {\n                                State.css.label.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.label.size}\n                        />\n                        <br />\n                        <p style={{ textAlign: \"left\" }}>\n                            Label Color:\n                            <span style={{ float: \"right\" }}>\n                                <ColorPicker\n                                    color={State.css.label.color}\n                                    onChange={(it) => {\n                                        State.css.label.color = it.hex;\n                                        State.graphDelegate.graphDelegateMethods.refresh();\n                                    }}\n                                />\n                            </span>\n                        </p>\n                    </Card>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { Card, Slider } from \"@blueprintjs/core\";\nimport Collapsable from \"../../utils/Collapsable\";\nimport ColorPicker from \"../../utils/ColorPicker\";\n\nexport default observer(\n    /**\n     * @description This component will be used to change style of nodes. Including color, size,etc\n     * @author Zhiyuan LYU, Zichen XU\n     * @extends {React.Component}\n     */\n    class NodesPanel extends React.Component {\n        state = {\n            timeOutRef: null,\n            colorOptionOpen: false,\n            sizeOptionOpen: false,\n            shapeOptionOpen: false,\n        };\n\n        colorCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Color\"\n                    isOpen={this.state.colorOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            colorOptionOpen: !this.state.colorOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Default Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.defaultColor}\n                                        onChange={(it) => {\n                                            State.css.node.defaultColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Selected Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={\n                                            State.css.node.multiSelectedColor\n                                        }\n                                        onChange={(it) => {\n                                            State.css.node.multiSelectedColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Highlight Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.highlightColor}\n                                        onChange={(it) => {\n                                            State.css.node.highlightColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n                    </Card>\n                </Collapsable>\n            );\n        };\n\n        sizeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Size\"\n                    isOpen={this.state.sizeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            sizeOptionOpen: !this.state.sizeOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        Node Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.node.size}\n                        />\n                    </Card>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        Node Resolution:\n                        <br />\n                        <Slider\n                            min={2}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.resolution = value;\n                            }}\n                            value={State.css.node.resolution}\n                        />\n                    </Card>\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Nodes</p>\n                    </div>\n                    {this.colorCollapse()}\n                    {this.sizeCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n","import { H3, Tab, Tabs } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport ClusterPanel from \"./ClusterPanel\";\nimport EdgesPanel from \"./EdgesPanel\";\nimport LabelsPanel from \"./LabelsPanel\";\nimport NodesPanel from \"./NodesPanel\";\n\nexport default observer(\n    /**\n     * @description the graph options panel which contains four sub-tabs\n     * @author Zichen XU, Zhiyuan LYU\n     * @class RenderOptionsCard\n     * @extends {React.Component}\n     */\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <H3>Graph Options</H3>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        <Tab\n                            id=\"clusters\"\n                            title=\"Clusters\"\n                            panel={<ClusterPanel />}\n                        />\n\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n","import React, { CSSProperties } from \"react\";\nimport {\n    Button,\n    Callout,\n    Card,\n    Colors,\n    Elevation,\n    H6,\n    Icon,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport ClusterChooser, { ClusterAdder } from \"./ClusterChooser\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\n\ninterface Props {\n    callback: Function;\n    style?: CSSProperties;\n}\n\nexport default observer(\n    class FormClusterOptionsCard extends React.Component<Props> {\n        state = {\n            selectedAttribute: State.cluster.clusterBy,\n            value: \"\" as string,\n        };\n\n        renderInput() {\n            return (\n                <>\n                    <div style={{ marginTop: 10 }}>\n                        <InputGroup\n                            leftElement={<Icon icon=\"tag\" />}\n                            onChange={handleStringChange((value) => {\n                                this.setState({ value: value });\n                            })}\n                            placeholder=\"Enter Clustering Value\"\n                            value={this.state.value}\n                            intent={\n                                this.state.value === \"\"\n                                    ? Intent.DANGER\n                                    : Intent.SUCCESS\n                            }\n                        />\n                    </div>\n                    <div className=\"horizontal-gap\"></div>\n                    <Button\n                        onClick={() => {\n                            this.props.callback(\n                                this.state.selectedAttribute as string,\n                                parseNumberOrString(this.state.value)\n                            );\n                        }}\n                        intent={Intent.SUCCESS}\n                        disabled={\n                            this.state.selectedAttribute === null ||\n                            this.state.value === \"\"\n                        }\n                    >\n                        Confirm\n                    </Button>\n                </>\n            );\n        }\n\n        render() {\n            return (\n                <>\n                    <Card\n                        elevation={Elevation.ONE}\n                        style={{\n                            background: Colors.DARK_GRAY3,\n                        }}\n                    >\n                        <H6>(Optional) You can add node attributes here</H6>\n                        <ClusterAdder\n                            onCreate={(attribute) => {\n                                this.setState({ selectedAttribute: attribute });\n                            }}\n                        />\n                    </Card>\n                    <div className=\"horizontal-gap\"></div>\n                    <Card elevation={Elevation.THREE}>\n                        <H6>\n                            Choose the Attribute and New Value to form the new\n                            cluster\n                        </H6>\n                        <Callout\n                            intent={\n                                this.state.selectedAttribute === null\n                                    ? Intent.DANGER\n                                    : Intent.SUCCESS\n                            }\n                        >\n                            <div style={{ display: \"flex\" }}>\n                                <div\n                                    style={{\n                                        marginRight: 20,\n                                        marginTop: 5,\n                                        marginBottom: 10,\n                                    }}\n                                >\n                                    Choose the Attribute\n                                </div>\n\n                                <ClusterChooser\n                                    showNone={false}\n                                    onSelect={(cluster) => {\n                                        this.setState({\n                                            selectedAttribute: cluster,\n                                        });\n                                    }}\n                                    syncWith={this.state.selectedAttribute}\n                                />\n                            </div>\n                        </Callout>\n                        {this.renderInput()}\n                    </Card>\n                </>\n            );\n        }\n    }\n);\n","import { Button, Icon, InputGroup, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\nimport FormClusterOptionsCard from \"./FormClusterOptionsCard\";\n\nexport default observer(\n    class FormTwoClusterOptionsCard extends FormClusterOptionsCard {\n        state = {\n            selectedAttribute: State.cluster.clusterBy,\n            value: \"\" as string,\n            anotherValue: \"\" as string,\n        };\n\n        renderInput() {\n            return (\n                <>\n                    <div className=\"horizontal-gap\"></div>\n                    <InputGroup\n                        leftElement={<Icon icon=\"tag\" />}\n                        onChange={handleStringChange((value) => {\n                            this.setState({ value: value });\n                        })}\n                        placeholder=\"Enter Clustering Value for nodes in white\"\n                        value={this.state.value}\n                        intent={\n                            this.state.value === \"\"\n                                ? Intent.DANGER\n                                : Intent.SUCCESS\n                        }\n                    />\n                    <div className=\"horizontal-gap\"></div>\n                    <InputGroup\n                        leftElement={<Icon icon=\"tag\" />}\n                        onChange={handleStringChange((value) => {\n                            this.setState({ anotherValue: value });\n                        })}\n                        placeholder=\"Enter Clustering Value for nodes in red\"\n                        value={this.state.anotherValue}\n                        intent={\n                            this.state.anotherValue === \"\"\n                                ? Intent.DANGER\n                                : Intent.SUCCESS\n                        }\n                    />\n                    <div className=\"horizontal-gap\"></div>\n                    <Button\n                        onClick={() => {\n                            this.props.callback(\n                                this.state.selectedAttribute as string,\n                                parseNumberOrString(this.state.value),\n                                parseNumberOrString(this.state.anotherValue)\n                            );\n                        }}\n                        intent={Intent.SUCCESS}\n                        disabled={\n                            this.state.selectedAttribute === null ||\n                            this.state.value === \"\" ||\n                            this.state.anotherValue === \"\"\n                        }\n                    >\n                        Confirm\n                    </Button>\n                </>\n            );\n        }\n    }\n);\n","import React from \"react\";\n\nimport {\n    Button,\n    Intent,\n    Classes,\n    H4,\n    RadioGroup,\n    Radio,\n    Text,\n    Card,\n} from \"@blueprintjs/core\";\nimport { Popover2, Tooltip2 } from \"@blueprintjs/popover2\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../../ComponentRef\";\nimport { getMessage } from \"./InteractionModePanel\";\nimport { handleStringChange } from \"../../utils/InputFormUtils\";\nimport { DrawMode } from \"../../../state/ClusterInteractionStore\";\nimport FormTwoClusterOptionsCard from \"../../utils/FormTwoClusterOptionsCard\";\n\ninterface Props {\n    currentStep: 1 | 2 | 3;\n}\n\nexport default observer(\n    /**\n     * @description the helper pop-over for a step-to-step guidance to user on the way to split cluster\n     * @author Zichen XU\n     * @class ClusterSplittingPanelStack\n     * @extends {React.Component<Props, {}>}\n     */\n    class ClusterSplittingPanelStack extends React.Component<Props, {}> {\n        state = {\n            selected: \"curve\" as string,\n        };\n        titles = [\"Select Cluster\", \"Draw Line or Circle\", \"Confirm?\"];\n\n        renderFirstPanel = () => {\n            return (\n                <p>\n                    Select a <b>Cluster</b> to split by clicking it\n                </p>\n            );\n        };\n\n        renderSecondPanel = () => {\n            return (\n                <p>\n                    <RadioGroup\n                        label=\"Use the mouse to\"\n                        onChange={handleStringChange((value) => {\n                            this.setState({ selected: value });\n                            switch (value) {\n                                case \"curve\":\n                                    State.clusterInteraction.drawMode =\n                                        DrawMode.FreeLine;\n                                    break;\n                                case \"straight\":\n                                    State.clusterInteraction.drawMode =\n                                        DrawMode.StraightLine;\n                                    break;\n                                case \"circle\":\n                                    State.clusterInteraction.drawMode =\n                                        DrawMode.FreeCircle;\n                                    break;\n                                case \"centerCircle\":\n                                    State.clusterInteraction.drawMode =\n                                        DrawMode.CenterCircle;\n                                    break;\n                            }\n                        })}\n                        selectedValue={this.state.selected}\n                    >\n                        <Radio\n                            label=\"Draw a Freehand Line through the cluster\"\n                            value=\"curve\"\n                        />\n                        <Radio\n                            label=\"Draw a Straight Line through the cluster\"\n                            value=\"straight\"\n                        />\n                        <Radio\n                            label=\"Draw a Free Circle within the cluster\"\n                            value=\"circle\"\n                        />\n                        <Radio\n                            label=\"Draw a Centered Circle within the cluster\"\n                            value=\"centerCircle\"\n                        />\n                    </RadioGroup>\n                    hold and draw a line to split this Cluster\n                </p>\n            );\n        };\n\n        renderThirdPanel = () => {\n            return (\n                <div style={{ width: \"500px\" }}>\n                    <H4>Confirm Splitting of Cluster? </H4>\n                    <p>\n                        The two sub-clusters has been specified using the\n                        different node colors.\n                    </p>\n                    <FormTwoClusterOptionsCard\n                        callback={(\n                            attribute: string,\n                            value1: number | string,\n                            value2: number | string\n                        ) => {\n                            State.helper.clusterSplittingPanelStackOpen = false;\n                            State.clusterInteraction.splitCluster(\n                                attribute,\n                                value1,\n                                value2\n                            );\n                            State.preferences.visualizationMode =\n                                VisualizationMode.Normal;\n                            State.helper.clusterSplittingCurrentStep = 1;\n                        }}\n                    />\n                </div>\n            );\n        };\n\n        renderWhichPanel = () => {\n            switch (this.props.currentStep) {\n                case 1:\n                    return this.renderFirstPanel();\n                case 2:\n                    return this.renderSecondPanel();\n                case 3:\n                    return this.renderThirdPanel();\n            }\n        };\n\n        renderWhichBack = () => {\n            switch (this.props.currentStep) {\n                case 1:\n                    return <span />;\n                case 2:\n                    return (\n                        <Button\n                            className={Classes.PANEL_STACK_HEADER_BACK}\n                            icon=\"chevron-left\"\n                            minimal={true}\n                            onClick={() => {\n                                State.helper.clusterSplittingCurrentStep = 1;\n                            }}\n                            small={true}\n                            text={this.titles[0]}\n                            title={this.titles[0]}\n                        />\n                    );\n                case 3:\n                    return (\n                        <Button\n                            className={Classes.PANEL_STACK_HEADER_BACK}\n                            icon=\"chevron-left\"\n                            minimal={true}\n                            onClick={() => {\n                                State.helper.clusterSplittingCurrentStep = 2;\n                            }}\n                            small={true}\n                            text={this.titles[1]}\n                            title={this.titles[1]}\n                        />\n                    );\n            }\n        };\n\n        renderPanelStack = () => {\n            return (\n                <div\n                    className={Classes.PANEL_STACK_VIEW}\n                    style={{ position: \"unset\" }}\n                >\n                    <div style={{ minWidth: \"300px\", minHeight: \"100px\" }}>\n                        <div className={Classes.PANEL_STACK_HEADER}>\n                            {this.renderWhichBack()}\n                            <Text className={Classes.HEADING} ellipsize={true}>\n                                {this.titles[this.props.currentStep - 1]}\n                            </Text>\n                            <span />\n                        </div>\n                        <Card> {this.renderWhichPanel()}</Card>\n                    </div>\n                </div>\n            );\n        };\n\n        render() {\n            return (\n                <Popover2\n                    placement=\"right\"\n                    usePortal={false}\n                    content={this.renderPanelStack()}\n                    isOpen={\n                        State.preferences.visualizationMode ===\n                            VisualizationMode.ClusterSplitting &&\n                        State.helper.clusterSplittingPanelStackOpen\n                    }\n                    onOpened={() => {\n                        State.helper.clusterSplittingCurrentStep = 1;\n                    }}\n                >\n                    <Tooltip2\n                        usePortal={false}\n                        content={getMessage(VisualizationMode.ClusterSplitting)}\n                        placement={\"bottom\"}\n                    >\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            intent={Intent.DANGER}\n                            text={VisualizationMode.ClusterSplitting}\n                            active={\n                                State.preferences.visualizationMode ===\n                                VisualizationMode.ClusterSplitting\n                            }\n                            onClick={() => {\n                                State.preferences.visualizationMode =\n                                    VisualizationMode.ClusterSplitting;\n\n                                State.helper.clusterSplittingPanelStackOpen = true;\n                            }}\n                        />\n                    </Tooltip2>\n                </Popover2>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.clusterSplittingPanelStack = this;\n        };\n    }\n);\n","import React from \"react\";\n\nimport { Button, Intent, Classes, Card, Text } from \"@blueprintjs/core\";\nimport { Popover2, Tooltip2 } from \"@blueprintjs/popover2\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport { observer } from \"mobx-react\";\nimport { getMessage } from \"./InteractionModePanel\";\n\nexport default observer(\n    /**\n     * @description a helper pop-over that user can choose to enter the box-selection mode\n     * @author Zichen XU\n     * @class NodeSelectionPanel\n     * @extends {React.Component}\n     */\n    class NodeSelectionPanel extends React.Component {\n        private renderPanelStack = () => {\n            return (\n                <div\n                    className={Classes.PANEL_STACK_VIEW}\n                    style={{ position: \"unset\" }}\n                >\n                    <div style={{ minWidth: \"300px\", minHeight: \"100px\" }}>\n                        <div className={Classes.PANEL_STACK_HEADER}>\n                            <span />\n                            <Text className={Classes.HEADING} ellipsize={true}>\n                                Node Multi-Selection Mode\n                            </Text>\n                            <span />\n                        </div>\n                        <Card>\n                            <Button\n                                icon=\"select\"\n                                intent={\n                                    State.interaction.boxSelectionOpen\n                                        ? Intent.PRIMARY\n                                        : Intent.NONE\n                                }\n                                active={State.interaction.boxSelectionOpen}\n                                onClick={() =>\n                                    (State.interaction.boxSelectionOpen = !State\n                                        .interaction.boxSelectionOpen)\n                                }\n                            >\n                                Use Box-Selection\n                            </Button>\n                        </Card>\n                    </div>\n                </div>\n            );\n        };\n\n        render() {\n            return (\n                <Popover2\n                    placement=\"right\"\n                    usePortal={false}\n                    content={this.renderPanelStack()}\n                    isOpen={\n                        State.preferences.visualizationMode ===\n                            VisualizationMode.NodeSelection &&\n                        State.helper.NodeSelectionPanelOpen\n                    }\n                >\n                    <Tooltip2\n                        usePortal={false}\n                        content={getMessage(VisualizationMode.NodeSelection)}\n                    >\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            intent={Intent.WARNING}\n                            text={VisualizationMode.NodeSelection}\n                            active={\n                                State.preferences.visualizationMode ===\n                                VisualizationMode.NodeSelection\n                            }\n                            onClick={() => {\n                                State.preferences.visualizationMode =\n                                    VisualizationMode.NodeSelection;\n\n                                State.helper.NodeSelectionPanelOpen = true;\n                            }}\n                        />\n                    </Tooltip2>\n                </Popover2>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport ClusterSplittingPanelStack from \"./ClusterSplittingPanelStack\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport NodeSelectionPanel from \"./NodeSelectionPanel\";\n\nexport function getMessage(mode: VisualizationMode): string {\n    switch (mode) {\n        case VisualizationMode.Normal:\n            return \"Normal Interaction Mode where mouse interactions on nodes and clusters are both activated\";\n\n        case VisualizationMode.NodeSelection:\n            return \"Select one or more nodes and interact with them, such as adding/deleting, merge them to a cluster, free them from a cluster\";\n\n        case VisualizationMode.ClusterSelection:\n            return \"Select one or more clusters and interact with them, such as merging and releasing them\";\n\n        case VisualizationMode.ClusterSplitting:\n            return \"Select one cluster and draw a line to split into two halfs\";\n    }\n}\n\nexport default observer(\n    /**\n     * @description the four panels to select from different interaction modes\n     * @author Zichen XU\n     * @class InteractionModePanel\n     * @extends {React.Component}\n     */\n    class InteractionModePanel extends React.Component {\n        getIntent(mode: VisualizationMode): Intent {\n            switch (mode) {\n                case VisualizationMode.Normal:\n                    return Intent.PRIMARY;\n\n                case VisualizationMode.NodeSelection:\n                    return Intent.WARNING;\n\n                case VisualizationMode.ClusterSelection:\n                    return Intent.SUCCESS;\n\n                case VisualizationMode.ClusterSplitting:\n                    return Intent.DANGER;\n            }\n        }\n\n        renderMode(mode: VisualizationMode) {\n            return (\n                <Tooltip2 content={getMessage(mode)}>\n                    <Button\n                        className={classnames([\n                            Classes.BUTTON,\n                            Classes.MINIMAL,\n                        ])}\n                        text={mode}\n                        intent={this.getIntent(mode)}\n                        active={State.preferences.visualizationMode === mode}\n                        onClick={() => {\n                            State.preferences.visualizationMode = mode;\n                        }}\n                    />\n                </Tooltip2>\n            );\n        }\n\n        render() {\n            return (\n                <div className=\"selection-action-panel\">\n                    {this.renderMode(VisualizationMode.Normal)}\n                    <NodeSelectionPanel />\n                    {this.renderMode(VisualizationMode.ClusterSelection)}\n                    <ClusterSplittingPanelStack\n                        currentStep={State.helper.clusterSplittingCurrentStep}\n                    />\n                </div>\n            );\n        }\n    }\n);\n","import { MenuItem, MenuItemProps } from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\n\ninterface TooltipProps {\n    tooltipText: string;\n}\n\ntype Props = TooltipProps & MenuItemProps;\n\nexport function MenuItemWithTooltip(props: Props) {\n    return (\n        <Tooltip2 content={props.tooltipText}>\n            <MenuItem {...props} />\n        </Tooltip2>\n    );\n}\n","import React from \"react\";\nimport { MenuDivider } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { MenuItemWithTooltip } from \"../../utils/MenuItemWithTooltip\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport FormClusterOptionsCard from \"../../utils/FormClusterOptionsCard\";\n\nexport default observer(\n    /**\n     * @description sub component to render options for RightClickNodePanel\n     * @author Zichen XU, Zhiyuan LYU\n     */\n    class RightClickNodePanel extends React.Component {\n        state = {\n            formNewClusterOpen: false,\n        };\n\n        formNewCluster(attribute: string, value: number | string) {\n            State.interaction.selectedNodes.forEach((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(nodeId, attribute, value);\n            });\n            State.preferences.rightClickPanelOpen = false;\n            State.cluster.setCluster(attribute);\n            State.interaction.flush();\n        }\n\n        releaseFromCluster() {\n            const clusterName = State.cluster.clusterBy as string;\n            State.interaction.selectedNodes.forEach((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(nodeId, clusterName, \"\");\n            });\n            State.preferences.rightClickPanelOpen = false;\n            State.cluster.setCluster(State.cluster.clusterBy, true);\n            State.interaction.flush();\n        }\n\n        render() {\n            return (\n                <>\n                    <MenuDivider\n                        title={\n                            (\"Node ID: \" +\n                                State.interaction.chosenNode) as string\n                        }\n                    />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Delete this selected node from the graph\"\n                        icon=\"graph-remove\"\n                        text=\"Delete Node\"\n                        multiline={true}\n                        onClick={() => {\n                            State.graph.mutating.dropNode(\n                                State.interaction.chosenNode as string\n                            );\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Delete multiple selected nodes from the graph\"\n                        icon=\"graph-remove\"\n                        text=\"Delete Selected Nodes\"\n                        multiline={true}\n                        onClick={() => {\n                            State.interaction.selectedNodes.forEach((node) => {\n                                State.graph.mutating.dropNode(node);\n                            });\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                        disabled={\n                            State.interaction.selectedNodes.length === 0 ||\n                            State.interaction.selectedNodes.length === 1\n                        }\n                    />\n\n                    <MenuDivider title=\"Edit Edges\" />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Add new edge to this graph\"\n                        icon=\"new-link\"\n                        text=\"Add Edge\"\n                        onClick={() => {\n                            State.preferences.AddEdgeDialogOpen = true;\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Interactively delete edge that connected to this selected node\"\n                        icon=\"cross\"\n                        text=\"Delete Edge\"\n                        onClick={() => {\n                            State.preferences.deleteEdgePanelOpen = true;\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider title=\"Node-Cluster\" />\n                    <Popover2\n                        isOpen={this.state.formNewClusterOpen}\n                        content={\n                            <FormClusterOptionsCard\n                                callback={(\n                                    attribute: string,\n                                    value: string | number\n                                ) => {\n                                    this.formNewCluster(attribute, value);\n                                    this.setState({\n                                        formNewClusterOpen: false,\n                                    });\n                                    State.preferences.rightClickPanelOpen = false;\n                                }}\n                            />\n                        }\n                    >\n                        <MenuItemWithTooltip\n                            tooltipText=\"Use the selected nodes to form a new cluster\"\n                            icon=\"inner-join\"\n                            text=\"Form a New Cluster\"\n                            onClick={() =>\n                                this.setState({\n                                    formNewClusterOpen: true,\n                                })\n                            }\n                            disabled={\n                                State.interaction.selectedNodes.length === 0\n                            }\n                        />\n                    </Popover2>\n\n                    <MenuItemWithTooltip\n                        tooltipText=\"Release the selected nodes from the cluster where they belongs\"\n                        icon=\"ungroup-objects\"\n                        text=\"Release from Cluster\"\n                        onClick={this.releaseFromCluster}\n                        disabled={State.interaction.selectedNodes.length === 0}\n                    />\n                </>\n            );\n        }\n\n        componentWillUnmount = () => {\n            this.setState({ formNewClusterOpen: false });\n        };\n    }\n);\n","import React from \"react\";\nimport { MenuDivider } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { MenuItemWithTooltip } from \"../../utils/MenuItemWithTooltip\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport FormClusterOptionsCard from \"../../utils/FormClusterOptionsCard\";\nimport { Vector3 } from \"three\";\n\nexport default observer(\n    /**\n     * @description sub component to render options for RightClickClusterPanel\n     * @author Zichen XU, Zhiyuan LYU\n     */\n    class RightClickClusterPanel extends React.Component {\n        state = {\n            mergeSelectedClustersOpen: false,\n            mergeNeighborsOpen: false,\n            mergeNearestClustersOpen: false,\n        };\n\n        /**\n         * @description loop through the selected clusters and set the nodes within that cluster\n         * @author Zichen XU\n         */\n        mergeSelectedClusters(attribute: string, value: string | number) {\n            State.clusterInteraction.selectedClusters.forEach((uuid) => {\n                const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                    uuid\n                ) as string | number;\n                const keys = State.cluster.attributeKeys.get(clusterValue);\n                keys?.forEach((nodeId) => {\n                    State.graph.rawGraph.setNodeAttribute(\n                        nodeId,\n                        attribute,\n                        value\n                    );\n                });\n            });\n            State.cluster.setCluster(attribute);\n            State.clusterInteraction.flush();\n        }\n\n        /**\n         * @description preview the selected cluster with its neighbors\n         * @author Zichen XU, Chenghao SHI\n         */\n        previewClusterNeighbors(uuid: string) {\n            State.clusterInteraction.selectedClusters = [uuid];\n            const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                uuid\n            ) as string | number;\n            const nodeIds = State.cluster.attributeKeys.get(clusterValue);\n            let attributes: (string | number)[] = [];\n            nodeIds?.forEach((nodeId) => {\n                State.graph.rawGraph.forEachNeighbor(nodeId, (neighbor) => {\n                    const attribute = State.cluster.keyAttribute.get(neighbor)!;\n                    if (!attributes.includes(attribute)) {\n                        attributes.push(attribute);\n                    }\n                });\n            });\n            attributes.forEach((attribute) => {\n                State.clusterInteraction.selectedClusters.push(\n                    State.graphDelegate.clusterObject.clusterObjectsMap?.get(\n                        attribute\n                    )?.uuid!\n                );\n            });\n        }\n\n        /**\n         * @description preview the nearest cluster with its neighbors\n         * @author Zichen XU\n         */\n        previewNearestNeighbors(uuid: string) {\n            function computeDistance(from: Vector3) {\n                const current = State.graphDelegate.clusterObject.getObjectById(\n                    uuid\n                )!.position;\n                return current.distanceTo(from);\n            }\n\n            State.clusterInteraction.selectedClusters = [uuid];\n            const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                uuid\n            ) as string | number;\n            const nodeIds = State.cluster.attributeKeys.get(clusterValue);\n            let attributes: (string | number)[] = [];\n            nodeIds?.forEach((nodeId) => {\n                State.graph.rawGraph.forEachNeighbor(nodeId, (neighbor) => {\n                    const attribute = State.cluster.keyAttribute.get(neighbor)!;\n                    if (!attributes.includes(attribute)) {\n                        attributes.push(attribute);\n                    }\n                });\n            });\n            const objects = attributes\n                .map((attribute) => {\n                    return State.graphDelegate.clusterObject.clusterObjectsMap?.get(\n                        attribute\n                    )?.uuid!;\n                })\n                .map((uuid) => {\n                    return State.graphDelegate.clusterObject.getObjectById(\n                        uuid\n                    );\n                });\n\n            if (objects.length !== 0) {\n                let shortest = objects[0];\n                objects.forEach((object) => {\n                    if (\n                        computeDistance(object?.position!) <\n                        computeDistance(shortest?.position!)\n                    ) {\n                        shortest = object;\n                    }\n                });\n                State.clusterInteraction.selectedClusters.push(shortest?.uuid!);\n            }\n        }\n\n        /**\n         * @description delete the selected clusters and its corresponding nodes\n         * @author Zichen XU\n         */\n        deleteSelectedClusters() {\n            State.clusterInteraction.selectedClusters.forEach((uuid) => {\n                const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                    uuid\n                ) as string | number;\n                const keys = State.cluster.attributeKeys.get(clusterValue);\n                keys?.forEach((nodeId: string) => {\n                    State.graph.rawGraph.dropNode(nodeId);\n                });\n            });\n            State.cluster.setCluster(null, true);\n            State.clusterInteraction.flush();\n        }\n\n        /**\n         * @description loop through the selected clusters and set the nodes within that cluster\n         * @author Zichen XU\n         */\n        releaseSelectedClusters() {\n            State.clusterInteraction.selectedClusters.forEach((uuid) => {\n                const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                    uuid\n                ) as string | number;\n                const keys = State.cluster.attributeKeys.get(clusterValue);\n                keys?.forEach((nodeId) => {\n                    State.graph.rawGraph.setNodeAttribute(\n                        nodeId,\n                        State.cluster.clusterBy as string,\n                        \"\"\n                    );\n                });\n            });\n            State.cluster.setCluster(State.cluster.clusterBy, true);\n            State.clusterInteraction.flush();\n        }\n\n        render() {\n            return (\n                <>\n                    <MenuDivider title=\"Cluster Operation\" />\n                    <Popover2\n                        popoverClassName={\"transparent-popover\"}\n                        isOpen={this.state.mergeSelectedClustersOpen}\n                        content={\n                            <FormClusterOptionsCard\n                                callback={(\n                                    attribute: string,\n                                    value: number | string\n                                ) => {\n                                    this.mergeSelectedClusters(\n                                        attribute,\n                                        value\n                                    );\n                                    this.setState({\n                                        mergeSelectedClustersOpen: false,\n                                    });\n                                    State.preferences.rightClickPanelOpen = false;\n                                }}\n                            />\n                        }\n                    >\n                        <MenuItemWithTooltip\n                            tooltipText=\"Merge selected clusters into a larger cluster\"\n                            icon=\"group-objects\"\n                            text=\"Merge Clusters\"\n                            onClick={() => {\n                                this.closeAllPanel();\n                                this.setState({\n                                    mergeSelectedClustersOpen: true,\n                                });\n                            }}\n                            disabled={\n                                State.clusterInteraction.selectedClusters\n                                    .length === 0 ||\n                                State.clusterInteraction.selectedClusters\n                                    .length === 1\n                            }\n                        />\n                    </Popover2>\n\n                    <Popover2\n                        popoverClassName={\"transparent-popover\"}\n                        isOpen={this.state.mergeNeighborsOpen}\n                        content={\n                            <FormClusterOptionsCard\n                                callback={(\n                                    attribute: string,\n                                    value: number | string\n                                ) => {\n                                    this.mergeSelectedClusters(\n                                        attribute,\n                                        value\n                                    );\n                                    this.setState({\n                                        mergeNeighborsOpen: false,\n                                    });\n                                    State.preferences.rightClickPanelOpen = false;\n                                }}\n                                style={{ opacity: \"50%\" }}\n                            />\n                        }\n                    >\n                        <MenuItemWithTooltip\n                            tooltipText=\"Merge this cluster with its neighbors\"\n                            icon=\"group-objects\"\n                            text=\"Merge Neighbors\"\n                            onClick={() => {\n                                this.previewClusterNeighbors(\n                                    State.clusterInteraction\n                                        .chosenCluster as string\n                                );\n                                State.graphDelegate.clusterObject.updateAllMaterials();\n                                this.closeAllPanel();\n                                this.setState({\n                                    mergeNeighborsOpen: true,\n                                });\n                            }}\n                        />\n                    </Popover2>\n\n                    <Popover2\n                        popoverClassName={\"transparent-popover\"}\n                        isOpen={this.state.mergeNearestClustersOpen}\n                        content={\n                            <FormClusterOptionsCard\n                                callback={(\n                                    attribute: string,\n                                    value: number | string\n                                ) => {\n                                    this.mergeSelectedClusters(\n                                        attribute,\n                                        value\n                                    );\n                                    this.setState({\n                                        mergeNearestClustersOpen: false,\n                                    });\n                                    State.preferences.rightClickPanelOpen = false;\n                                }}\n                            />\n                        }\n                    >\n                        <MenuItemWithTooltip\n                            tooltipText=\"Merge this cluster with its nearest neighbor\"\n                            icon=\"group-objects\"\n                            text=\"Merge Nearest Neighbor\"\n                            onClick={() => {\n                                this.previewNearestNeighbors(\n                                    State.clusterInteraction\n                                        .chosenCluster as string\n                                );\n                                State.graphDelegate.clusterObject.updateAllMaterials();\n                                this.closeAllPanel();\n                                this.setState({\n                                    mergeNearestClustersOpen: true,\n                                });\n                            }}\n                        />\n                    </Popover2>\n                    <MenuDivider />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Release selected clusters from the included nodes\"\n                        icon=\"group-objects\"\n                        text=\"Release Cluster(s)\"\n                        onClick={() => {\n                            this.releaseSelectedClusters();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Delete this cluster and its associated nodes from the graph\"\n                        icon=\"delete\"\n                        text=\"Delete Cluster(s)\"\n                        onClick={() => {\n                            this.deleteSelectedClusters();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                </>\n            );\n        }\n\n        componentWillUnmount = () => {\n            this.closeAllPanel();\n        };\n\n        closeAllPanel() {\n            this.setState({\n                mergeSelectedClustersOpen: false,\n                mergeNeighborsOpen: false,\n                mergeNearestClustersOpen: false,\n            });\n        }\n    }\n);\n","import React from \"react\";\nimport { MenuDivider } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../../state\";\nimport { MenuItemWithTooltip } from \"../../utils/MenuItemWithTooltip\";\n\nexport default observer(\n    /**\n     * @description sub component to render options for RightClickBackgroundPanel\n     * @author Zichen XU, Zhiyuan LYU\n     */\n    class RightClickBackgroundPanel extends React.Component {\n        render() {\n            return (\n                <>\n                    <MenuDivider title=\"Edit Graph\" />\n                    <MenuItemWithTooltip\n                        tooltipText=\"Add single node to the graph\"\n                        icon=\"new-object\"\n                        text=\"Add Node\"\n                        onClick={() => {\n                            State.preferences.AddNodeDialogOpen = true;\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                </>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Menu } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { computed, makeObservable } from \"mobx\";\nimport RightClickNodeMenu from \"./RightClickNodeMenu\";\nimport RightClickClusterMenu from \"./RightClickClusterMenu\";\nimport RightClickBackgroundMenu from \"./RightClickBackgroundMenu\";\n\ninterface Props {\n    /**\n     * what place this RightClick interaction is activated\n     *\n     * @type {(\"Node\" | \"Cluster\" | \"Background\")}\n     */\n    on: \"Node\" | \"Cluster\" | \"Background\";\n}\n\nexport default observer(\n    /**\n     * @description This component will be used when mouse right-clicked. There will be some operation choices on this panel.\n     * @author Zichen XU, Zhiyuan LYU\n     */\n    class RightClickPanel extends React.Component<Props, {}> {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        renderMenuContent() {\n            switch (this.props.on) {\n                case \"Node\":\n                    return <RightClickNodeMenu />;\n                case \"Cluster\":\n                    return <RightClickClusterMenu />;\n                case \"Background\":\n                    return <RightClickBackgroundMenu />;\n            }\n        }\n\n        render() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    {this.renderMenuContent()}\n                </Menu>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Card, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport NodeDetailPanel from \"./panels/NodeDetailPanel\";\nimport MultiDetailPanel from \"./panels/MultiDetailPanel\";\nimport DeleteEdgeInteractionPanel from \"./panels/DeleteEdgeInteractionPanel\";\nimport GraphOptionsCard from \"./panels/GraphOptions/GraphOptionsCard\";\nimport InteractionModePanel from \"./panels/InteractionModePanel/InteractionModePanel\";\nimport RightClickPanel from \"./panels/RightClickPanel/RightClickPanel\";\n\nexport default observer(\n    /**\n     * @description all the floating cards on the screen\n     * @author Zhiyuan LYU\n     * @class FloatingCards\n     * @extends {React.Component}\n     */\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.graphOptionsCardOpen = !State.preferences\n                .graphOptionsCardOpen;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <Card\n                            elevation={Elevation.TWO}\n                            className={classnames(\n                                \"overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.graphOptionsCardOpen\n                                    ? this.optionsVisible\n                                    : this.optionsInvisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            />\n                            <br />\n                            <GraphOptionsCard />\n                        </Card>\n                        <Card\n                            elevation={Elevation.TWO}\n                            className={classnames(\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.graphOptionsCardOpen\n                                        ? this.sideButtonInv\n                                        : this.sideButtonVis\n                                }\n                            />\n                        </Card>\n                    </div>\n\n                    {/* single selected */}\n                    {/* {State.graph.selectedNodes.length === 1 && (\n                        <NodeDetail node={State.graph.currentlyHoveredId} />\n                    )} */}\n                    {State.interaction.currentlyHoveredNodeId &&\n                        State.interaction.selectedNodes.length === 0 && (\n                            <NodeDetailPanel\n                                onNode={\n                                    State.interaction.currentlyHoveredNodeId\n                                }\n                            />\n                        )}\n\n                    {/* multiple selected */}\n                    {/* {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n                        <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n                    )} */}\n                    {State.interaction.selectedNodes.length !== 0 && (\n                        <MultiDetailPanel />\n                    )}\n\n                    {State.preferences.rightClickPanelOpen &&\n                        State.preferences.rightClickOn && (\n                            <RightClickPanel\n                                on={State.preferences.rightClickOn}\n                            />\n                        )}\n                    {State.preferences.deleteEdgePanelOpen &&\n                        State.interaction.chosenNode && (\n                            <DeleteEdgeInteractionPanel\n                                onNode={State.interaction.chosenNode}\n                            />\n                        )}\n                    <InteractionModePanel />\n                </div>\n            );\n        }\n    }\n);\n","import classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/Visualizer\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}