{"version":3,"sources":["state/PreferencesStore.ts","state/Cluster3dObjectStore.ts","state/GraphDelegate.ts","components/ComponentRef.tsx","state/GraphMutation.ts","state/GraphStore.ts","state/ImportStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/CssStore.ts","state/NodeInteractionStore.ts","state/ClusterInteractionStore.ts","state/HelperStackPanelStore.ts","state/index.ts","components/utils/ClusterChooser.tsx","images/logo.png","components/utils/SimpleSelect.tsx","components/Navbar.tsx","components/utils/Collapsable.tsx","constants/index.ts","components/dialogs/ImportCSVDialog.tsx","components/dialogs/ImportGEXFDialog.tsx","components/dialogs/ExportDialog.tsx","components/utils/DataSheetDialogWrapper.tsx","components/utils/InputFormUtils.ts","components/dialogs/NodeDataSheetDialog.tsx","components/utils/NodeChooser.tsx","components/dialogs/EdgeDataSheetDialog.tsx","components/utils/NodeAdder.tsx","components/dialogs/AddNodeDialog.tsx","components/dialogs/AddEdgeDialog.tsx","components/Dialogs.tsx","components/SelectionBox.tsx","state/utils/MouseEventUtils.ts","components/panels/CanvasDrawPanel.tsx","components/visualize/Visualizer.tsx","components/panels/NodeDetailPanel.tsx","components/panels/MultiDetailPanel.tsx","components/panels/SearchPanel.tsx","components/panels/DeleteEdgeInteractionPanel.tsx","components/panels/ClusterPanel.tsx","components/utils/ColorPicker.tsx","components/panels/EdgesPanel.tsx","components/panels/LabelsPanel.tsx","components/panels/NodesPanel.tsx","components/panels/GraphOptionsCard.tsx","components/panels/InteractionModePanel/ClusterSplittingPanelStack.tsx","components/panels/InteractionModePanel/NodeSelectionPanel.tsx","components/panels/InteractionModePanel/InteractionModePanel.tsx","components/panels/RightClickPanel.tsx","components/FloatingCards.tsx","App.js","reportWebVitals.js","index.js"],"names":["VisualizationMode","PreferencesStore","rightClickPositionX","rightClickPositionY","exportDialogOpen","preferenceDialogOpen","statisticsDialogOpen","helpDialogOpen","AddNodeDialogOpen","AddEdgeDialogOpen","nodeDataSheetDialogOpen","edgeDataSheetDialogOpen","rightClickOn","rightClickPanelOpen","deleteEdgePanelOpen","graphOptionsCardOpen","view","controlType","visualizationMode","Normal","makeAutoObservable","this","except","Cluster3dObjectStore","threeScene","fusionClusterObjects","clusterObjectsMap","UUID2ClusterValueMap","remove","dispose","State","cluster","clusterBy","Map","initialMap","attributePoints","forEach","value","key","set","createMesh","THREE","add","convexHullObjects","initEmptyMapAndFusion","mesh","geometry","copy","convexHullObject","uuid","res","children","every","item","object","material","opacity","newMap","points","get","css","shape","length","ConvexGeometry","Array","from","convexGeometry","computeBoundingSphere","sphereGeo","boundingSphere","sphere","SphereGeometry","radius","resolution","translate","center","x","y","z","geom","name","meshMaterial","color","attributeColor","transparent","side","depthWrite","oldOpacity","setTimeout","_object","meshId","clusterInteraction","currentlyHoveredClusterId","selectedClusters","includes","meshSelectedMaterial","meshNormalMaterial","meshHighlightMaterial","createCustomNodeObject","_id","_cluster","result","id","hovered","selected","multiSelected","isClusterNode","createCustomLinkObject","_source","_target","source","target","isClusterLink","GraphDelegate","graphDelegateMethods","nodeVisibility","nodeObject","linkVisibility","linkObject","clusterObject","_graphDelegateMethods","scene","newGraph","graph","rawGraph","addInvisibleClusterNode","decorateRawGraph","tempGraph","nodes","links","forEachNode","node","attributes","push","forEachEdge","edge","oldGraph","graphCopy","names","index","getAttributeValues","attribute","clusterID","addNode","_visualize","attributeKeys","addEdgeWithKey","nodeId","distance","getNodeAttribute","distRatio","Math","hypot","cameraPosition","d3Force","link","clusterForce","normalForce","d3ReheatSimulation","ComponentRef","nodeDetail","multiNodeDetail","visualizer","canvasDrawPanel","clusterSplittingPanelStack","_instance","instance","reaction","interaction","currentlyHoveredNodeId","forceUpdate","GraphMutation","_this","that","newAttributes","hasOwnProperty","decorateRawNode","refreshGraph","dropNode","decorateRawEdge","addEdge","dropEdge","GraphStore","Graph","allowSelfLoops","multi","type","numberOfClusters","mutating","metadata","snapshotName","nodeProperties","_rawGraph","_metadata","flush","updateVisualizationGraph","order","size","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importCSVDialogOpen","importSamplesDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","replace","parse","comment","trim","auto_parse","skip_empty_lines","undefined","err","Toaster","create","position","Position","TOP","show","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","readNodeCSV","toString","Object","assign","readEdgeCSV","idx","hasNode","keys","readGEXF","entries","getNodeAttributes","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","join","console","log","it","onerror","error","action","onClick","window","location","reload","text","nodeFileConfig","SearchStore","isPreviewing","searchStr","observable","ref","list","searchStrIgnoreCase","toLocaleLowerCase","match","searchId","searchQuery","searchAttr","searchValue","ClusterStore","to","setCluster","graphDelegate","setAttribute","keyValueMap","Set","keyAttribute","values","attributeKeysMap","colors","randomcolor","seed","count","NodeGlobalConfig","defaultColor","selectedColor","multiSelectedColor","highlightColor","EdgeGlobalConfig","defaultWidth","highlightWidth","LabelConfig","ClusterConfig","CssStore","label","isAnimating","InteractionStore","selectedNode","selectedNodes","selectedEdge","selectedEdges","boxSelectionOpen","boxSelection_startPoint","boxSelection_endPoint","left","min","top","right","max","down","Attributes","coords","graph2ScreenCoords","neighbors","getNodeNeighborEdges","neighbor","getEdgeKey","node1","node2","go","back","updateNodeVisualizeAttribute","oldAttributeVisualize","updateVisualizeAttributeParser","getEdgeAttribute","newAttribute","oldAttributes","ClusterInteractionStore","selectedCluster","drawPanelActivate","lineSegment","confirmClusterSplittingTempData","event","meshSpotlightMaterial","getObjectById","indexOf","splice","preferences","closeAllPanel","date","Date","toLocaleString","clusterId","_","clusterValue","setNodeAttribute","screenCoords","coord","tempLineSegment","polygonContains","refresh","anotherClusterId","thisCluster","nodesToAlter","HelperStackPanelStore","clusterSplittingPanelStackOpen","clusterSplittingCurrentStep","NodeSelectionPanelOpen","AppState","import","search","helper","NodeInteractionStore","privateConstructor","_state","autorun","renderImportEdgePreview","renderImportNodePreview","resumeAnimation","pauseAnimation","ClusterSplitting","step","clearDrawing","number","fireImmediately","updateAllMaterials","currentlyHoveredNodeNeighborEdges","updateEdgeVisualizeAttribute","observer","itemRenderer","props","handleClick","propertiesWithNone","unshift","items","showNone","fullProperties","filterable","onItemSelect","onSelect","syncWith","React","Component","defaultProps","CommonItemRenderer","itemPredicate","query","toLowerCase","noResults","disabled","small","className","classnames","Classes","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","title","src","logo","width","height","alt","NAVBAR_HEADING","icon","BOTTOM","BUTTON","MINIMAL","checked","onChange","ALIGN_RIGHT","NAVBAR_DIVIDER","open","elevation","Elevation","LARGE","FILL","rightIcon","isOpen","onToggle","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","PreviewTable","renderWrapper","numRows","selectedRegions","rows","cols","cellRenderer","i","state","loading","available","nodesOpen","edgesOpen","canImport","renderNodesSelection","Collapsable","setState","CONTROL_GROUP","INPUT_GROUP","onInputChange","files","renderEdgesSelection","newDelimiter","style","minWidth","onClose","DIALOG_BODY","targetValue","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","DISABLED","PRIMARY","importGraphFromCSV","then","setGraph","fileIsSelect","importGraphFromGEXF","hasAttribute","getAttribute","renderImportButton","ready","_node","_edge","write","headers","exportData","export","data","edges","interactive","ONE","minimal","computeGEXFFile","filename","computeNodeFile","separator","computeEdgeFile","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","for","onOpened","renderTable","handleStringChange","handler","stringifyNodeDetail","parseNumberOrString","numberVal","Number","isNaN","GraphNodeTable","filterQuery","addNodeDialogOpen","deleteAlertOpen","nodeToDelete","renderColumns","rowIndex","columnIndex","renderCell","filter","element","cell","filteredTable","newVal","setValue","onConfirm","tooltip","deleteNodeRenderer","deleteNodeAlert","cancelButtonText","confirmButtonText","onCancel","textAlign","newTable","asyncControl","leftIcon","placeholder","fill","defaultRowHeight","SUCCESS","select","labelFor","labelInfo","GraphEdgeTable","addEdgeDialogOpen","edgeToDelete","chosenSource","chosenTarget","deleteEdgeRenderer","deleteEdgeAlert","addEdgeDialog","onClosed","hasEdge","renderMode","RenderMode","NONE","newNodeId","canImportTag","renderAttributesForm","newValue","componentDidMount","prop","autoFocus","rightElement","onAdded","Dialogs","display","boxStyle","startPoint","endPoint","mouseDown","onMouseDownCallback","startpoint","clientX","clientY","onMouseMoveCallback","_calculateSelectionBox","onMouseUpCallback","boxSelectNode","abs","onMouseDown","onMouseMove","onMouseUp","onDocumentLeftClick","ReactDOM","findDOMNode","box","getBoundingClientRect","vector","camera","unproject","intersects","sub","normalize","intersectObjects","clusterLeftClickCallback","onDocumentRightClick","clusterRightClickCallback","onDocumentMouseMove","clusterHoverCallback","canvasRef","createRef","current","exportDrawing","canvas","canvasHeight","canvasWidth","lazyRadius","brushRadius","brushColor","catenaryColor","JSON","canvasMethods","getSaveData","drawPoints","reverse","computeSplitCluster","clear","visualizationGraph","nodePointerInteraction","graphRef","hoverNodeCallback","previousNode","nodeLeftClickCallback","NodeSelection","nodeRightClickCallback","backgroundClickCallback","backgroundRightClickCallback","renderGraph","graphData","nodeLabel","nodeRelSize","nodeColor","computeNodeColor","nodeResolution","nodeThreeObjectExtend","nodeThreeObject","sprite","SpriteText","textHeight","visible","backgroundColor","translateX","onNodeHover","onNodeClick","onNodeRightClick","onNodeDragEnd","fx","fy","fz","linkWidth","computeEdgeWidth","linkColor","computeEdgeColor","onBackgroundRightClick","onBackgroundClick","enablePointerInteraction","onEngineTick","clusterDelegation","document","addEventListener","CustomMouseEvent","removeEventListener","mountDelegateMethods","graphMethods","clusterInteractionListener","ClusterSelection","cellRenderer_property","cellRenderer_value","onNode","formatLongFloat","nodeAttributeValue","num","parseFloat","toPrecision","CARD","enableRowHeader","renderSearchResults","candidates","onMouseOver","cameraFocusOn","large","onMouseLeave","targetNode","neighborsRenderer","onMouseEnter","shapeOptionOpen","forceOptionOpen","forceCollapse","stepSize","labelStepSize","updateClusterForce","shapeCollapse","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","RIGHT","sizeOptionOpen","thicknessOptionOpen","colorOptionOpen","hex","timeOutRef","colorCollapse","sizeCollapse","animate","panel","Expander","allPanelStacks","component","justifyContent","splitCluster","CustomPanel","panelNumber","firstPanel","renderPanel","secondPanel","thirdPanel","renderPanelStack","initialPanel","stack","currentPanelStack","placement","usePortal","active","handleChange","selectedValue","WARNING","mode","getIntent","currentStep","makeObservable","stylePosition","computed","ELEVATION_1","formNewCluster","mergeSelectedCluster","on","renderNodeMenu","renderClusterMenu","renderBackgroundMenu","optionsVisible","optionsInvisible","sideButtonVis","marginLeft","sideButtonInv","toggleOptions","ELEVATION_2","GraphOptionsCard","paddingTop","paddingRight","paddingBottom","NodeDetailPanel","MultiDetailPanel","App","DARK","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.43c4bae6.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nexport enum VisualizationMode {\n    Normal = \"Normal\", // normal state\n    ClusterSelection = \"Cluster Selection\", // selecting the cluster to be Merged\n    NodeSelection = \"Node Selection\", // multi-selecting the node\n    ClusterSplitting = \"Cluster Splitting\", // drawing the line to split the cluster\n}\n\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // Right Click Position\n\n    rightClickPositionX = 30;\n    rightClickPositionY = 30;\n\n    // Dialog\n    exportDialogOpen = false;\n    preferenceDialogOpen = false;\n    statisticsDialogOpen = false;\n    helpDialogOpen = false;\n\n    AddNodeDialogOpen = false;\n    AddEdgeDialogOpen = false;\n\n    nodeDataSheetDialogOpen = false;\n    edgeDataSheetDialogOpen = false;\n\n    // Panel\n\n    rightClickOn = null as null | \"Node\" | \"Cluster\" | \"Background\";\n    rightClickPanelOpen = false;\n    deleteEdgePanelOpen = false;\n\n    graphOptionsCardOpen = false;\n\n    closeAllPanel(except?: string) {\n        this.deleteEdgePanelOpen = false;\n        this.graphOptionsCardOpen = false;\n        if (except !== \"rightClickPanel\") {\n            this.rightClickPanelOpen = false;\n        }\n    }\n\n    // 3D Graph\n\n    view = \"3D\";\n    controlType: \"trackball\" | \"orbit\" | \"fly\" = \"trackball\";\n\n    visualizationMode: VisualizationMode = VisualizationMode.Normal;\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport { SphereGeometry } from \"three\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport State from \".\";\n\nexport default class Cluster3dObjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * the THREE.js WebGL Scene of the visualization\n     *\n     */\n    threeScene!: THREE.Scene;\n\n    /**\n     * all the clusters should form a 3D Group to be imported into Scene\n     * if no cluster attribute is set, this will be set to null\n     *\n     * each children is a THREE.Mesh\n     *\n     * @type {THREE.Group}\n     */\n    fusionClusterObjects: THREE.Group | null = null;\n\n    /**\n     * the map between attribute value and its corresponding Mesh Group\n     * if you want to update the geometry, plz update all the children inside which Mesh Group\n     * if no cluster attribute is set, this will be set to null\n     *\n     * @type {(Map<string | number, THREE.Group> | null)}\n     */\n    clusterObjectsMap: Map<string | number, THREE.Mesh> | null = null;\n\n    /**\n     * create empty BufferGeometry and mesh with colour\n     * then initialize $fusionClusterObjects and $clusterObjectsMap with it\n     * and then add the THREE.Group to the Scene\n     *\n     */\n    initEmptyMapAndFusion() {\n        if (this.fusionClusterObjects) {\n            this.threeScene.remove(this.fusionClusterObjects);\n            this.dispose();\n        }\n        if (State.cluster.clusterBy === null) {\n            return;\n        }\n        this.UUID2ClusterValueMap = new Map<string, string | number>();\n        let initialMap = new Map<string | number, THREE.Mesh>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            initialMap.set(\n                key,\n                this.createMesh(new THREE.BufferGeometry(), key)\n            );\n        });\n\n        this.clusterObjectsMap = initialMap;\n        this.fusionClusterObjects = new THREE.Group();\n        initialMap.forEach((value) => {\n            this.fusionClusterObjects?.add(value);\n        });\n        this.threeScene.add(this.fusionClusterObjects);\n    }\n\n    /**\n     * should be called on each render frame\n     * will update the geometry inside each cluster object\n     *\n     * if is the first time (both are null), will run initEmptyMapAndFusion() first\n     *\n     * if meet with clusterBy == null, will dispose all Object3d\n     *\n     */\n    clusterDelegation() {\n        if (State.cluster.clusterBy === null) {\n            return;\n        } else {\n            if (\n                this.fusionClusterObjects == null ||\n                this.convexHullObjects == null\n            ) {\n                this.initEmptyMapAndFusion();\n            }\n            this.clusterObjectsMap?.forEach(\n                (mesh: THREE.Mesh, key: string | number) => {\n                    mesh.geometry.copy(this.convexHullObject(key));\n                }\n            );\n        }\n    }\n\n    getObjectById(uuid: string): THREE.Mesh | null {\n        let res: THREE.Object3D | null = null;\n        this.fusionClusterObjects?.children.every((item: THREE.Object3D) => {\n            if (item.uuid === uuid) {\n                res = item;\n                return false;\n            } else {\n                return true;\n            }\n        });\n        return res;\n    }\n\n    resetDefaultMaterial() {\n        this.fusionClusterObjects?.children.forEach(\n            (object: THREE.Object3D) => {\n                let mesh = object as THREE.Mesh;\n                let material = mesh.material as THREE.Material;\n                material.opacity = 0.15;\n            }\n        );\n    }\n\n    /**\n     * dispose the geometries and materials in every clusterObject\n     * and set these props to be null, which indicates that no additional 3d object is added into Scene\n     *\n     */\n    dispose() {\n        this.clusterObjectsMap?.forEach((mesh: THREE.Mesh) => {\n            let material = mesh.material as THREE.Material;\n            material.dispose();\n            mesh.geometry.dispose();\n        });\n        this.clusterObjectsMap = null;\n        this.fusionClusterObjects = null;\n        this.UUID2ClusterValueMap = new Map<string, string | number>();\n    }\n\n    /**\n     * the map between the value of the cluster and the BufferGeometry that this cluster created\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Group>)}\n     */\n    get convexHullObjects(): Map<string | number, THREE.BufferGeometry> {\n        let newMap = new Map<string | number, THREE.BufferGeometry>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            newMap.set(key, this.convexHullObject(key));\n        });\n        return newMap;\n    }\n\n    /**\n     * get the computed convexHull BufferGeometry of the specified attribute value\n     *\n     * @param {(string | number)} key\n     * @returns {*}  {THREE.BufferGeometry}\n     */\n    convexHullObject(key: string | number): THREE.BufferGeometry {\n        let points = State.cluster.attributePoints.get(key) as THREE.Vector3[];\n        if (State.css.cluster.shape === \"convexHull\") {\n            if (!points || points.length < 4) {\n                return new THREE.BufferGeometry();\n            } else {\n                return new ConvexGeometry(Array.from(points));\n            }\n        } else {\n            // State.css.clusterShape === \"Sphere\"\n            let convexGeometry = new ConvexGeometry(Array.from(points));\n            convexGeometry.computeBoundingSphere();\n            let sphereGeo = convexGeometry.boundingSphere as THREE.Sphere;\n            let sphere = new SphereGeometry(\n                sphereGeo.radius,\n                State.css.cluster.resolution,\n                State.css.cluster.resolution\n            );\n            sphere.translate(\n                sphereGeo.center.x,\n                sphereGeo.center.y,\n                sphereGeo.center.z\n            );\n            return sphere;\n        }\n    }\n\n    /**\n     * create a Three.Group, which contains 2 Three.Mesh, of the input geometry\n     *\n     * @private\n     * @param {THREE.BufferGeometry} geom\n     * @param {(string | number)} name\n     * @returns {*}  {THREE.Group}\n     *\n     * @see THREE.Mesh\n     */\n    private createMesh(\n        geom: THREE.BufferGeometry,\n        name: string | number\n    ): THREE.Mesh {\n        const meshMaterial = new THREE.MeshBasicMaterial({\n            color: State.cluster.attributeColor.get(name),\n            transparent: true,\n            opacity: 0.15,\n        });\n        meshMaterial.side = THREE.DoubleSide; //将材质设置成正面反面都可见\n        meshMaterial.depthWrite = false;\n\n        let mesh = new THREE.Mesh(geom, meshMaterial);\n        this.UUID2ClusterValueMap.set(mesh.uuid, name);\n        mesh.name = \"THREE_CLUSTER_\" + name;\n        return mesh;\n    }\n\n    UUID2ClusterValueMap!: Map<string, string | number>;\n\n    meshSpotlightMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        const oldOpacity = material.opacity;\n        material.opacity = 0.7;\n        setTimeout(() => {\n            material.opacity = oldOpacity;\n        }, 100);\n    }\n\n    private meshHighlightMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        material.opacity = 0.5;\n    }\n\n    private meshSelectedMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        material.opacity = 0.3;\n    }\n\n    private meshNormalMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        material.opacity = 0.15;\n    }\n\n    updateAllMaterials() {\n        this.fusionClusterObjects?.children.forEach((_object) => {\n            let mesh = _object as THREE.Mesh;\n            const meshId = mesh.uuid;\n            if (State.clusterInteraction.currentlyHoveredClusterId === meshId) {\n                this.meshHighlightMaterial(mesh);\n                return;\n            } else if (\n                State.clusterInteraction.selectedClusters.includes(meshId)\n            ) {\n                this.meshSelectedMaterial(mesh);\n                return;\n            } else {\n                this.meshNormalMaterial(mesh);\n            }\n        });\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport State from \".\";\nimport {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport Cluster3dObjectStore from \"./Cluster3dObjectStore\";\n\n/**\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n *\n *\n * @interface ICustomNodeObject\n * @extends {NodeObject}\n */\nexport interface ICustomNodeObject extends NodeObject {\n    hovered: boolean;\n    selected: boolean;\n    multiSelected: boolean;\n    isClusterNode?: boolean;\n}\n/**\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n *\n *\n * @interface ICustomLinkObject\n * @extends {LinkObject}\n */\nexport interface ICustomLinkObject extends LinkObject {\n    hovered: boolean;\n    selected: boolean;\n    isClusterLink?: boolean;\n}\n\nexport function createCustomNodeObject(\n    _id: string,\n    _cluster: boolean = false\n): ICustomNodeObject {\n    let result: ICustomNodeObject = {\n        id: _id,\n        hovered: false,\n        selected: false,\n        multiSelected: false,\n        isClusterNode: _cluster,\n    };\n    return result;\n}\n\nexport function createCustomLinkObject(\n    _source: string,\n    _target: string,\n    _cluster: boolean = false\n): ICustomLinkObject {\n    let result: ICustomLinkObject = {\n        source: _source,\n        target: _target,\n        hovered: false,\n        selected: false,\n        isClusterLink: _cluster,\n    };\n    return result;\n}\n\nexport default class GraphDelegate {\n    constructor() {\n        makeAutoObservable(this);\n        this.clusterObject = new Cluster3dObjectStore();\n    }\n\n    /**\n     * assign the force-graph methods to this class\n     * should be called as long as the visualizer react component is mounted\n     *\n     * @param {ForceGraphMethods} _graphDelegateMethods\n     */\n    mountDelegateMethods(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.clusterObject.threeScene = this.graphDelegateMethods.scene();\n    }\n\n    /**\n     * the ForceGraphMethods exposed by the visualization force-graph\n     *\n     * @see ForceGraphMethods\n     *\n     * @type {ForceGraphMethods}\n     */\n    graphDelegateMethods!: ForceGraphMethods;\n\n    /**\n     * compute the delegate graph that will be used by the ForceGraph3D\n     * will add invisible cluster nodes and edges to balance the clustered graph and adjust force\n     * the NodeObject and LinkObject inside attributes (named _visualize) will be used.\n     *\n     * nodes and edges with the show=false will be ignored in this case\n     *\n     */\n\n    visualizationGraph() {\n        let newGraph: Graph;\n        if (State.cluster.clusterBy === null) {\n            newGraph = State.graph.rawGraph;\n        } else {\n            newGraph = this.addInvisibleClusterNode(\n                State.graph.decorateRawGraph(State.graph.rawGraph)\n            );\n        }\n        let tempGraph = {\n            nodes: [] as ICustomLinkObject[],\n            links: [] as ICustomLinkObject[],\n        };\n        newGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        newGraph.forEachEdge((edge, attributes) => {\n            tempGraph.links.push(attributes[\"_visualize\"]);\n        });\n        return tempGraph;\n    }\n\n    /**\n     * return a new graph that contains the invisible clusters, formed as nodes\n     * as well as the edges that connected to the cluster node to simulate the force within the same cluster\n     * the new graph is a deep copy of the old node, so no worries of the original graph DS\n     *\n     * @private\n     * @param {Graph} oldGraph\n     * @returns {*}  {Graph}\n     */\n    private addInvisibleClusterNode(oldGraph: Graph): Graph {\n        let graphCopy = oldGraph.copy();\n        let names = [\n            \"_CLUSTER_1_\",\n            \"_CLUSTER_2_\",\n            \"_CLUSTER_3_\",\n            \"_CLUSTER_4_\",\n            \"_CLUSTER_5_\",\n            \"_CLUSTER_6_\",\n            \"_CLUSTER_7_\",\n            \"_CLUSTER_8_\",\n            \"_CLUSTER_9_\",\n            \"_CLUSTER_10_\",\n        ];\n        for (let index = 0; index < names.length; index++) {\n            State.cluster.getAttributeValues.forEach(\n                (attribute: string | number) => {\n                    // if a node does not belong to any cluster, a undefined will be formed with no cluster to generate\n                    if (attribute === \"undefined\") return;\n\n                    let clusterID = names[index] + attribute;\n                    graphCopy.addNode(clusterID, {\n                        _visualize: createCustomNodeObject(clusterID, true),\n                    });\n\n                    // add edges to simulate the force of the same cluster\n                    State.cluster.attributeKeys\n                        .get(attribute)\n                        ?.forEach((target) => {\n                            graphCopy.addEdgeWithKey(\n                                `${clusterID}-${target}`,\n                                clusterID,\n                                target,\n                                {\n                                    _visualize: createCustomLinkObject(\n                                        clusterID,\n                                        target,\n                                        true\n                                    ),\n                                }\n                            );\n                        });\n                }\n            );\n        }\n\n        return graphCopy;\n    }\n\n    /**\n     * determine whether this Node is the cluster delegate node\n     *\n     * @param {CustomNodeObject} nodeObject\n     */\n    nodeVisibility = (nodeObject: NodeObject) => {\n        let node = nodeObject as ICustomNodeObject;\n        return !node.isClusterNode;\n    };\n\n    /**\n     * determine whether this edge is the cluster delegate edge\n     *\n     * @param {CustomLinkObject} nodeObject\n     */\n    linkVisibility = (linkObject: LinkObject) => {\n        let link = linkObject as ICustomLinkObject;\n        return !link.isClusterLink;\n    };\n\n    ////\n\n    clusterObject: Cluster3dObjectStore;\n\n    ////\n\n    /**\n     * this will re-position the camera to focus on the specified node\n     * if distance not specified, a default of 40 will be used\n     *\n     * @param {string} nodeId the node to be focused\n     * @param {number} [distance=40] the ending distance between the camera and the node\n     * @returns {*}\n     */\n    cameraFocusOn(nodeId: string, distance: number = 40) {\n        let node = State.graph.rawGraph.getNodeAttribute(nodeId, \"_visualize\");\n        if (!(node.x && node.y && node.z)) return;\n        // Aim at node from outside it\n        const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n        this.graphDelegateMethods.cameraPosition(\n            {\n                x: node.x * distRatio,\n                y: node.y * distRatio,\n                z: node.z * distRatio,\n            }, // new position\n            { x: node.x, y: node.y, z: node.z }, // lookAt ({ x, y, z })\n            3000 // ms transition duration\n        );\n    }\n\n    ////\n\n    /**\n     * set the force inside each cluster in the ForceGraph\n     *\n     * @param {number} force the force to be set\n     * @param {number} _default default force of other links\n     */\n    updateClusterForce() {\n        this.graphDelegateMethods\n            ?.d3Force(\"link\")\n            //@ts-ignore\n            ?.distance((link: CustomLinkObject) => {\n                return link.isClusterLink\n                    ? State.css.cluster.clusterForce\n                    : State.css.cluster.normalForce;\n            });\n        this.graphDelegateMethods.d3ReheatSimulation();\n    }\n}\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport State from \"../state\";\n\nclass ComponentRef {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    static _instance: ComponentRef | null = null;\n\n    nodeDetail!: React.Component | any;\n\n    multiNodeDetail!: React.Component | any;\n\n    visualizer!: React.Component | any;\n\n    canvasDrawPanel!: React.Component | any;\n\n    clusterSplittingPanelStack!: React.Component | any;\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (ComponentRef._instance === null) {\n            let instance = new ComponentRef();\n            ComponentRef._instance = instance;\n            return instance;\n        } else {\n            return ComponentRef._instance;\n        }\n    }\n}\n\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    () => ComponentRef.instance.nodeDetail?.forceUpdate()\n);\n\nexport default ComponentRef.instance;\n","import { Attributes, EdgeKey, NodeKey } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\nimport GraphStore from \"./GraphStore\";\n\n/**\n * the wrapper mutating function that relates to the mutation of the rawGraph DS\n * all the mutation of the Graph should all go through this API rather than calling on rawGraph directly.\n *\n * @export\n * @class GraphMutation\n */\nexport default class GraphMutation {\n    constructor(_this: GraphStore) {\n        makeAutoObservable(this);\n        this.that = _this;\n    }\n\n    private that!: GraphStore;\n\n    /**\n     * add the node with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     *\n     * @param {NodeKey} node\n     * @param {Attributes} [attributes]\n     */\n    public addNode(node: NodeKey, attributes?: Attributes): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addNode(node, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * delete the node with this nodeId in the Graph and refresh the 3d Graph\n     *\n     * @param {string} nodeId\n     */\n    public dropNode(nodeId: string): void {\n        this.that.rawGraph.dropNode(nodeId);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * add the edge with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     *\n     * @param {NodeKey} source\n     * @param {NodeKey} target\n     * @param {Attributes} [attributes]\n     */\n    public addEdge(\n        source: NodeKey,\n        target: NodeKey,\n        attributes?: Attributes\n    ): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addEdge(source, target, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * delete the edge with this key in the Graph and refresh the 3d Graph\n     *\n     * @param {EdgeKey} edge\n     */\n    public dropEdge(edge: EdgeKey): void {\n        this.that.rawGraph.dropEdge(edge);\n        this.that.refreshGraph();\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { Attributes } from \"graphology-types\";\nimport {\n    createCustomNodeObject,\n    createCustomLinkObject,\n} from \"./GraphDelegate\";\nimport ComponentRef from \"../components/ComponentRef\";\nimport State from \".\";\nimport GraphMutation from \"./GraphMutation\";\n\nexport interface IMetaData {\n    snapshotName: string;\n\n    // attributes of nodes in imported graph\n    nodeProperties: string[];\n}\n\n/**\n * the class to store a raw graph as well as the related information\n \n * @export\n * @class GraphStore\n */\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.mutating = new GraphMutation(this);\n    }\n\n    /**\n     * the graphology data structure to store a graph.\n     * has a lot of APIs to manipulate as well as iterate through the graph\n     *\n     * @see graphology\n     *\n     * @type {Graph}\n     */\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: true,\n        multi: false,\n        type: \"undirected\",\n    });\n\n    /**\n     * should be called when individual nodes are added to the graph.\n\n     * add the CustomNodeObject to node attributes stored in the data structure\n     * @see CustomNodeObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} node\n     * @param {Attributes} attributes\n     */\n    decorateRawNode(node: string, attributes: Attributes) {\n        attributes._visualize = createCustomNodeObject(node, false);\n    }\n\n    /**\n     * used in \"cluster node\" in rightclick panel\n     */\n    numberOfClusters: number = 0;\n\n    /**\n     * should be called when individual edges are added to the graph.\n     *\n     * add the CustomLinkObject to node attributes stored in the data structure\n     * @see CustomLinkObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} source\n     * @param {string} target\n     * @param {Attributes} attributes\n     */\n    decorateRawEdge(source: string, target: string, attributes: Attributes) {\n        attributes._visualize = createCustomLinkObject(source, target, false);\n    }\n\n    /**\n     * should be called on every graph import\n     * add the the _visualize to every links inside the specified graph\n     *\n     * the _visualize is for storing the object to be send to front-end to render the graph\n     *\n     * @param {Graph} _rawGraph\n     * @return {*}  {Graph}\n     */\n    decorateRawGraph(_rawGraph: Graph): Graph {\n        _rawGraph.forEachNode((node, attributes) =>\n            this.decorateRawNode(node, attributes)\n        );\n\n        _rawGraph.forEachEdge((edge, attributes, source, target) =>\n            this.decorateRawEdge(source, target, attributes)\n        );\n        return _rawGraph;\n    }\n\n    /**\n     * proxy method to set the new graph\n     * if intend to set a new graph, please use this method instead of directly modify GraphStore\n     *\n     * @param {Graph} newGraph\n     * @param {IMetaData} metadata\n     */\n    public setGraph(_rawGraph: Graph, _metadata: IMetaData | null = null) {\n        this.rawGraph = this.decorateRawGraph(_rawGraph);\n        if (_metadata) {\n            this.metadata = _metadata;\n        }\n        State.interaction.flush();\n        State.cluster.clusterBy = null;\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * should be called when the graph gets updated (the data inside the graph gets updated, or the attribute to be clustered has changed)\n     *\n     * @memberof GraphStore\n     */\n    public refreshGraph() {\n        State.interaction.flush();\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * the wrapper methods to mutate the graph\n     * all the mutations of the graph should go through this API rather than calling this.rawGraph.[mutate]\n     *\n     * has basic functions like addNode, dropNode, addEdge, dropEdge...\n     *\n     * @see {GraphMutation}\n     */\n    mutating: GraphMutation;\n\n    /**\n     * if currently there is a graph in the dataset\n     *\n     * @readonly\n     */\n    get hasGraph() {\n        return this.rawGraph.order && this.rawGraph.size !== 0;\n    }\n\n    /**\n     * the metadata related to the raw graph\n     * should be updated if a new graph is imported\n     *\n     */\n    metadata: IMetaData = {\n        snapshotName: \"SNAPSHOT\",\n        nodeProperties: [],\n    };\n}\n","import { Intent, Position, Toaster } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\nimport { IMetaData } from \"./GraphStore\";\n\nexport interface INodeFileConfig {\n    // the file is successfully parsed and ready for display\n    isReady: boolean;\n    parseError: boolean;\n    path: string;\n\n    // has header at the top\n    hasHeader: boolean;\n\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n    topN: any[];\n    //names for the columns of this csv\n    columns: string[];\n    mapping: {\n        id: string;\n    };\n    delimiter: string;\n}\n\nexport interface IEdgeFileConfig {\n    isReady: boolean;\n    parseError: boolean;\n\n    // should save the csv to temp for further change the cluster attribute\n    path: string;\n    hasHeader: boolean;\n\n    // array of objects storing the\n    topN: any[];\n    columns: string[];\n    mapping: {\n        fromId: string;\n        toId: string;\n    };\n    delimiter: string;\n}\n\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    importCSVDialogOpen = false;\n    importSamplesDialogOpen = false;\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as INodeFileConfig,\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as IEdgeFileConfig,\n    };\n\n    /**\n     * read the CSV file specified by fileObject, with options defined by other paras\n     * and return a list of objects containing the key-value pair of attribute-value\n     *\n     * @param {File} fileObject\n     * @param {boolean} hasHeader\n     * @param {string} delimiter\n     * @return {*}  {Promise<Object[]>}\n     * where Object is of { attribute: number | string, anotherAttribute: number | string, ... } type\n     */\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    /**\n     * parse the graph from import GEXF file specified in selectedGEXFFileFromInput\n     * and return a Graph object\n     *\n     * @private\n     * @return {*}  {Promise<Graph>}\n     */\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, reader.result as string));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    this.isLoading = false;\n                }\n            };\n        });\n    }\n\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    /**\n     * will create a Graph structure to store the nodes and edges in the imported File\n     * should handle whether or not have the NodeFile, whether or not have the header of each file\n     * if successfully imported, change the .isReady to be true\n     *\n     * @return {*}\n     */\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: true,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            if (this.importConfig.nodeFile.hasHeader) {\n                // if has header, then tempNodes returns an array of objects\n                tempNodes = (await this.readNodeCSV()) as Object[];\n                tempNodes.forEach((node) => {\n                    let nodeId = node[config.nodeFile.mapping.id].toString();\n                    delete node[config.nodeFile.mapping.id];\n                    graph.addNode(nodeId, node);\n                });\n            } else {\n                // if no header, then tempNodes returns an array of array\n                tempNodes = (await this.readNodeCSV()) as any[][];\n                tempNodes.forEach((node) => {\n                    let nodeId = node[config.nodeFile.mapping.id].toString();\n                    let attributes = Object.assign({}, node);\n                    delete attributes[config.nodeFile.mapping.id];\n                    graph.addNode(nodeId, attributes);\n                });\n            }\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge, idx) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, {});\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, {});\n            }\n            graph.addEdgeWithKey(idx, fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            } as IMetaData,\n        };\n    }\n\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n        for (const [key] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            } as IMetaData,\n        };\n    }\n\n    /**\n     * change the importConfig.edgeFile.topN to be the top 10 parsed elements in the input edge file\n     * change the importConfig.edgeFile.columns to be the attributes of the imported edge file\n     * set the .mapping.fromId and .mapping.toId to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedEdgeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     */\n    public async renderImportEdgePreview() {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter: delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter: delimiter,\n                          });\n                    edgeFileConfig.topN = it;\n                    edgeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (edgeFileConfig.columns.length >= 2) {\n                        edgeFileConfig.mapping.fromId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                        edgeFileConfig.isReady = true;\n                    } else if (edgeFileConfig.columns.length === 1) {\n                        edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        edgeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n\n    /**\n     * change the importConfig.nodeFile.topN to be the top 10 parsed elements in the input node file\n     * change the importConfig.nodeFile.columns to be the attributes of the imported node file\n     * set the .mapping.id .mapping.cluster to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedNodeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     */\n    public async renderImportNodePreview() {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter,\n                          });\n                    nodeFileConfig.topN = it;\n                    nodeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (nodeFileConfig.columns.length >= 1) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                        nodeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        nodeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n}\n","import Graph from \"graphology\";\nimport { makeAutoObservable, observable } from \"mobx\";\n\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n\n    // if is previewing, ignore all mouse hovers detected by NodeDetailPanel because it is showing the detail of selected node\n    isPreviewing = false;\n\n    // can use defined regex\n    // id:123\n    // attr:color:red\n    searchStr = \"\";\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     * @memberof ClusterStore\n     */\n    rawGraph!: Graph;\n\n    // contains node ids\n    get candidates(): string[] {\n        let list: string[] = [];\n        let searchStrIgnoreCase = this.searchStr.toLocaleLowerCase();\n        if (searchStrIgnoreCase.match(/^id:.+/g)) {\n            const searchId = searchStrIgnoreCase.split(/^id:/g)[1].trim();\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(searchId)) {\n                    list.push(node);\n                }\n            });\n        } else if (searchStrIgnoreCase.match(/^attr:.+:.+/g)) {\n            let searchQuery = searchStrIgnoreCase\n                .split(/^attr:/g)[1]\n                .trim()\n                .split(/:/g);\n            const searchAttr = searchQuery[0].trim();\n            const searchValue = searchQuery[1].trim();\n            this.rawGraph.forEachNode((node, attributes) => {\n                if (\n                    attributes.hasOwnProperty(searchAttr) &&\n                    (attributes[searchAttr] as string)\n                        .toLocaleLowerCase()\n                        .includes(searchValue)\n                ) {\n                    list.push(node);\n                }\n            });\n        } else if (this.searchStr === \"\") {\n        } else {\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(this.searchStr)) {\n                    list.push(node);\n                }\n            });\n        }\n\n        return list;\n    }\n}\n","import { makeAutoObservable, observable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\nimport State from \".\";\n\n/**\n * all the computed values get from the rawGraph\n *\n * @export\n * @class ClusterStore\n */\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n    /**\n     * @observable\n     *\n     * attention: please use setCluster() to alter this data\n     * Specify which attribute to be clustered\n     * the default value should be null, and front-end graph will interpret this to Not-Cluster\n     *\n     *\n     */\n    clusterBy: string | null = null;\n\n    /**\n     * the setter of clusterBy\n     * will update the front-end 3d graph about the cluster changes\n     *\n     * @param {(string | null)} by\n     */\n    setCluster(to: string | null, forceUpdate: boolean = false) {\n        if (forceUpdate) {\n            this.setCluster(null);\n            this.setCluster(to);\n        } else {\n            this.clusterBy = to;\n            State.graphDelegate.clusterObject.initEmptyMapAndFusion();\n            State.graph.refreshGraph();\n            State.graph.rawGraph.setAttribute(\"default\", to);\n        }\n    }\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     */\n    rawGraph!: Graph;\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the id of a Node -> the value of the attribute specified by $clusterBy]\n     *\n     * @readonly\n     * @type {(Map<string, string | number>)}\n     */\n    get keyAttribute(): Map<string, string | number> {\n        const keyValueMap = new Map<string, string | number>();\n        if (this.clusterBy === null) {\n            return keyValueMap;\n        }\n        const attribute = this.clusterBy as string;\n\n        this.rawGraph?.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                keyValueMap.set(key, attributes[attribute]);\n            } else {\n                // this attribute is undefined in this node\n                keyValueMap.set(key, \"undefined\");\n            }\n        });\n        return keyValueMap;\n    }\n\n    /**\n     * the possible attribute values of the attribute defined by $clusterBy\n     *\n     * @readonly\n     * @type {((string | number)[])}\n     */\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> a list of Node ids]\n     *\n     * @readonly\n     * @type {(Map<string | number, string[]>)}\n     */\n    get attributeKeys(): Map<string | number, string[]> {\n        const attributeKeysMap = new Map<string | number, string[]>();\n        this.getAttributeValues.forEach((value) => {\n            attributeKeysMap.set(value, []);\n        });\n        this.keyAttribute.forEach((value, key) => {\n            attributeKeysMap.get(value)?.push(key);\n        });\n        return attributeKeysMap;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the random colour of this cluster]\n     * used to avoid re-compute the colours on every frame refresh\n     *\n     * @readonly\n     * @type {(Map<string | number, string>)}\n     */\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.forEach((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the Nodes points in that cluster]\n     * will change on every frame refresh as the Node's position keeps changing.\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Vector3[]>)}\n     */\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.forEach((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        this.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * changing the config inside .global will cause to change every config of every node iteratively\n *\n * but changing the else does not\n *\n * @class NodeGlobalConfig\n */\nclass NodeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n    defaultColor: string = \"#808080\";\n    selectedColor: string = \"#ffffAA\";\n    multiSelectedColor: string = \"white\";\n    highlightColor: string = \"#ff6060\";\n\n    resolution = 12;\n\n    size = 4;\n}\n\n/**\n * changing the config inside .global will cause to change every config of every edge iteratively\n *\n * but changing the else does not\n *\n * @class EdgeGlobalConfig\n */ class EdgeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    defaultColor = \"#ffffff\";\n\n    selectedColor = \"#ffff00\";\n    highlightColor = \"#ff8E8E\";\n\n    defaultWidth: number = 1;\n\n    highlightWidth: number = 2;\n\n    resolution = 6;\n}\nclass LabelConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    show = true;\n    color = \"#d3d3d3\";\n    size = 4;\n}\n\nclass ClusterConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    clusterForce = 20;\n    normalForce = 50;\n    resolution = 10;\n    shape: \"convexHull\" | \"sphere\" = \"convexHull\";\n}\n/**\n * the configurations to set to cascade the graph\n *\n * @export\n * @class CssStore\n */\nexport default class CssStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.node = new NodeGlobalConfig();\n        this.edge = new EdgeGlobalConfig();\n        this.label = new LabelConfig();\n        this.cluster = new ClusterConfig();\n    }\n\n    node!: NodeGlobalConfig;\n\n    edge!: EdgeGlobalConfig;\n\n    label!: LabelConfig;\n\n    cluster!: ClusterConfig;\n\n    isAnimating: boolean = true;\n}\n","import { Attributes } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\nexport default class InteractionStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    selectedNode: string | null = null;\n\n    /**\n     * the currently selected node ids\n     * the singleNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string[]}\n     */\n    selectedNodes: string[] = [];\n\n    selectedEdge: string | null = null;\n\n    selectedEdges: string[] = [];\n    /**\n     * when the menuItem 'box-select Node' of RightClickPanel is clicked, then this will be set to true,\n     *  and the component'SelectionBox' will be  visualized only the mode is 'Node Selection' and this variable is true\n     */\n    boxSelectionOpen: boolean = false;\n    /**\n     * this stores the x and y coordinates when mouse clicked down for box selection\n     */\n    boxSelection_startPoint: Attributes = {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * this stores the x and y coordinates when mouse clicked up for box selection\n     */\n    boxSelection_endPoint: Attributes = {\n        x: 0,\n        y: 0,\n    };\n\n    boxSelectNode() {\n        //clear selectedNodes\n        State.interaction.selectedNodes = [];\n\n        //calculate the box\n        let left = Math.min(\n            this.boxSelection_startPoint.x,\n            this.boxSelection_endPoint.x\n        );\n        let top = Math.min(\n            this.boxSelection_startPoint.y,\n            this.boxSelection_endPoint.y\n        );\n        let right = Math.max(\n            this.boxSelection_startPoint.x,\n            this.boxSelection_endPoint.x\n        );\n        let down = Math.max(\n            this.boxSelection_startPoint.y,\n            this.boxSelection_endPoint.y\n        );\n\n        //check which node is inside the box,if true push them into selectedNodes\n        State.graph.rawGraph.forEachNode((node, Attributes) => {\n            let coords = State.graphDelegate.graphDelegateMethods.graph2ScreenCoords(\n                Attributes._visualize.x,\n                Attributes._visualize.y,\n                Attributes._visualize.z\n            );\n            if (\n                left <= coords.x &&\n                coords.x <= right &&\n                top <= coords.y &&\n                down >= coords.y\n            ) {\n                State.interaction.selectedNodes.push(node);\n            }\n        });\n    }\n\n    /**\n     * the currently hovered node id\n     * the multiNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string}\n     */\n    currentlyHoveredNodeId: string | null = null;\n\n    /**\n     * the currently hovered node id that used for display at RightClickPanel\n     */\n\n    get currentlyHoveredNodeNeighbors(): string[] | null {\n        if (this.currentlyHoveredNodeId === null) {\n            return null;\n        } else {\n            return State.graph.rawGraph.neighbors(this.currentlyHoveredNodeId);\n        }\n    }\n\n    get currentlyHoveredNodeNeighborEdges(): string[] | null {\n        if (this.currentlyHoveredNodeId === null) {\n            return null;\n        } else {\n            return this.getNodeNeighborEdges(this.currentlyHoveredNodeId);\n        }\n    }\n\n    getNodeNeighborEdges(node: string): string[] {\n        let neighbors = State.graph.rawGraph.neighbors(node);\n        return neighbors?.map((neighbor: string) => {\n            return this.getEdgeKey(\n                neighbor,\n                this.currentlyHoveredNodeId as string\n            ) as string;\n        });\n    }\n\n    getEdgeKey(node1: string, node2: string): string | null {\n        let go: string | undefined = State.graph.rawGraph.edge(node1, node2);\n        if (go === undefined) {\n            let back: string | undefined = State.graph.rawGraph.edge(\n                node2,\n                node1\n            );\n            if (back === undefined) {\n                return null;\n            } else {\n                return back;\n            }\n        } else {\n            return go;\n        }\n    }\n\n    setNodeToDefault(node: string) {\n        this.updateNodeVisualizeAttribute(node, {\n            hovered: false,\n            selected: false,\n        });\n    }\n    /**\n     * update the _visualize object inside node attribute and calls graph refresh\n     *\n     * @param {string} id\n     * @param {Attributes} attribute\n     * @memberof GraphMutation\n     */\n    updateNodeVisualizeAttribute(\n        id: string,\n        attribute: Attributes,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getNodeAttribute(\n                id,\n                \"_visualize\"\n            );\n        }\n\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n    /**\n     * update the _visualize object inside edge attribute and calls graph refresh\n     *\n     * @param {string} id\n     * @param {Attributes} attribute\n     * @memberof GraphMutation\n     */\n    updateEdgeVisualizeAttribute(\n        key: string,\n        attribute: Attributes,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getEdgeAttribute(\n                key,\n                \"_visualize\"\n            );\n        }\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n\n    updateVisualizeAttributeParser(newAttribute: any, oldAttributes: any) {\n        if (newAttribute.hasOwnProperty(\"hovered\")) {\n            oldAttributes.hovered = newAttribute.hovered;\n        } else if (newAttribute.hasOwnProperty(\"selected\")) {\n            oldAttributes.selected = newAttribute.selected;\n        } else if (newAttribute.hasOwnProperty(\"multiSelected\")) {\n            oldAttributes.multiSelected = newAttribute.multiSelected;\n        }\n    }\n\n    // setupSelectionBox(){\n    //     let selectionBox=new THREE.Line(Rect,new THREE.LineBasicMaterial({ linewidth: 3, color: 0x999999 }));\n    // }\n\n    /**\n     * should call this on every refresh of graph DS\n     *\n     */\n    flush() {\n        this.selectedNode = null;\n        this.selectedNodes = [];\n        this.selectedEdge = null;\n        this.selectedEdges = [];\n        this.currentlyHoveredNodeId = null;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport { polygonContains } from \"d3-polygon\";\nimport State from \".\";\n\nexport default class ClusterInteractionStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n    /**\n     * the UUID of cluster Object3D\n     *\n     * @type {(string | null)}\n     */\n    currentlyHoveredClusterId: string | null = null;\n\n    selectedCluster: string | null = null;\n\n    selectedClusters: string[] = [];\n\n    flush() {\n        this.currentlyHoveredClusterId = null;\n        this.selectedCluster = null;\n        this.selectedClusters = [];\n    }\n\n    clusterLeftClickCallback(uuid: string, event: MouseEvent) {\n        State.graphDelegate.clusterObject.meshSpotlightMaterial(\n            State.graphDelegate.clusterObject.getObjectById(uuid) as THREE.Mesh\n        );\n        // multi-selection\n        let index;\n\n        State.clusterInteraction.selectedCluster = uuid;\n\n        // if already in the list of selected, remove\n        if (\n            (index = State.clusterInteraction.selectedClusters.indexOf(\n                uuid\n            )) !== -1\n        ) {\n            State.clusterInteraction.selectedClusters.splice(index, 1);\n        } else {\n            // if not in the list, add\n            State.clusterInteraction.selectedClusters.push(uuid);\n        }\n    }\n\n    clusterHoverCallback(uuid: string | null, event: MouseEvent) {\n        State.clusterInteraction.currentlyHoveredClusterId = uuid;\n    }\n\n    clusterRightClickCallback(uuid: string | null, event: MouseEvent) {\n        State.clusterInteraction.selectedCluster = uuid;\n        State.preferences.rightClickPositionX = event.x;\n        State.preferences.rightClickPositionY = event.y;\n        if (uuid) {\n            State.preferences.rightClickOn = \"Cluster\";\n        } else {\n            State.preferences.rightClickOn = \"Background\";\n        }\n        State.preferences.rightClickPanelOpen = true;\n        State.preferences.closeAllPanel(\"rightClickPanel\");\n    }\n\n    /**\n     * loop through the selected clusters and set the nodes within that cluster\n     * the newly-formed attribute is named _merge-cluster\n     * and the value to that attribute is the Time() of this time\n     * other nodes unrelated will be set to empty string in this attribute\n     *\n     */\n    mergeSelectedCluster() {\n        let date = new Date().toLocaleString(\"en\");\n        let clusterId: string = `Cluster Merged @ ${date}`;\n        if (!State.graph.metadata.nodeProperties.includes(\"_merge-cluster\")) {\n            State.graph.metadata.nodeProperties.push(\"_merge-cluster\");\n        }\n        State.graph.rawGraph.forEachNode((_, attributes) => {\n            attributes[\"_merge-cluster\"] = \"\";\n        });\n        this.selectedClusters.forEach((uuid) => {\n            const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                uuid\n            ) as string | number;\n            const keys = State.cluster.attributeKeys.get(clusterValue);\n            keys?.forEach((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(\n                    nodeId,\n                    \"_merge-cluster\",\n                    clusterId\n                );\n            });\n        });\n        State.cluster.setCluster(\"_merge-cluster\");\n        this.flush();\n    }\n\n    drawPanelActivate: boolean = false;\n\n    lineSegment!: any[];\n\n    confirmClusterSplittingTempData:\n        | {\n              [key: string]: any;\n              id: string;\n              x: number;\n              y: number;\n          }[]\n        | null = null;\n\n    computeSplitCluster() {\n        let screenCoords = [] as {\n            id: string;\n            x: number;\n            y: number;\n            [key: string]: any;\n        }[];\n        State.graph.rawGraph.forEachNode((node, attribute) => {\n            let coord = State.graphDelegate.graphDelegateMethods.graph2ScreenCoords(\n                attribute._visualize.x,\n                attribute._visualize.y,\n                attribute._visualize.z\n            );\n            screenCoords.push({ id: node, x: coord.x, y: coord.y });\n        });\n\n        let tempLineSegment: [number, number][] = this.lineSegment.map(\n            (value) => {\n                return [value.x, value.y];\n            }\n        );\n\n        screenCoords.map((value) => {\n            let inside = polygonContains(tempLineSegment, [value.x, value.y]);\n\n            if (inside) {\n                State.interaction.updateNodeVisualizeAttribute(value.id, {\n                    selected: true,\n                });\n                value[\"value\"] = 1;\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(value.id, {\n                    selected: false,\n                });\n                value[\"value\"] = 0;\n            }\n        });\n\n        State.graphDelegate.graphDelegateMethods.refresh();\n        this.confirmClusterSplittingTempData = screenCoords;\n    }\n\n    splitCluster() {\n        let date = new Date().toLocaleString(\"en\");\n        const clusterId: string = `Cluster Split @ ${date}`;\n        const anotherClusterId: string = `Another Cluster Split @ ${date}`;\n        const thisCluster = State.cluster.clusterBy;\n\n        const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n            this.selectedCluster as string\n        ) as string | number;\n        const nodesToAlter = State.cluster.attributeKeys.get(\n            clusterValue\n        ) as string[];\n        this.confirmClusterSplittingTempData?.forEach((node) => {\n            if (nodesToAlter.includes(node.id)) {\n                State.graph.rawGraph.setNodeAttribute(\n                    node.id,\n                    thisCluster as string,\n                    node[\"value\"] === 1 ? clusterId : anotherClusterId\n                );\n            }\n        });\n        this.confirmClusterSplittingTempData = null;\n        State.cluster.setCluster(thisCluster, true);\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class HelperStackPanelStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // Cluster Splitting\n\n    clusterSplittingPanelStackOpen: boolean = false;\n\n    /**\n     *\n     * can back to any step, and UI should refresh accordingly\n     *\n     * @type {(1 | 2 | 3)}\n     * @memberof HelperStackPanelStore\n     */\n    clusterSplittingCurrentStep: 1 | 2 | 3 = 1;\n\n    NodeSelectionPanelOpen: boolean = false;\n}\n","import { autorun, reaction } from \"mobx\";\n\nimport PreferencesStore, { VisualizationMode } from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\nimport CssStore from \"./CssStore\";\nimport GraphDelegate from \"./GraphDelegate\";\nimport NodeInteractionStore from \"./NodeInteractionStore\";\nimport ClusterInteractionStore from \"./ClusterInteractionStore\";\nimport HelperStackPanelStore from \"./HelperStackPanelStore\";\nimport ComponentRef from \"../components/ComponentRef\";\n\nclass AppState {\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    graphDelegate!: GraphDelegate;\n    interaction!: NodeInteractionStore;\n    clusterInteraction!: ClusterInteractionStore;\n    import!: ImportStore;\n    search!: SearchStore;\n    cluster!: ClusterStore;\n    helper!: HelperStackPanelStore;\n    css!: CssStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.graphDelegate = new GraphDelegate();\n        this.interaction = new NodeInteractionStore();\n        this.clusterInteraction = new ClusterInteractionStore();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.cluster = new ClusterStore();\n        this.helper = new HelperStackPanelStore();\n        this.css = new CssStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// this is for easily debugging in runtime\n//@ts-ignore\nwindow._state = State;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\n// sync the rawGraph bi-directionally\nautorun(\n    () =>\n        (State.cluster.rawGraph = State.search.rawGraph = State.graph.rawGraph)\n);\n\n// set the graph to suspend animating according to State.css.isAnimating\nautorun(() => {\n    if (State.css.isAnimating === true) {\n        State.graphDelegate.graphDelegateMethods?.resumeAnimation();\n    } else {\n        State.graphDelegate.graphDelegateMethods?.pauseAnimation();\n    }\n});\n\n// if cluster selected, goto step 2\nautorun(() => {\n    if (\n        State.preferences.visualizationMode ===\n        VisualizationMode.ClusterSplitting\n    ) {\n        if (State.clusterInteraction.selectedCluster) {\n            State.helper.clusterSplittingCurrentStep = 2;\n            State.clusterInteraction.drawPanelActivate = true;\n            console.log(\"cluster selected\");\n        }\n    }\n});\n\n// the preparation and cleaning when changing of Step\nreaction(\n    () => State.helper.clusterSplittingCurrentStep,\n    (step) => {\n        console.log(`Graph Splitting change to step ${step}`);\n        switch (step) {\n            case 1:\n                State.clusterInteraction.confirmClusterSplittingTempData = null;\n                State.interaction.flush();\n                State.clusterInteraction.flush();\n                State.graphDelegate.graphDelegateMethods.refresh();\n                break;\n\n            case 2:\n                ComponentRef?.canvasDrawPanel.clearDrawing();\n                State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n                    State.interaction.updateNodeVisualizeAttribute(\n                        node,\n                        { selected: false },\n                        oldAttributes._visualize\n                    );\n                });\n                State.clusterInteraction.confirmClusterSplittingTempData = null;\n                State.interaction.flush();\n                State.graphDelegate.graphDelegateMethods.refresh();\n\n                break;\n\n            case 3:\n                break;\n        }\n    }\n);\n\n// if graph is empty, suspend the animation to save computing power\nreaction(\n    () => State.graph.rawGraph?.order,\n    (number) => {\n        if (number === 0) {\n            State.css.isAnimating = false;\n            console.log(\"Pause Animating\");\n        } else {\n            State.css.isAnimating = true;\n            console.log(\"Resume Animating\");\n        }\n    },\n    { fireImmediately: true }\n);\n\n// auto highlight the hovered Cluster\nreaction(\n    () => State.clusterInteraction.currentlyHoveredClusterId,\n    (currentlyHoveredClusterId) => {\n        console.log(\"currentlyHoveredNodeId\", currentlyHoveredClusterId);\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto highlight the selected Cluster\nreaction(\n    () => State.clusterInteraction.selectedCluster,\n    (selectedCluster) => {\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto highlight the selected Clusters\nreaction(\n    () => State.clusterInteraction.selectedClusters,\n    (selectedClusters) => {\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto highlight the hovered Node\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    (currentlyHoveredNodeId) => {\n        console.log(\"currentlyHoveredNodeId\", currentlyHoveredNodeId);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (node === currentlyHoveredNodeId) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (\n                State.interaction.currentlyHoveredNodeNeighborEdges?.includes(\n                    edge\n                )\n            ) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto highlight the selected nodes\nreaction(\n    () => State.interaction.selectedNodes.map((node) => node),\n    (selectedNodes) => {\n        console.log(\"selectedNodes\", selectedNodes);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNodes.includes(node)) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { multiSelected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { multiSelected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto highlight the selected node\nreaction(\n    () => State.interaction.selectedNode,\n    (selectedNode) => {\n        console.log(\"selectedNode\", selectedNode);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNode === node) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto highlight the selected edges\nreaction(\n    () => State.interaction.selectedEdge,\n    (selectedEdge) => {\n        console.log(\"selectedEdge\", selectedEdge);\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (selectedEdge === edge) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { selected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { selected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\nexport default State;\n","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { copy } from \"copy-anything\";\n\ninterface Props {\n    /**\n     * whether or not to show the None\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    showNone: boolean;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * if None is selected, the item props will be set to null\n     *\n     * @memberof Props\n     */\n    onSelect: (item: string | null) => void;\n\n    /**\n     * the selected to display will sync with this props\n     *\n     * @type {(string | null)}\n     * @memberof Props\n     */\n    syncWith: string | null;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\n/**\n * this component can be used to choose the attribute among all the attributes, with addition none to choose (can be toggled to off)\n * to use it, you have to specify whether to add additional None to the list and onChange function to call when a candidate is selected\n */\nexport default observer(\n    class ClusterChooser extends React.Component<Props, {}> {\n        static defaultProps = {\n            showNone: true,\n        };\n\n        get fullProperties(): string[] {\n            let propertiesWithNone = copy(State.graph.metadata.nodeProperties);\n            propertiesWithNone.unshift(\"None\");\n            return propertiesWithNone;\n        }\n\n        itemRenderer = (\n            item: any,\n            props: CustomIItemRendererProps\n        ): JSX.Element | null => {\n            if (item === \"None\") {\n                return (\n                    <MenuItem\n                        intent=\"primary\"\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            } else {\n                return (\n                    <MenuItem\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            }\n        };\n\n        render() {\n            return (\n                <Select\n                    items={\n                        this.props.showNone\n                            ? this.fullProperties\n                            : State.graph.metadata.nodeProperties\n                    }\n                    itemRenderer={this.itemRenderer}\n                    filterable={false}\n                    onItemSelect={(item: string) => {\n                        let selected = item === \"None\" ? null : item;\n                        this.props.onSelect(selected);\n                    }}\n                >\n                    <Button\n                        text={this.props.syncWith ?? this.fullProperties[0]}\n                    />\n                </Select>\n            );\n        }\n    }\n);\n","export default __webpack_public_path__ + \"static/media/logo.25a51149.png\";","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { ItemPredicate, Select } from \"@blueprintjs/labs\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    items: any[];\n    onSelect: (\n        item: any,\n        event?: React.SyntheticEvent<HTMLElement, Event> | undefined\n    ) => void;\n    text: string;\n    small: boolean;\n    search: boolean;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\nexport function CommonItemRenderer(\n    item: any,\n    props: CustomIItemRendererProps\n): JSX.Element | null {\n    return <MenuItem key={item} onClick={props.handleClick} text={item} />;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        static defaultProps = {\n            small: false,\n            search: false,\n        };\n\n        itemPredicate: ItemPredicate<string> = (\n            query: string,\n            object: string\n        ) => {\n            return object.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n        };\n        render() {\n            if (this.props.search) {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemPredicate={this.itemPredicate}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={true}\n                        onItemSelect={this.props.onSelect}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            } else {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={false}\n                        onItemSelect={this.props.onSelect}\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            }\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    ButtonGroup,\n    Classes,\n    Menu,\n    MenuDivider,\n    MenuItem,\n    Popover,\n    Position,\n    Switch,\n} from \"@blueprintjs/core\";\nimport ClusterChooser from \"./utils/ClusterChooser\";\nimport logo from \"../images/logo.png\";\nimport State from \"../state\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\nimport ComponentRef from \"./ComponentRef\";\n\nexport default observer(\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <nav className={classnames([Classes.NAVBAR])}>\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_LEFT,\n                        ])}\n                    >\n                        <img\n                            title=\"PiperNet\"\n                            id=\"PiperNet Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                            alt=\"PiperNet Logo\"\n                        />\n                        <div className={classnames([Classes.NAVBAR_HEADING])}>\n                            {\" \"}\n                            PiperNet{\" \"}\n                        </div>\n\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Load Sample\"\n                                        icon=\"graph\"\n                                        onClick={() => {\n                                            State.import.importSamplesDialogOpen = true;\n                                        }}\n                                    >\n                                        {/* {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        disabled={true}\n                                                        onClick={() => {\n                                                            fetchSampleGraph(\n                                                                sampleSnapshotUrl\n                                                            ).then((file) => {\n                                                                State.import.selectedGEXFFileFromInput = file;\n                                                                State.import\n                                                                    .importGraphFromGEXF()\n                                                                    .then(\n                                                                        (\n                                                                            res\n                                                                        ) => {\n                                                                            State.graph.rawGraph =\n                                                                                res.graph;\n                                                                            State.graph.metadata =\n                                                                                res.metadata;\n                                                                        }\n                                                                    );\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )} */}\n                                    </MenuItem>\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from CSV...\"\n                                        onClick={() => {\n                                            State.import.importCSVDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from GEXF...\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Export Graph\"\n                                        onClick={() => {\n                                            State.preferences.exportDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"document\"\n                            >\n                                Graph\n                            </Button>\n                        </Popover>\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Node DataSheet\"\n                                        icon=\"ungroup-objects\"\n                                        onClick={() => {\n                                            State.preferences.nodeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Edge DataSheet\"\n                                        icon=\"link\"\n                                        onClick={() => {\n                                            State.preferences.edgeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    {/* <MenuItem\n                                        text=\"Statistics\"\n                                        icon=\"timeline-bar-chart\"\n                                        onClick={() => {\n                                            State.preferences.statisticsDialogOpen = true;\n                                        }}\n                                    /> */}\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"wrench\"\n                            >\n                                Tools\n                            </Button>\n                        </Popover>\n                        <Switch\n                            label=\"Graph Animation\"\n                            checked={State.css.isAnimating}\n                            onChange={() =>\n                                (State.css.isAnimating = !State.css.isAnimating)\n                            }\n                        />\n                    </div>\n                    {/* <div\n                    className={classnames([\n                        Classes.NAVBAR_GROUP,\n                        Classes.ALIGN_LEFT,\n                    ])}\n                >\n                    <span className={Classes.NAVBAR_DIVIDER} />\n                    {appState.graph.hasGraph && appState.graph.frame && (\n                        <div style={{ display: \"inline\" }}>\n                            <Tooltip\n                                content={\n                                    appState.graph.frame.paused\n                                        ? \"Resume Layout Algorithm\"\n                                        : \"Pause Layout Algorithm\"\n                                }\n                                position={Position.BOTTOM}\n                            >\n                                <Button\n                                    className={classnames([\n                                        Classes.BUTTON,\n                                        Classes.MINIMAL,\n                                    ])}\n                                    icon={\n                                        appState.graph.frame.paused\n                                            ? \"play\"\n                                            : \"pause\"\n                                    }\n                                    text={\n                                        appState.graph.frame.paused\n                                            ? \"Resume Layout\"\n                                            : \"Pause Layout\"\n                                    }\n                                    onClick={() => {\n                                        if (appState.graph.frame.paused) {\n                                            appState.graph.frame.resumeLayout();\n                                            this.forceUpdate();\n                                        } else {\n                                            appState.graph.frame.pauseLayout();\n                                            this.forceUpdate();\n                                        }\n                                    }}\n                                />\n                            </Tooltip>\n                        </div>\n                    )}\n                </div> */}\n                    <ButtonGroup>\n                        {/* <SimpleSelect\n                            className={classnames([Classes.ALERT_CONTENTS])}\n                            items={[\"3D\", \"2D\"]}\n                            value={State.preferences.view}\n                            onSelect={(it) => (State.preferences.view = it)}\n                        />\n                        <Divider /> */}\n                    </ButtonGroup>\n\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_RIGHT,\n                        ])}\n                    >\n                        Clustered by\n                        <ClusterChooser\n                            onSelect={(cluster) => {\n                                State.cluster.setCluster(cluster);\n                            }}\n                            syncWith={State.cluster.clusterBy}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <SimpleSelect\n                            items={[\"trackball\", \"orbit\", \"fly\"]}\n                            text={State.preferences.controlType}\n                            onSelect={(it) => {\n                                State.preferences.controlType = it;\n                                ComponentRef.visualizer.updateVisualizationGraph();\n                            }}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"cog\"\n                            disabled={true}\n                            onClick={() => {\n                                State.preferences.preferenceDialogOpen = true;\n                            }}\n                        />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"code\"\n                            onClick={() => {\n                                window.open(\n                                    \"https://github.com/grp202004/PiperNet\"\n                                );\n                            }}\n                        />\n                    </div>\n                </nav>\n            );\n        }\n    }\n);\n","import React, { ReactNode } from \"react\";\nimport { Button, Card, Classes, Collapse, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    name: string;\n    isOpen: boolean;\n    onToggle: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n    children: ReactNode;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Card elevation={Elevation.THREE}>\n                    <Button\n                        className={classnames(\n                            Classes.LARGE,\n                            Classes.FILL,\n                            \"text-align-left\"\n                        )}\n                        rightIcon={\n                            this.props.isOpen ? \"chevron-up\" : \"chevron-down\"\n                        }\n                        onClick={this.props.onToggle}\n                    >\n                        {this.props.name}\n                    </Button>\n                    <Collapse isOpen={this.props.isOpen}>\n                        {this.props.children}\n                    </Collapse>\n                </Card>\n            );\n        }\n    }\n);\n","import convert from \"xml-js\";\n\nexport const GITHUB_URL = \"\";\n\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\n    [\n        \"Les Miserables\",\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\n    ],\n    [\"COVID-19 Citation Graph 06-02\", \"../samples/json/a.json\"],\n];\n\nexport async function fetchSampleGraph(url: string) {\n    try {\n        let response = await fetch(url, { mode: \"no-cors\" });\n        let gexfJson = await response.json();\n        return new File([convert.json2xml(gexfJson)], \"sample.gexf\", {\n            type: \"text/xml\",\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\nexport const ONLY_EDGE_FILE = \"only edges file\";\n\nexport const COLOR_LIST = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32,\n};\n","import React from \"react\";\nimport {\n    Button,\n    Callout,\n    Classes,\n    Dialog,\n    Divider,\n    FileInput,\n    Intent,\n    Spinner,\n    Switch,\n    Tag,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\n\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../../constants\";\nimport { IEdgeFileConfig, INodeFileConfig } from \"../../state/ImportStore\";\n\ninterface PreviewTableProps {\n    file: INodeFileConfig | IEdgeFileConfig;\n}\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component<PreviewTableProps, {}> {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top {this.file.topN.length} rows of the\n                        selected file are displayed.\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    class ImportCSVDialog extends React.Component {\n        state = {\n            loading: false,\n            available: ONLY_EDGE_FILE,\n            nodesOpen: true,\n            edgesOpen: true,\n            delimiter: \",\",\n        };\n\n        // determine if this state is importable\n        canImport = () => {\n            if (this.state.available === NODE_AND_EDGE_FILE) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else if (this.state.available === ONLY_EDGE_FILE) {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n            return false;\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            // show blank if node file not relevant\n            if (this.state.available === ONLY_EDGE_FILE) {\n                return null;\n            }\n\n            return (\n                <Collapsable\n                    name=\"Nodes\"\n                    isOpen={this.state.nodesOpen}\n                    onToggle={() =>\n                        this.setState({ nodesOpen: !this.state.nodesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.nodeFileName}\n                                onInputChange={(event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    if (\n                                        !target.files ||\n                                        target.files.length < 1\n                                    ) {\n                                        return;\n                                    }\n                                    State.import.nodeFileName =\n                                        target.files[0].name;\n                                    // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                    State.import.selectedNodeFileFromInput =\n                                        target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                text={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <Collapsable\n                    name=\"Edges\"\n                    isOpen={this.state.edgesOpen}\n                    onToggle={() =>\n                        this.setState({ edgesOpen: !this.state.edgesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.edgeFileName}\n                                onInputChange={(event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    if (\n                                        !target.files ||\n                                        target.files.length < 1\n                                    ) {\n                                        return;\n                                    }\n                                    State.import.edgeFileName =\n                                        target.files[0].name;\n                                    State.import.selectedEdgeFileFromInput =\n                                        target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />{\" \"}\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderDelimiterSelection() {\n            return (\n                <div>\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        text={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter === \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter === \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    style={{ minWidth: \"80vw\" }}\n                    icon=\"import\"\n                    isOpen={State.import.importCSVDialogOpen}\n                    onClose={() => {\n                        State.import.importCSVDialogOpen = false;\n                    }}\n                    title=\"Import CSV\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div>\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"import-dialog\"\n                                )}\n                            >\n                                I have:\n                                <SimpleSelect\n                                    items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\n                                    text={this.state.available}\n                                    onSelect={(targetValue) => {\n                                        State.import.importConfig.hasNodeFile = !(\n                                            targetValue === ONLY_EDGE_FILE\n                                        );\n                                        this.setState({\n                                            available: targetValue,\n                                        });\n                                    }}\n                                />\n                                <Divider />\n                                {this.renderNodesSelection()}\n                                <br />\n                                {this.renderEdgesSelection()}\n                                <br />\n                                {this.renderDelimiterSelection()}\n                            </div>\n                            <div className={Classes.DIALOG_FOOTER}>\n                                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                    <Button\n                                        className={classnames({\n                                            [Classes.DISABLED]: !this.canImport(),\n                                        })}\n                                        intent={Intent.PRIMARY}\n                                        onClick={() => {\n                                            State.import.isLoading = true;\n                                            State.import\n                                                .importGraphFromCSV()\n                                                .then((res) => {\n                                                    State.graph.setGraph(\n                                                        res.graph,\n                                                        res.metadata\n                                                    );\n\n                                                    State.import.isLoading = false;\n                                                    State.import.importCSVDialogOpen = false;\n                                                });\n                                        }}\n                                        text=\"Import\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    FileInput,\n    Intent,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\nexport default observer(\n    class ImportGEXFDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <Button\n                            className={classnames({\n                                [Classes.DISABLED]: !this.state.fileIsSelect,\n                            })}\n                            intent={Intent.PRIMARY}\n                            onClick={() => {\n                                State.import.isLoading = true;\n                                State.import\n                                    .importGraphFromGEXF()\n                                    .then((res) => {\n                                        State.graph.setGraph(\n                                            res.graph,\n                                            res.metadata\n                                        );\n\n                                        if(State.cluster.rawGraph.hasAttribute('default')){\n                                            State.cluster\n                                            .setCluster(State.graph.rawGraph.getAttribute('default'));\n                                        }\n\n                                        State.import.isLoading = false;\n                                        State.import.importGEXFDialogOpen = false;\n                                    });\n                            }}\n                            text=\"Import\"\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"import\"\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;       \n                    }}\n                    title=\"Import GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <div\n                                    className={classnames(\n                                        Classes.CONTROL_GROUP\n                                    )}\n                                >\n                                    <div\n                                        className={classnames(\n                                            Classes.INPUT_GROUP,\n                                            Classes.FILL\n                                        )}\n                                    >\n                                        <FileInput\n                                            text={State.import.gexfFileName}\n                                            onInputChange={(event) => {\n                                                let target = event.target as HTMLInputElement;\n                                                if (\n                                                    !target.files ||\n                                                    target.files.length < 1\n                                                ) {\n                                                    return;\n                                                }\n                                                State.import.gexfFileName =\n                                                    target.files[0].name;\n                                                // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                                State.import.selectedGEXFFileFromInput =\n                                                    target.files[0];\n\n                                                this.setState({\n                                                    fileIsSelect: true,\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Card,\n    Classes,\n    Dialog,\n    Divider,\n    Elevation,\n    H3,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport gexf from \"graphology-gexf/browser\";\nimport State from \"../../state\";\nimport { CSVLink } from \"react-csv\";\n\nexport default observer(\n    class ExportDialog extends React.Component {\n        state = {\n            ready: true,\n        };\n\n        /**\n         * compute the GEXF file from rawGraph\n         * delete the temporary _visualize attribute from the graph\n         *\n         * @returns {*}\n         */\n        computeGEXFFile() {\n            let graphCopy = State.graph.rawGraph.copy();\n            graphCopy.forEachNode((_node, attributes: any) => {\n                delete attributes[\"_visualize\"];\n            });\n            graphCopy.forEachEdge((_edge, attributes: any) => {\n                delete attributes[\"_visualize\"];\n            });\n            return gexf.write(graphCopy);\n        }\n\n        computeNodeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [];\n            headers.push({ label: \"_id\", key: \"_id\" });\n            State.graph.metadata.nodeProperties.map((value) => {\n                headers.push({ label: value, key: value });\n                return null;\n            });\n            \n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.nodes.forEach((node) => {\n                data.push({\n                    _id: node.key,\n                    ...node.attributes,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        computeEdgeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [\n                { label: \"source\", key: \"source\" },\n                { label: \"target\", key: \"target\" },\n            ];\n\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.edges.forEach((edge) => {\n                data.push({\n                    source: edge.source,\n                    target: edge.target,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"projects\"\n                    isOpen={State.preferences.exportDialogOpen}\n                    onClose={() => {\n                        State.preferences.exportDialogOpen = false;\n                    }}\n                    title={`Export Graph`}\n                >\n                    {!this.state.ready ? (\n                        <Spinner />\n                    ) : (\n                        <div className={classnames(Classes.DIALOG_BODY)}>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    GEXF Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://gephi.org/gexf/format/\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n                                <Divider />\n\n                                <CSVLink\n                                    data={this.computeGEXFFile()}\n                                    filename={\"Snapshot-GEXF.gexf\"}\n                                    className=\"btn btn-primary\"\n                                    target=\"_blank\"\n                                >\n                                    <Button>Download GEXF File</Button>\n                                </CSVLink>\n                            </Card>\n                            <br />\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    CSV Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://github.com/grp202004/PiperNet#data-import\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n\n                                <Divider />\n                                <ButtonGroup>\n                                    <CSVLink\n                                        data={this.computeNodeFile().data}\n                                        headers={this.computeNodeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Node.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Node File</Button>\n                                    </CSVLink>\n                                    <Divider />\n                                    <CSVLink\n                                        data={this.computeEdgeFile().data}\n                                        headers={this.computeEdgeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Edge.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Edge File</Button>\n                                    </CSVLink>\n                                </ButtonGroup>\n                            </Card>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Dialog } from \"@blueprintjs/core\";\nimport { Column, Table, TableLoadingOption } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\ninterface Props {\n    for: string;\n    children: React.ReactNode;\n}\n\nexport default observer(\n    class DataSheetDialogWrapper extends React.Component<Props, {}> {\n        state = {\n            loading: true,\n        };\n\n        renderTable() {\n            if (this.state.loading) {\n                return (\n                    <div className=\"argo-table-container\">\n                        <Table\n                            className=\"pt-bordered pt-striped\"\n                            numRows={20}\n                            loadingOptions={[\n                                TableLoadingOption.CELLS,\n                                TableLoadingOption.COLUMN_HEADERS,\n                                TableLoadingOption.ROW_HEADERS,\n                            ]}\n                        >\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                        </Table>\n                    </div>\n                );\n            } else {\n                return this.props.children;\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"database\"\n                    isOpen={\n                        this.props.for === \"node\"\n                            ? State.preferences.nodeDataSheetDialogOpen\n                            : State.preferences.edgeDataSheetDialogOpen\n                    }\n                    onOpened={() => {\n                        setTimeout(() => {\n                            this.setState({\n                                loading: false,\n                            });\n                        }, 100);\n                    }}\n                    onClose={() => {\n                        if (this.props.for === \"node\") {\n                            State.preferences.nodeDataSheetDialogOpen = false;\n                        } else {\n                            State.preferences.edgeDataSheetDialogOpen = false;\n                        }\n                        this.setState({\n                            loading: true,\n                        });\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        {this.renderTable()}\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import { Attributes } from \"graphology-types\";\nimport React from \"react\";\n\n/** Event handler that exposes the target element's value as a boolean. */\nexport function handleBooleanChange(handler: (checked: boolean) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).checked);\n}\n\n/** Event handler that exposes the target element's value as a string. */\nexport function handleStringChange(handler: (value: string) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).value);\n}\n\n/** Event handler that exposes the target element's value as an inferred generic type. */\nexport function handleValueChange<T>(handler: (value: T) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler(((event.target as HTMLInputElement).value as unknown) as T);\n}\n\n/** Event handler that exposes the target element's value as a number. */\nexport function handleNumberChange(handler: (value: number) => void) {\n    return handleStringChange((value) => handler(+value));\n}\n\nexport function stringifyNodeDetail(attributes: Attributes): string {\n    let res = \"\";\n    for (var attribute in attributes) {\n        if (\n            attributes.hasOwnProperty(attribute) &&\n            attribute !== \"_visualize\" &&\n            attribute !== \"_options\"\n        ) {\n            res += attribute + \" : \" + attributes[attribute] + \" ; \";\n        }\n    }\n\n    return res;\n}\n\nexport function parseNumberOrString(value: string): string | number {\n    let numberVal = Number(value);\n    if (isNaN(numberVal)) {\n        return value;\n    } else {\n        return numberVal;\n    }\n}\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Code,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    EditableCell,\n    ICellRenderer,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport {\n    handleStringChange,\n    parseNumberOrString,\n    stringifyNodeDetail,\n} from \"../utils/InputFormUtils\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\n\nlet GraphNodeTable = observer(\n    class GraphNodeTable extends React.Component {\n        state = {\n            filterQuery: \"\",\n            addNodeDialogOpen: false,\n            deleteAlertOpen: false,\n            nodeToDelete: null as SerializedNode | null,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedNode[] = [];\n            State.graph.rawGraph.export().nodes.forEach((node) => {\n                if (\n                    node.key\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(node);\n                }\n            });\n            return newTable;\n        }\n\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        renderColumns: any = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it !== \"_options\") {\n                    return (\n                        <Column\n                            name={it}\n                            cellRenderer={(\n                                rowIndex: number,\n                                columnIndex: number\n                            ) => this.renderCell(rowIndex, it)}\n                        />\n                    );\n                }\n                return null;\n            });\n            return columns.filter((element) => {\n                return element !== undefined;\n            });\n        };\n\n        renderCell = (rowIndex: number, attribute: string) => {\n            let cellAttributes = this.filteredTable[rowIndex].attributes!!;\n            let cell = cellAttributes[attribute];\n\n            return (\n                <EditableCell\n                    value={cell}\n                    onChange={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    onConfirm={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    tooltip={cell}\n                />\n            );\n        };\n\n        // if the input is a number in string, it will convert the string into number to store\n        setValue = (value: string, rowIndex: number, attribute: string) => {\n            let id = this.filteredTable[rowIndex].key;\n            State.graph.rawGraph.setNodeAttribute(\n                id,\n                attribute,\n                parseNumberOrString(value)\n            );\n        };\n\n        deleteNodeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                nodeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteNodeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropNode(\n                            this.state.nodeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                    style={{ minWidth: \"60vw\" }}\n                >\n                    <p>\n                        Are you sure you want to delete the node with ID{\" \"}\n                        <Code>{this.state.nodeToDelete?.key}</Code> with\n                        attributes:\n                        <Code>\n                            {stringifyNodeDetail(\n                                this.state.nodeToDelete\n                                    ?.attributes as Attributes\n                            )}\n                        </Code>\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <Callout\n                        title={\n                            \"Try to click on a cell and type in something...\"\n                        }\n                        intent=\"primary\"\n                        icon=\"edit\"\n                    >\n                        The corresponding value of a node's attribute can be\n                        modified by clicking the cell and type in\n                    </Callout>\n\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() => {\n                                State.preferences.AddNodeDialogOpen = true;\n                            }}\n                            icon=\"new-object\"\n                            intent=\"primary\"\n                            text=\"Add Node\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Node...\"\n                            value={this.state.filterQuery}\n                            fill={true}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n\n                    <Table\n                        className=\"argo-table\"\n                        defaultRowHeight={30}\n                        numRows={this.filteredTable.length}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteNodeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"ID\"\n                            //@ts-ignore\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.filteredTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                    {this.deleteNodeAlert()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class NodeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"node\">\n                    <GraphNodeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, FormGroup, MenuItem, Tooltip } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { stringifyNodeDetail } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the text to be shown above the selectButton\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    text: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * the {nodeId} is the id of the selected node\n     *\n     * @memberof Props\n     */\n    onChange: (nodeId: string) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class NodeChooser extends React.Component<Props, {}> {\n        state = {\n            select: \"Choose \" + this.props.text,\n        };\n\n        render() {\n            return (\n                <FormGroup\n                    label={this.props.text}\n                    labelFor=\"text-input\"\n                    labelInfo=\"(required)\"\n                >\n                    <Select\n                        filterable={true}\n                        items={State.graph.rawGraph.export().nodes}\n                        itemPredicate={(\n                            query: string,\n                            item: SerializedNode<Attributes>\n                        ) => {\n                            return item.key.includes(query);\n                        }}\n                        itemRenderer={(item: SerializedNode<Attributes>) => {\n                            return (\n                                <Tooltip\n                                    content={stringifyNodeDetail(\n                                        item.attributes ?? {}\n                                    )}\n                                >\n                                    <MenuItem\n                                        key={item.key}\n                                        text={item.key}\n                                        onClick={() => {\n                                            let key = item.key;\n                                            this.setState({ select: key });\n                                            this.props.onChange(key);\n                                        }}\n                                    />\n                                </Tooltip>\n                            );\n                        }}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                        onItemSelect={() => {}}\n                    >\n                        <Button\n                            text={this.state.select}\n                            rightIcon=\"double-caret-vertical\"\n                        />\n                    </Select>\n                </FormGroup>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Code,\n    Dialog,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport { Attributes, SerializedEdge } from \"graphology-types\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\nimport NodeChooser from \"../utils/NodeChooser\";\n\nlet GraphEdgeTable = observer(\n    class GraphEdgeTable extends React.Component {\n        state = {\n            addEdgeDialogOpen: false,\n            deleteAlertOpen: false,\n            edgeToDelete: null as null | SerializedEdge<Attributes>,\n            filterQuery: null as null | string,\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedEdge<Attributes>[] = [];\n            State.graph.rawGraph.export().edges.forEach((edge) => {\n                if (\n                    !this.state.filterQuery ||\n                    edge.source\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    edge.target\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(edge);\n                }\n            });\n            return newTable;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(\n                            this.state.edgeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.key}</Code> from Node ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.source}</Code> to Node\n                        ID <Code>{this.state.edgeToDelete?.target}</Code>. This\n                        action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        addEdgeDialog = () => {\n            return (\n                <Dialog\n                    isOpen={this.state.addEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => this.setState({ addEdgeDialogOpen: false })}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() =>\n                                    this.setState({ addEdgeDialogOpen: false })\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.setState({ addEdgeDialogOpen: false });\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() =>\n                                this.setState({ addEdgeDialogOpen: true })\n                            }\n                            icon=\"new-link\"\n                            intent=\"primary\"\n                            text=\"Add Edge\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Source or Target of an Edge...\"\n                            value={this.state.filterQuery ?? \"\"}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n                    <Table\n                        className=\"argo-table\"\n                        numRows={this.filteredTable.length}\n                        defaultRowHeight={30}\n                        renderMode={RenderMode.NONE}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteEdgeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"Source\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].source}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                        <Column\n                            name=\"Target\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].target}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                    </Table>\n                    {this.deleteEdgeAlert()}\n                    {this.addEdgeDialog()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class EdgeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"edge\">\n                    <GraphEdgeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import {\n    Button,\n    Card,\n    Elevation,\n    FormGroup,\n    H5,\n    InputGroup,\n    Tooltip,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport State from \"../../state\";\nimport { Attributes } from \"graphology-types\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * function to call when a new node is successfully added\n     * the {nodeId} is the id of the newly added node, {attributes} is the attributes of the newly added node\n     *\n     * @memberof Props\n     */\n    onAdded: (nodeId: string, attributes: Attributes) => void;\n}\n\nexport default observer(\n    class NodeAdder extends React.Component<Props, {}> {\n        state = {\n            newNodeId: \"\",\n            attributes: {} as Attributes,\n        };\n\n        get canImport() {\n            return (\n                !State.graph.rawGraph.hasNode(this.state.newNodeId) &&\n                this.state.newNodeId !== \"\"\n            );\n        }\n\n        canImportTag = () => {\n            return this.canImport ? (\n                <Tooltip\n                    content={\n                        \"This Node Id is not used by any existing node yet\"\n                    }\n                    intent=\"success\"\n                >\n                    <Button icon=\"tick\" intent=\"success\" minimal={true} />\n                </Tooltip>\n            ) : (\n                <Tooltip\n                    content={\n                        \"This Node Id is currently in use by other nodes, try with another one instead\"\n                    }\n                    intent=\"warning\"\n                >\n                    <Button icon=\"cross\" intent=\"warning\" minimal={true} />\n                </Tooltip>\n            );\n        };\n\n        renderAttributesForm = (attributes: string[]) => {\n            return attributes.map((attribute) => {\n                if (attribute !== \"_options\" && attribute !== \"_visualize\") {\n                    return (\n                        <FormGroup label={attribute}>\n                            <InputGroup\n                                asyncControl={true}\n                                placeholder={\n                                    \"Enter the value for attribute: \" +\n                                    attribute\n                                }\n                                onChange={handleStringChange((value) => {\n                                    let newValue = this.state.attributes;\n                                    newValue[attribute] = parseNumberOrString(\n                                        value\n                                    );\n                                    this.setState({ attributes: newValue });\n                                })}\n                                value={this.state.attributes[attribute]}\n                            />\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        };\n\n        render() {\n            return (\n                <Card elevation={Elevation.ONE}>\n                    <FormGroup label=\"New Node ID\" labelInfo=\"(required)\">\n                        <InputGroup\n                            autoFocus={true}\n                            asyncControl={true}\n                            placeholder=\"Enter the new Node Id...\"\n                            intent={this.canImport ? \"success\" : \"warning\"}\n                            rightElement={this.canImportTag()}\n                            onChange={handleStringChange((value) =>\n                                this.setState({ newNodeId: value })\n                            )}\n                            value={this.state.newNodeId}\n                        />\n                    </FormGroup>\n                    <Card elevation={Elevation.ONE}>\n                        <H5>Attributes</H5>\n                        {this.renderAttributesForm(\n                            State.graph.metadata.nodeProperties\n                        )}\n                    </Card>\n                    <hr />\n                    <Button\n                        intent=\"primary\"\n                        onClick={() => {\n                            State.graph.decorateRawNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.graph.mutating.addNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            this.props.onAdded(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.preferences.AddNodeDialogOpen = false;\n                            // State.preferences.rightClickBackgroundPanelOpen = false;\n                            // this.forceUpdate();\n                            // State.graphDelegate.cameraFocusOn(this.state.newNodeId);\n                        }}\n                        disabled={!this.canImport}\n                    >\n                        Confirm\n                    </Button>\n                </Card>\n            );\n        }\n        componentDidMount = () => {\n            State.graph.metadata.nodeProperties.forEach((prop) => {\n                let newValue = this.state.attributes;\n                newValue[prop] = \"\";\n                this.setState({ attributes: newValue });\n            });\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Classes, Dialog, Tag } from \"@blueprintjs/core\";\nimport NodeAdder from \"../utils/NodeAdder\";\nimport State from \"../../state\";\n\nexport default observer(\n    class AddNodeDialog extends React.Component {\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddNodeDialogOpen}\n                    icon=\"new-object\"\n                    onClose={() => {\n                        State.preferences.AddNodeDialogOpen = false;\n                    }}\n                    title=\"Add Node\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add node with unique node id to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> node means there should only exist\n                            one node that has the respective node id.\n                        </p>\n                        <Tag>New edges are added to the end of the table</Tag>\n                        <hr />\n                        <NodeAdder\n                            onAdded={() => {\n                                this.setState({ addNodeDialogOpen: false });\n                                this.forceUpdate();\n                            }}\n                        />\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Dialog,\n    Divider,\n    Intent,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport NodeChooser from \"../utils/NodeChooser\";\nexport default observer(\n    class AddEdgeDialog extends React.Component {\n        state = {\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => {\n                        State.preferences.AddEdgeDialogOpen = false;\n                    }}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() => {\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                            {/* //todo:\n                            <Button\n                                onClick={() => {\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                            >\n                                Preview\n                            </Button> */}\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.forceUpdate();\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\n// import PreferencesDialog from \"./PreferencesDialog\";\nimport ImportCSVDialog from \"./dialogs/ImportCSVDialog\";\nimport ImportGEXFDialog from \"./dialogs/ImportGEXFDialog\";\nimport ImportSamplesDialog from \"./dialogs/ImportGEXFDialog\";\nimport ExportDialog from \"./dialogs/ExportDialog\";\n// import ProjectDetailDialog from \"./ProjectDetailDialog\";\n// import RenameSnapshotDialog from \"./RenameSnapshotDialog\";\n// import StatisticsDialog from './StatisticsDialog';\n// import HelpDialog from './HelpDialog';\n// import NeighborDialog from './NeighborDialog';\nimport NodeDataSheetDialog from \"./dialogs/NodeDataSheetDialog\";\nimport EdgeDataSheetDialog from \"./dialogs/EdgeDataSheetDialog\";\nimport AddNodeDialog from \"./dialogs/AddNodeDialog\";\nimport AddEdgeDialog from \"./dialogs/AddEdgeDialog\";\n\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                {/* <PreferencesDialog /> */}\n                <ImportCSVDialog />\n                <ImportGEXFDialog />\n                <ImportSamplesDialog />\n                {/*\n                <ProjectDetailDialog />\n                <RenameSnapshotDialog />\n                <StatisticsDialog />\n                <HelpDialog />\n                <NeighborDialog />\\\n                */}\n                <AddNodeDialog />\n                <AddEdgeDialog />\n                <NodeDataSheetDialog />\n                <EdgeDataSheetDialog />\n                <ExportDialog />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Attributes } from \"graphology-types\";\nimport classnames from \"classnames\";\nimport State from \"../state/index\";\n\nexport default observer(\n    class SelectionBox extends React.Component {\n        state = {\n            boxStyle: {\n                left: 0,\n                top: 0,\n                width: 0,\n                height: 0,\n            },\n            startPoint: { x: 0, y: 0 },\n            endPoint: { x: 0, y: 0 },\n            mouseDown: false,\n        };\n\n        onMouseDownCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            let startpoint = { x: event.clientX, y: event.clientY };\n            this.setState({\n                startPoint: startpoint,\n                mouseDown: true,\n            });\n        };\n\n        onMouseMoveCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            if (this.state.mouseDown) {\n                let endPoint = { x: event.clientX, y: event.clientY };\n                // this.setState({ endPoint: endPoint });\n                this.setState({\n                    endPoint: endPoint,\n                    boxStyle: this._calculateSelectionBox(\n                        this.state.startPoint,\n                        this.state.endPoint\n                    ),\n                });\n            }\n        };\n\n        onMouseUpCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            State.interaction.boxSelection_endPoint = {\n                x: this.state.endPoint.x,\n                y: this.state.endPoint.y,\n            };\n            State.interaction.boxSelection_startPoint = {\n                x: this.state.startPoint.x,\n                y: this.state.startPoint.y,\n            };\n\n            this.setState({\n                startPoint: { x: 0, y: 0 },\n                endPoint: { x: 0, y: 0 },\n                boxStyle: {\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                },\n                mouseDown: false,\n            });\n            State.interaction.boxSelectNode();\n\n            State.interaction.boxSelectionOpen = false;\n        };\n\n        _calculateSelectionBox(\n            startPoint: Attributes,\n            endPoint: Attributes\n        ): Attributes {\n            let left = Math.min(startPoint.x, endPoint.x);\n            let top = Math.min(startPoint.y, endPoint.y);\n            let width = Math.abs(startPoint.x - endPoint.x);\n            let height = Math.abs(startPoint.y - endPoint.y);\n            return { left: left, top: top, width: width, height: height };\n        }\n\n        render() {\n            return (\n                <div\n                    className={classnames(\"boxCanvas\")}\n                    onMouseDown={this.onMouseDownCallback}\n                    onMouseMove={this.onMouseMoveCallback}\n                    onMouseUp={this.onMouseUpCallback}\n                >\n                    <div\n                        className={classnames(\"selectionBox\")}\n                        style={this.state.boxStyle}\n                    ></div>\n                </div>\n            );\n        }\n    }\n);\n","import ReactDOM from \"react-dom\";\nimport State from \"..\";\nimport * as THREE from \"three\";\nimport { Object3D } from \"three\";\nimport ComponentRef from \"../../components/ComponentRef\";\n\nexport function onDocumentLeftClick(event: MouseEvent) {\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterLeftClickCallback(\n            intersects[0].object.uuid,\n            event\n        );\n        console.log(\"currently Clicked ClusterId\", intersects[0].object.uuid);\n    }\n}\n\nexport function onDocumentRightClick(event: MouseEvent) {\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterRightClickCallback(\n            intersects[0].object.uuid,\n            event\n        );\n    } else {\n        State.clusterInteraction.clusterRightClickCallback(null, event);\n    }\n    console.log(\n        \"currently Right-Clicked ClusterId\",\n        intersects[0]?.object?.uuid ?? null\n    );\n}\n\nexport function onDocumentMouseMove(event: MouseEvent) {\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        State.clusterInteraction.currentlyHoveredClusterId = null;\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterHoverCallback(\n            intersects[0].object.uuid,\n            event\n        );\n    } else {\n        State.clusterInteraction.clusterHoverCallback(null, event);\n    }\n    console.log(\n        \"currentlyHoveredClusterId\",\n        intersects[0]?.object?.uuid ?? null\n    );\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport ReactDOM from \"react-dom\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state\";\n\nexport default observer(\n    class CanvasDrawPanel extends React.Component {\n        //@ts-ignore\n        canvasRef: React.MutableRefObject<CanvasDraw> = React.createRef();\n\n        get canvasMethods() {\n            return this.canvasRef.current;\n        }\n\n        get canvas() {\n            let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n            return (element as Element)?.getBoundingClientRect();\n        }\n\n        render() {\n            return (\n                <div\n                    onMouseUp={() => {\n                        this.exportDrawing();\n                    }}\n                >\n                    <CanvasDraw\n                        ref={this.canvasRef}\n                        style={{\n                            position: \"absolute\",\n                            top: this.canvas.y,\n                        }}\n                        canvasHeight={this.canvas.height}\n                        canvasWidth={this.canvas.width}\n                        lazyRadius={0}\n                        brushRadius={3}\n                        brushColor={\"#F6B26B\"}\n                        catenaryColor={\"#F6B26B\"}\n                    />\n                </div>\n            );\n        }\n\n        exportDrawing() {\n            State.helper.clusterSplittingCurrentStep = 3;\n            let hightDiff = 50;\n            const data = JSON.parse(this.canvasMethods.getSaveData());\n            let drawPoints = data?.lines[0]?.points as {\n                x: number;\n                y: number;\n            }[];\n            if (!drawPoints) {\n                return;\n            }\n            drawPoints.map((value) => {\n                value.y += hightDiff;\n            });\n\n            // line was drawn left to right\n            if (drawPoints[0].x < drawPoints[drawPoints.length - 1].x) {\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.canvas.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            } else {\n                drawPoints.reverse();\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.canvas.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            }\n\n            // const firstPoint = drawPoints[0];\n            // const x1 = firstPoint.x,\n            //     y1 = firstPoint.y;\n            // const lastPoint = drawPoints[drawPoints.length - 1];\n            // const x2 = lastPoint.x,\n            //     y2 = lastPoint.y;\n            // const slope = (y1 - y2) / (x1 - x2);\n            // const b = (x1 * y2 - x2 * y1) / (x1 - x2);\n\n            // const leftIntersect = { x: 0, y: b };\n            // const rightIntersect = {\n            //     x: this.canvas.width,\n            //     y: slope * this.canvas.width + b,\n            // };\n            // const topIntersect = { x: -b / slope, y: 0 };\n            // const bottomIntersect = {\n            //     x: (this.canvas.height - b) / slope,\n            //     y: this.canvas.height,\n            // };\n\n            State.clusterInteraction.lineSegment = drawPoints;\n            State.clusterInteraction.computeSplitCluster();\n        }\n\n        clearDrawing() {\n            this.canvasMethods.clear();\n        }\n\n        componentDidMount = () => {\n            ComponentRef.canvasDrawPanel = this;\n            this.clearDrawing();\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state\";\nimport SpriteText from \"three-spritetext\";\nimport {\n    ICustomLinkObject,\n    ICustomNodeObject,\n} from \"../../state/GraphDelegate\";\nimport { reaction } from \"mobx\";\nimport { VisualizationMode } from \"../../state/PreferencesStore\";\nimport SelectionBox from \"../SelectionBox\";\nimport * as CustomMouseEvent from \"../../state/utils/MouseEventUtils\";\nimport CanvasDrawPanel from \"../panels/CanvasDrawPanel\";\n\ninterface Props {\n    controlType: \"trackball\" | \"orbit\" | \"fly\";\n}\n\nexport default observer(\n    class ThreeJSVis extends React.Component<Props, {}> {\n        state = {\n            visualizationGraph: State.graphDelegate.visualizationGraph(),\n            nodePointerInteraction: true,\n        };\n\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        graphDelegate = State.graphDelegate;\n\n        hoverNodeCallback = (\n            node: NodeObject | null,\n            previousNode: NodeObject | null\n        ) => {\n            if (State.search.isPreviewing) return;\n            // to avoid frequent refresh\n\n            if (node === null) {\n                State.interaction.currentlyHoveredNodeId = null;\n            } else if (node !== previousNode) {\n                let current: string = node.id as string;\n                State.interaction.currentlyHoveredNodeId = current;\n            }\n            // console.log(State.graph.rawGraph);\n        };\n\n        nodeLeftClickCallback = (node: NodeObject, event: MouseEvent) => {\n            if (!this.state.nodePointerInteraction) {\n                return;\n            }\n            let nodeId = node.id as string;\n            if (\n                State.preferences.visualizationMode ===\n                VisualizationMode.NodeSelection\n            ) {\n                // multi-selection\n                let index;\n                // if already in the list of selected, remove\n                if (\n                    (index = State.interaction.selectedNodes.indexOf(\n                        nodeId\n                    )) !== -1\n                ) {\n                    State.interaction.selectedNodes.splice(index, 1);\n                } else {\n                    // if not in the list, add\n                    State.interaction.selectedNodes.push(nodeId);\n                }\n            } else {\n                // single select\n                State.interaction.selectedNodes = [node.id as string];\n            }\n        };\n\n        nodeRightClickCallback = (node: NodeObject, event: MouseEvent) => {\n            if (!this.state.nodePointerInteraction) {\n                return;\n            }\n            State.interaction.selectedNode = node.id as string;\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickOn = \"Node\";\n            State.preferences.rightClickPanelOpen = true;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n        };\n\n        backgroundClickCallback = () => {\n            // cancel all selection\n            State.interaction.flush();\n            State.interaction.selectedNodes = [];\n            State.preferences.rightClickPanelOpen = false;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n        };\n\n        backgroundRightClickCallback = (event: MouseEvent) => {\n            if (!this.state.nodePointerInteraction) {\n                return;\n            }\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickOn = \"Background\";\n            State.preferences.rightClickPanelOpen = true;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n        };\n\n        computeNodeColor(_node: NodeObject) {\n            let node = _node as ICustomNodeObject;\n            if (node.hovered) {\n                return State.css.node.highlightColor;\n            } else if (node.selected) {\n                return State.css.node.selectedColor;\n            } else if (node.multiSelected) {\n                return State.css.node.multiSelectedColor;\n            } else {\n                return State.css.node.defaultColor;\n            }\n        }\n\n        computeEdgeColor(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightColor;\n            } else if (edge.selected) {\n                return State.css.edge.selectedColor;\n            } else {\n                return State.css.edge.defaultColor;\n            }\n        }\n        computeEdgeWidth(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightWidth;\n            } else if (edge.selected) {\n                return State.css.edge.highlightWidth;\n            } else {\n                return State.css.edge.defaultWidth;\n            }\n        }\n        renderGraph = () => {\n            if (State.preferences.view === \"3D\") {\n                return (\n                    <div>\n                        {State.preferences.visualizationMode ===\n                            VisualizationMode.NodeSelection &&\n                            State.interaction.boxSelectionOpen && (\n                                <SelectionBox />\n                            )}\n                        {State.preferences.visualizationMode ===\n                            VisualizationMode.ClusterSplitting &&\n                            State.clusterInteraction.drawPanelActivate && (\n                                <CanvasDrawPanel />\n                            )}\n                        <ForceGraph3D\n                            // Data Segment\n                            ref={this.graphRef}\n                            graphData={this.state.visualizationGraph}\n                            controlType={this.props.controlType}\n                            // Node Visualization Segment\n                            nodeLabel=\"id\"\n                            nodeRelSize={State.css.node.size}\n                            nodeColor={this.computeNodeColor}\n                            nodeVisibility={this.graphDelegate.nodeVisibility}\n                            nodeResolution={State.css.node.resolution}\n                            nodeThreeObjectExtend={true}\n                            nodeThreeObject={(node) => {\n                                const sprite = new SpriteText(`${node.id}`);\n                                sprite.color = State.css.label.color;\n                                sprite.textHeight = State.css.label.size;\n                                sprite.visible = State.css.label.show;\n                                sprite.backgroundColor = \"\";\n                                sprite.translateX(State.css.node.size + 2);\n                                return sprite;\n                            }}\n                            // Node Manipulation Segment\n                            onNodeHover={this.hoverNodeCallback}\n                            onNodeClick={this.nodeLeftClickCallback}\n                            onNodeRightClick={this.nodeRightClickCallback}\n                            onNodeDragEnd={(node) => {\n                                node.fx = node.x;\n                                node.fy = node.y;\n                                node.fz = node.z;\n                            }}\n                            // Link Visualization Segment\n                            linkVisibility={this.graphDelegate.linkVisibility}\n                            linkWidth={this.computeEdgeWidth}\n                            linkColor={this.computeEdgeColor}\n                            // Graph Manipulation Segment\n                            onBackgroundRightClick={\n                                this.backgroundRightClickCallback\n                            }\n                            onBackgroundClick={this.backgroundClickCallback}\n                            enablePointerInteraction={\n                                this.state.nodePointerInteraction\n                            }\n                            // Engine\n                            onEngineTick={() => {\n                                this.graphDelegate.clusterObject.clusterDelegation();\n                            }}\n                        />\n                    </div>\n                );\n                // } else {\n                //     return (\n                //         <ForceGraph2D\n                //             graphData={State.graph.adapterGraph}\n                //             dagMode={\"td\"}\n                //             // dagLevelDistance={300}\n                //             // backgroundColor=\"#101020\"\n                //             nodeRelSize={1}\n                //             // nodeId=\"path\"\n                //             // nodeVal={(node) => 100 / (node.level + 1)}\n                //             // nodeLabel=\"path\"\n                //             // nodeAutoColorBy=\"module\"\n                //             // linkDirectionalParticles={2}\n                //             // linkDirectionalParticleWidth={2}\n                //             d3VelocityDecay={0.3}\n                //         />\n                //     );\n            }\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        updateVisualizationGraph() {\n            this.setState({\n                visualizationGraph: State.graphDelegate.visualizationGraph(),\n            });\n        }\n\n        clusterInteractionListener(set: boolean) {\n            if (set) {\n                document.addEventListener(\n                    \"mousemove\",\n                    CustomMouseEvent.onDocumentMouseMove\n                );\n                document.addEventListener(\n                    \"click\",\n                    CustomMouseEvent.onDocumentLeftClick\n                );\n                document.addEventListener(\n                    \"contextmenu\",\n                    CustomMouseEvent.onDocumentRightClick\n                );\n                console.log(\"MouseEvent listening\");\n            } else {\n                document.removeEventListener(\n                    \"mousemove\",\n                    CustomMouseEvent.onDocumentMouseMove\n                );\n                document.removeEventListener(\n                    \"click\",\n                    CustomMouseEvent.onDocumentLeftClick\n                );\n                document.removeEventListener(\n                    \"contextmenu\",\n                    CustomMouseEvent.onDocumentRightClick\n                );\n                console.log(\"MouseEvent stop listening\");\n            }\n        }\n\n        componentDidMount() {\n            this.graphDelegate.mountDelegateMethods(this.graphMethods);\n            this.clusterInteractionListener(true);\n            ComponentRef.visualizer = this;\n        }\n    }\n);\n\nreaction(\n    () => State.preferences.visualizationMode,\n    (visualizationMode) => {\n        switch (visualizationMode) {\n            case VisualizationMode.Normal:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: true,\n                });\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                break;\n\n            case VisualizationMode.NodeSelection:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: true,\n                });\n                ComponentRef.visualizer?.clusterInteractionListener(false);\n                break;\n\n            case VisualizationMode.ClusterSelection:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: false,\n                });\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                break;\n\n            case VisualizationMode.ClusterSplitting:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: false,\n                });\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                State.clusterInteraction.flush();\n                State.helper.clusterSplittingPanelStackOpen = true;\n                break;\n        }\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, EditableCell, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state/index\";\nimport ComponentRef from \"../ComponentRef\";\n\ninterface Props {\n    /**\n     * the node id of the select node\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class NodeDetail extends React.Component<Props, {}> {\n        cellRenderer_property = (rowIndex: number) => {\n            return <Cell>{State.graph.metadata.nodeProperties[rowIndex]}</Cell>;\n        };\n\n        cellRenderer_value = (rowIndex: number) => {\n            let data = State.graph.rawGraph.getNodeAttribute(\n                this.props.onNode,\n                State.graph.metadata.nodeProperties[rowIndex]\n            );\n            // return a Editable Cell where user can edit the value of certain property;\n            return (\n                <EditableCell\n                    value={data}\n                    onChange={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    onConfirm={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    tooltip={data}\n                />\n            );\n        };\n\n        formatLongFloat = (nodeAttributeValue: any) => {\n            const num = Number(nodeAttributeValue);\n            if (Number.isNaN(num) || num > 1 || num < 0) {\n                // Do not format just return original\n                return nodeAttributeValue;\n            }\n            // Format to no more than 3 significant digit.\n            return Number.parseFloat(num.toString()).toPrecision(3);\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"node-details-table\"\n                        )}\n                    >\n                        <Table\n                            numRows={State.graph.metadata.nodeProperties.length}\n                            enableRowHeader={false}\n                        >\n                            <Column\n                                name=\"Properties\"\n                                cellRenderer={this.cellRenderer_property}\n                            />\n                            <Column\n                                name=\"Value\"\n                                cellRenderer={this.cellRenderer_value}\n                            />\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.nodeDetail = React.createRef();\n        };\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    class MultipleNodeDetail extends React.Component {\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"left-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div className={classnames(Classes.CARD)}>\n                        <Table numRows={State.interaction.selectedNodes.length}>\n                            {State.graph.metadata.nodeProperties.map((it) => (\n                                <Column\n                                    key={it}\n                                    name={it}\n                                    cellRenderer={(i) => (\n                                        <Cell>\n                                            {State.graph.rawGraph.getNodeAttribute(\n                                                State.interaction.selectedNodes[\n                                                    i\n                                                ] as string,\n                                                it as string\n                                            )}\n                                        </Cell>\n                                    )}\n                                />\n                            ))}\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.multiNodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { InputGroup, Menu, MenuItem } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\n\nexport default observer(\n    class SearchPanel extends React.Component {\n        renderSearchResults = () => {\n            return State.search.candidates.map((it) => {\n                return (\n                    <MenuItem\n                        text={it}\n                        onMouseOver={() => {\n                            State.search.isPreviewing = true;\n                            State.interaction.currentlyHoveredNodeId = it;\n                            State.graphDelegate.cameraFocusOn(it);\n                        }}\n                    />\n                );\n            });\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div className={classnames(\"search\")}>\n                        {State.search.candidates.length !== 0 && (\n                            <Menu\n                                large={true}\n                                className={classnames(\"search-menu\")}\n                                onMouseLeave={() => {\n                                    State.search.isPreviewing = false;\n                                }}\n                            >\n                                {this.renderSearchResults()}\n                            </Menu>\n                        )}\n                        <InputGroup\n                            asyncControl={true}\n                            large={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange(\n                                (value) => (State.search.searchStr = value)\n                            )}\n                            placeholder=\"Search any Node...\"\n                            value={State.search.searchStr}\n                        />\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport { Alert, Button, Card, Code, H6, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\n\ninterface Props {\n    /**\n     * the node id of the select node to delete Edge\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class DeleteEdgeInteractionPanel extends React.Component<Props, {}> {\n        state = {\n            targetNode: null as string | null,\n            deleteAlertOpen: false,\n        };\n\n        get neighbors(): string[] {\n            return State.graph.rawGraph.neighbors(this.props.onNode);\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            let targetNode = this.neighbors[rowIndex];\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                targetNode: targetNode,\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            if (this.state.targetNode === null) {\n                return null;\n            }\n\n            let edgeToDelete: string | undefined;\n\n            if (\n                (edgeToDelete = State.graph.rawGraph.edge(\n                    this.state.targetNode,\n                    this.props.onNode\n                )) === undefined\n            ) {\n                edgeToDelete = State.graph.rawGraph.edge(\n                    this.props.onNode,\n                    this.state.targetNode\n                );\n            }\n\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(edgeToDelete as string);\n                        this.setState({ deleteAlertOpen: false });\n                        State.preferences.deleteEdgePanelOpen = false;\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with Key{\" \"}\n                        <Code>{edgeToDelete as string}</Code> between Node ID{\" \"}\n                        <Code>{this.state.targetNode}</Code> and Node ID{\" \"}\n                        <Code>{this.props.onNode}</Code>. This action cannot be\n                        reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        neighborsRenderer: ICellRenderer = (rowIndex: number) => {\n            return (\n                <Cell interactive={true}>\n                    <div\n                        onMouseEnter={() => {\n                            State.graphDelegate.cameraFocusOn(\n                                this.props.onNode,\n                                400\n                            );\n                            State.interaction.selectedEdge = State.interaction.getEdgeKey(\n                                this.props.onNode,\n                                this.neighbors[rowIndex]\n                            ) as string;\n                        }}\n                    >\n                        {this.neighbors[rowIndex]}\n                    </div>\n                </Cell>\n            );\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card className={classnames(\"node-details-table\")}>\n                        <Button\n                            icon=\"cross\"\n                            onClick={() => {\n                                State.preferences.deleteEdgePanelOpen = false;\n                                State.interaction.selectedEdge = null;\n                                State.graphDelegate.graphDelegateMethods.refresh(); // update color of selected edges\n                            }}\n                        >\n                            Close\n                        </Button>\n                        <H6> Node ID: {this.props.onNode}</H6>\n                        <Table\n                            numRows={this.neighbors.length}\n                            defaultRowHeight={30}\n                            renderMode={RenderMode.NONE}\n                        >\n                            <Column\n                                name=\"\"\n                                cellRenderer={this.deleteEdgeRenderer}\n                                //@ts-ignore\n                                style={this.style}\n                            />\n                            <Column\n                                name=\"Node ID\"\n                                //@ts-ignore\n                                intent={Intent.PRIMARY}\n                                cellRenderer={this.neighborsRenderer}\n                            />\n                        </Table>\n                        {this.deleteEdgeAlert()}\n                    </Card>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Classes, Slider } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\n\nexport default observer(\n    class ClusterPanel extends React.Component {\n        state = {\n            shapeOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        forceCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Force\"\n                    isOpen={this.state.forceOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            forceOptionOpen: !this.state.forceOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Cluster Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.clusterForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.clusterForce}\n                        />\n                    </div>\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Normal Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.normalForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.normalForce}\n                        />\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <p style={{ textAlign: \"left\" }}>\n                            Cluster Shape:\n                            <span style={{ float: \"right\" }}>\n                                <SimpleSelect\n                                    items={[\"convexHull\", \"sphere\"]}\n                                    text={State.css.cluster.shape}\n                                    onSelect={(it) => {\n                                        State.css.cluster.shape = it;\n                                    }}\n                                    small={true}\n                                />\n                            </span>\n                        </p>\n                    </div>\n                    {State.css.cluster.shape === \"sphere\" && (\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            Cluster Resolution:\n                            <br />\n                            <Slider\n                                min={2}\n                                max={20}\n                                stepSize={1}\n                                labelStepSize={5}\n                                onChange={(value) => {\n                                    State.css.cluster.resolution = value;\n                                    State.graphDelegate.graphDelegateMethods.refresh();\n                                }}\n                                value={State.css.cluster.resolution}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Clusters</p>\n                    </div>\n                    {this.forceCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport {\n    Button,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport { ColorResult, SketchPicker } from \"react-color\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the color to be previewed on the button\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    color: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     *\n     * @memberof Props\n     */\n    onChange: (color: ColorResult) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class ColorPicker extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Popover\n                    interactionKind={PopoverInteractionKind.CLICK}\n                    popoverClassName=\"bp3-popover-content-sizing\"\n                    position={Position.RIGHT}\n                >\n                    <Button\n                        text=\"  \"\n                        style={{\n                            backgroundColor: this.props.color,\n                        }}\n                        small={true}\n                    />\n                    <div>\n                        <SketchPicker\n                            color={this.props.color}\n                            onChange={(it) => {\n                                this.props.onChange(it);\n                            }}\n                        />\n                    </div>\n                </Popover>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Classes } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    class EdgesPanel extends React.Component {\n        state = {\n            sizeOptionOpen: false,\n            thicknessOptionOpen: false,\n            colorOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        render() {\n            return (\n                <div>\n                    <p>{`Modifying All Edges`}</p>\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Default Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.defaultColor}\n                                            onChange={(it) => {\n                                                State.css.edge.defaultColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Selected Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.selectedColor}\n                                            onChange={(it) => {\n                                                State.css.edge.selectedColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Highlight Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={\n                                                State.css.edge.highlightColor\n                                            }\n                                            onChange={(it) => {\n                                                State.css.edge.highlightColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Slider, Switch } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport classnames from \"classnames\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    class LabelsPanel extends React.Component {\n        render() {\n            return (\n                <div>\n                    <Switch\n                        label=\"Show Node Label\"\n                        checked={State.css.label.show}\n                        onChange={() => {\n                            State.css.label.show = !State.css.label.show;\n                            State.graphDelegate.graphDelegateMethods.refresh();\n                        }}\n                    />\n                    <br />\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Label Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={10}\n                            stepSize={1}\n                            labelStepSize={2}\n                            onChange={(value) => {\n                                State.css.label.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.label.size}\n                        />\n                        <br />\n                        <p style={{ textAlign: \"left\" }}>\n                            Label Color:\n                            <span style={{ float: \"right\" }}>\n                                <ColorPicker\n                                    color={State.css.label.color}\n                                    onChange={(it) => {\n                                        State.css.label.color = it.hex;\n                                        State.graphDelegate.graphDelegateMethods.refresh();\n                                    }}\n                                />\n                            </span>\n                        </p>\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Classes, Slider } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    class NodesPanel extends React.Component {\n        state = {\n            timeOutRef: null,\n            colorOptionOpen: false,\n            sizeOptionOpen: false,\n            shapeOptionOpen: false,\n        };\n\n        colorCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Color\"\n                    isOpen={this.state.colorOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            colorOptionOpen: !this.state.colorOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Default Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.defaultColor}\n                                        onChange={(it) => {\n                                            State.css.node.defaultColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Selected Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.selectedColor}\n                                        onChange={(it) => {\n                                            State.css.node.selectedColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Highlight Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.highlightColor}\n                                        onChange={(it) => {\n                                            State.css.node.highlightColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        sizeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Size\"\n                    isOpen={this.state.sizeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            sizeOptionOpen: !this.state.sizeOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Node Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.node.size}\n                        />\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Node Resolution:\n                        <br />\n                        <Slider\n                            min={2}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.resolution = value;\n                            }}\n                            value={State.css.node.resolution}\n                        />\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Nodes</p>\n                    </div>\n                    {this.colorCollapse()}\n                    {this.sizeCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n","import { H3, Tab, Tabs } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport ClusterPanel from \"./ClusterPanel\";\nimport EdgesPanel from \"./EdgesPanel\";\nimport LabelsPanel from \"./LabelsPanel\";\nimport NodesPanel from \"./NodesPanel\";\n\nexport default observer(\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <H3>Graph Options</H3>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        <Tab\n                            id=\"clusters\"\n                            title=\"Clusters\"\n                            panel={<ClusterPanel />}\n                        />\n\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\n\nimport {\n    Button,\n    Intent,\n    Panel,\n    PanelProps,\n    PanelStack2,\n    Classes,\n    H4,\n    Callout,\n} from \"@blueprintjs/core\";\nimport { Popover2, Tooltip2 } from \"@blueprintjs/labs\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../../ComponentRef\";\n\ninterface CustomPanelEntry {\n    step: number;\n    title: string;\n    component: JSX.Element;\n}\n\nconst allPanelStacks = [\n    {\n        step: 1,\n        title: \"Select Cluster\",\n        component: (\n            <p>\n                Select a <b>Cluster</b> to split by clicking it\n            </p>\n        ),\n    } as CustomPanelEntry,\n    {\n        step: 2,\n        title: \"Draw Line\",\n        component: (\n            <div\n                style={{\n                    display: \"flex\",\n                }}\n            >\n                <p>\n                    Use the mouse to <b>hold and draw a line </b> to split this\n                    Cluster\n                </p>\n                <div>\n                    <Button\n                        intent=\"danger\"\n                        small={true}\n                        onClick={() => {\n                            State.helper.clusterSplittingCurrentStep = 1;\n                        }}\n                    >\n                        Back\n                    </Button>\n                </div>\n            </div>\n        ),\n    } as CustomPanelEntry,\n    {\n        step: 3,\n        title: \"Confirm?\",\n        component: (\n            <div>\n                <H4>Confirm Splitting of Cluster? </H4>\n                <div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                    }}\n                >\n                    <Button\n                        intent=\"danger\"\n                        small={true}\n                        onClick={() => {\n                            State.helper.clusterSplittingCurrentStep = 2;\n                        }}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        intent=\"primary\"\n                        small={true}\n                        onClick={() => {\n                            State.helper.clusterSplittingPanelStackOpen = false;\n                            State.clusterInteraction.splitCluster();\n                            State.preferences.visualizationMode =\n                                VisualizationMode.Normal;\n                            State.helper.clusterSplittingCurrentStep = 1;\n                        }}\n                    >\n                        Confirm\n                    </Button>\n                </div>\n            </div>\n        ),\n    } as CustomPanelEntry,\n];\n\ninterface PanelInfo {\n    panelNumber: number;\n}\n\nconst CustomPanel: React.FC<PanelProps<PanelInfo>> = (props) => {\n    return <Callout>{allPanelStacks[props.panelNumber - 1].component}</Callout>;\n};\n\ninterface Props {\n    currentStep: 1 | 2 | 3;\n}\n\nexport default observer(\n    class ClusterSplittingPanelStack extends React.Component<Props, {}> {\n        private firstPanel: Panel<PanelInfo> = {\n            props: {\n                panelNumber: 1,\n            },\n            renderPanel: CustomPanel,\n            title: allPanelStacks[0].title,\n        };\n\n        private secondPanel: Panel<PanelInfo> = {\n            props: {\n                panelNumber: 2,\n            },\n            renderPanel: CustomPanel,\n            title: allPanelStacks[1].title,\n        };\n\n        private thirdPanel: Panel<PanelInfo> = {\n            props: {\n                panelNumber: 3,\n            },\n            renderPanel: CustomPanel,\n            title: allPanelStacks[2].title,\n        };\n\n        get currentPanelStack() {\n            switch (State.helper.clusterSplittingCurrentStep) {\n                case 1:\n                    return [this.firstPanel];\n\n                case 2:\n                    return [this.firstPanel, this.secondPanel];\n\n                case 3:\n                    return [this.firstPanel, this.secondPanel, this.thirdPanel];\n                default:\n                    return [];\n            }\n        }\n\n        private renderPanelStack = () => {\n            return (\n                <div\n                    style={{ width: \"300px\", height: \"100px\", display: \"flex\" }}\n                >\n                    <Button\n                        icon=\"cross\"\n                        minimal={true}\n                        onClick={() => {\n                            State.helper.clusterSplittingPanelStackOpen = false;\n                        }}\n                    ></Button>\n                    <PanelStack2\n                        initialPanel={this.firstPanel}\n                        stack={this.currentPanelStack}\n                    />\n                </div>\n            );\n        };\n\n        render() {\n            return (\n                <Popover2\n                    placement=\"right\"\n                    usePortal={false}\n                    content={this.renderPanelStack()}\n                    isOpen={\n                        State.preferences.visualizationMode ===\n                            VisualizationMode.ClusterSplitting &&\n                        State.helper.clusterSplittingPanelStackOpen\n                    }\n                    onOpened={() => {\n                        State.helper.clusterSplittingCurrentStep = 1;\n                    }}\n                >\n                    <Tooltip2\n                        usePortal={false}\n                        content={VisualizationMode.ClusterSplitting}\n                    >\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            intent={Intent.DANGER}\n                            text={VisualizationMode.ClusterSplitting}\n                            active={\n                                State.preferences.visualizationMode ===\n                                VisualizationMode.ClusterSplitting\n                            }\n                            onClick={() => {\n                                State.preferences.visualizationMode =\n                                    VisualizationMode.ClusterSplitting;\n\n                                State.helper.clusterSplittingPanelStackOpen = true;\n                            }}\n                        />\n                    </Tooltip2>\n                </Popover2>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.clusterSplittingPanelStack = this;\n        };\n    }\n);\n","import React from \"react\";\n\nimport {\n    Button,\n    Intent,\n    Panel,\n    PanelProps,\n    PanelStack2,\n    Classes,\n    H4,\n    Callout,\n    RadioGroup,\n    Radio,\n} from \"@blueprintjs/core\";\nimport { Popover2, Tooltip2 } from \"@blueprintjs/labs\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../../ComponentRef\";\n\nexport default observer(\n    class NodeSelectionPanel extends React.Component {\n        handleChange = () => {\n            State.interaction.boxSelectionOpen = !State.interaction\n                .boxSelectionOpen;\n        };\n        private renderPanelStack = () => {\n            return (\n                <div\n                    style={{ width: \"300px\", height: \"100px\", display: \"flex\" }}\n                >\n                    <Button\n                        icon=\"cross\"\n                        minimal={true}\n                        onClick={() => {\n                            State.helper.NodeSelectionPanelOpen = false;\n                        }}\n                    ></Button>\n                    <RadioGroup\n                        label=\"Node Multi-Selection Mode\"\n                        onChange={this.handleChange}\n                        selectedValue={\n                            State.interaction.boxSelectionOpen ? \"two\" : \"one\"\n                        }\n                    >\n                        <Radio label=\"Click\" value=\"one\" />\n                        <Radio label=\"Box-Selection\" value=\"two\" />\n                    </RadioGroup>\n                </div>\n            );\n        };\n\n        render() {\n            return (\n                <Popover2\n                    placement=\"right\"\n                    usePortal={false}\n                    content={this.renderPanelStack()}\n                    isOpen={\n                        State.preferences.visualizationMode ===\n                            VisualizationMode.NodeSelection &&\n                        State.helper.NodeSelectionPanelOpen\n                    }\n                >\n                    <Tooltip2\n                        usePortal={false}\n                        content={VisualizationMode.NodeSelection}\n                    >\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            intent={Intent.WARNING}\n                            text={VisualizationMode.NodeSelection}\n                            active={\n                                State.preferences.visualizationMode ===\n                                VisualizationMode.NodeSelection\n                            }\n                            onClick={() => {\n                                State.preferences.visualizationMode =\n                                    VisualizationMode.NodeSelection;\n\n                                State.helper.NodeSelectionPanelOpen = true;\n                            }}\n                        />\n                    </Tooltip2>\n                </Popover2>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport ClusterSplittingPanelStack from \"./ClusterSplittingPanelStack\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport NodeSelectionPanel from \"./NodeSelectionPanel\";\n\nexport default observer(\n    class InteractionModePanel extends React.Component {\n        getIntent(mode: VisualizationMode) {\n            switch (mode) {\n                case VisualizationMode.Normal:\n                    return Intent.PRIMARY;\n\n                case VisualizationMode.NodeSelection:\n                    return Intent.WARNING;\n\n                case VisualizationMode.ClusterSelection:\n                    return Intent.SUCCESS;\n\n                case VisualizationMode.ClusterSplitting:\n                    return Intent.DANGER;\n            }\n        }\n\n        renderMode(mode: VisualizationMode) {\n            return (\n                <Tooltip2 content={mode}>\n                    <Button\n                        className={classnames([\n                            Classes.BUTTON,\n                            Classes.MINIMAL,\n                        ])}\n                        text={mode}\n                        intent={this.getIntent(mode)}\n                        active={State.preferences.visualizationMode === mode}\n                        onClick={() => {\n                            State.preferences.visualizationMode = mode;\n                        }}\n                    />\n                </Tooltip2>\n            );\n        }\n\n        render() {\n            return (\n                <div className=\"selection-action-panel\">\n                    {this.renderMode(VisualizationMode.Normal)}\n                    <NodeSelectionPanel />\n                    {this.renderMode(VisualizationMode.ClusterSelection)}\n                    <ClusterSplittingPanelStack\n                        currentStep={State.helper.clusterSplittingCurrentStep}\n                    />\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Menu, MenuDivider, MenuItem } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { computed, makeObservable } from \"mobx\";\nimport { VisualizationMode } from \"../../state/PreferencesStore\";\n\ninterface Props {\n    /**\n     * what place this RightClick interaction is activated\n     *\n     * @type {(\"Node\" | \"Cluster\" | \"Background\")}\n     */\n    on: \"Node\" | \"Cluster\" | \"Background\";\n}\n\nexport default observer(\n    class RightClickPanel extends React.Component<Props, {}> {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        formNewCluster() {\n            let date = new Date().toLocaleString(\"en\");\n            let clusterId: string = `Cluster Generated @ ${date}`;\n            if (!State.graph.metadata.nodeProperties.includes(\"new-cluster\")) {\n                State.graph.metadata.nodeProperties.push(\"new-cluster\");\n            }\n            State.graph.rawGraph.forEachNode((_, attributes) => {\n                attributes[\"new-cluster\"] = \"\";\n            });\n            State.interaction.selectedNodes.map((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(\n                    nodeId,\n                    \"new-cluster\",\n                    clusterId\n                );\n            });\n            State.preferences.rightClickPanelOpen = false;\n            State.cluster.setCluster(\"new-cluster\");\n\n            State.interaction.flush();\n        }\n\n        renderNodeMenu() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuDivider\n                        title={\n                            (\"Node ID: \" +\n                                State.interaction.selectedNode) as string\n                        }\n                    />\n                    <MenuItem\n                        icon=\"graph-remove\"\n                        text=\"Delete Node\"\n                        onClick={() => {\n                            State.graph.mutating.dropNode(\n                                State.interaction.selectedNode as string\n                            );\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                    <MenuItem\n                        icon=\"inner-join\"\n                        text=\"Form a New Cluster\"\n                        onClick={this.formNewCluster}\n                        disabled={State.interaction.selectedNodes.length === 0}\n                    />\n                    <MenuItem\n                        icon=\"eraser\"\n                        text=\"Cancel Selection\"\n                        onClick={() => {\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                        disabled={State.interaction.selectedNodes.length === 0}\n                    />\n                    <MenuItem\n                        icon=\"graph-remove\"\n                        text=\"Delete Selected Nodes\"\n                        onClick={() => {\n                            State.interaction.selectedNodes.forEach((node) => {\n                                State.graph.mutating.dropNode(node);\n                            });\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                    <MenuItem\n                        icon=\"new-link\"\n                        text=\"Add Edge\"\n                        onClick={() => {\n                            State.preferences.AddEdgeDialogOpen = true;\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuItem\n                        icon=\"cross\"\n                        text=\"Delete Edge\"\n                        onClick={() => {\n                            State.preferences.deleteEdgePanelOpen = true;\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                </Menu>\n            );\n        }\n\n        renderClusterMenu() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem\n                        icon=\"group-objects\"\n                        text=\"Merge Cluster\"\n                        onClick={() => {\n                            State.clusterInteraction.mergeSelectedCluster();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                </Menu>\n            );\n        }\n\n        renderBackgroundMenu() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem\n                        icon=\"new-object\"\n                        text=\"Add Node\"\n                        onClick={() => {\n                            State.preferences.AddNodeDialogOpen = true;\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                </Menu>\n            );\n        }\n\n        render() {\n            if (this.props.on === \"Node\") {\n                return this.renderNodeMenu();\n            } else if (this.props.on === \"Cluster\") {\n                return this.renderClusterMenu();\n            } else if (this.props.on === \"Background\") {\n                return this.renderBackgroundMenu();\n            }\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport NodeDetailPanel from \"./panels/NodeDetailPanel\";\nimport MultiDetailPanel from \"./panels/MultiDetailPanel\";\nimport SearchPanel from \"./panels/SearchPanel\";\nimport DeleteEdgeInteractionPanel from \"./panels/DeleteEdgeInteractionPanel\";\nimport GraphOptionsCard from \"./panels/GraphOptionsCard\";\nimport InteractionModePanel from \"./panels/InteractionModePanel/InteractionModePanel\";\nimport RightClickPanel from \"./panels/RightClickPanel\";\n\nexport default observer(\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.graphOptionsCardOpen = !State.preferences\n                .graphOptionsCardOpen;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.graphOptionsCardOpen\n                                    ? this.optionsVisible\n                                    : this.optionsInvisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            />\n                            <br />\n                            <GraphOptionsCard />\n                        </div>\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.graphOptionsCardOpen\n                                        ? this.sideButtonInv\n                                        : this.sideButtonVis\n                                }\n                            />\n                        </div>\n                    </div>\n\n                    {/* single selected */}\n                    {/* {State.graph.selectedNodes.length === 1 && (\n                        <NodeDetail node={State.graph.currentlyHoveredId} />\n                    )} */}\n                    {State.interaction.currentlyHoveredNodeId &&\n                        State.interaction.selectedNodes.length === 0 && (\n                            <NodeDetailPanel\n                                onNode={\n                                    State.interaction.currentlyHoveredNodeId\n                                }\n                            />\n                        )}\n\n                    {/* multiple selected */}\n                    {/* {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n                        <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n                    )} */}\n                    {State.interaction.selectedNodes.length !== 0 && (\n                        <MultiDetailPanel />\n                    )}\n\n                    <SearchPanel />\n                    {State.preferences.rightClickPanelOpen &&\n                        State.preferences.rightClickOn && (\n                            <RightClickPanel\n                                on={State.preferences.rightClickOn}\n                            />\n                        )}\n                    {State.preferences.deleteEdgePanelOpen &&\n                        State.interaction.selectedNode && (\n                            <DeleteEdgeInteractionPanel\n                                onNode={State.interaction.selectedNode}\n                            />\n                        )}\n                    <InteractionModePanel />\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/Visualizer\";\n// import NodeDetail from \"./components/panels/NodeDetailPanel\";\n// import State from \"./state\";\n// import EdgesPanel from \"./components/panels/EdgesPanel\";\n// import LabelsPanel from \"./components/panels/LabelsPanel\";\n// import SelectionPanel from \"./components/panels/SelectionPanel\";\n// import GlobalPanel from \"./components/panels/GlobalPanel\";\n// import NodesPanel from \"./components/panels/NodesPanel\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}