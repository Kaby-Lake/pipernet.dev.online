{"version":3,"sources":["components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","images/logo.png","state/PreferencesStore.ts","state/GraphStore.ts","state/ImportStore.ts","state/ProjectStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/index.ts","constants/index.ts","components/Navbar.jsx","components/utils/Collapsable.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/GraphDataTable.jsx","components/DataSheetDialog.jsx","components/SaveDialog.jsx","components/Dialogs.jsx","components/ComponentRef.tsx","components/visualize/GraphDelegate.ts","components/visualize/visualizer.tsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/GlobalPanel.jsx","components/panels/NodesPanel.jsx","components/panels/NodeDetailPanel.tsx","components/panels/MultiDetailPanel.tsx","components/FloatingCards.jsx","App.js","reportWebVitals.js","index.js"],"names":["item","handleClick","isActive","className","Classes","ACTIVE","onClick","text","items","onSelect","value","fill","itemRenderer","CommonItemRenderer","filterable","onItemSelect","FILL","PreferencesStore","preferenceDialogOpen","darkMode","statisticsDialogOpen","helpDialogOpen","neighborDialogOpen","dataSheetDialogOpen","dataSheetLoading","isRenderOptionsCardHidden","view","makeAutoObservable","this","GraphStore","globalConfig","nodes","colorBy","color","scale","from","to","sizeBy","size","min","max","labelBy","shape","labelSize","labelLength","edges","rawGraph","Graph","allowSelfLoops","multi","type","enableDegree","enableDensity","enableDiameter","enableCoefficient","enableComponent","selectedNodes","currentlyHoveredId","_lastSelectedSingleNode","metadata","snapshotName","String","numNodes","numEdges","nodeProperties","edgeProperties","_rawGraph","forEachNode","node","attributes","_options","show","visualize","id","name","val","isClusterNode","_visualize","forEachEdge","edge","source","target","isClusterLink","key","originalOptions","getNodeAttribute","newOptions","setNodeAttribute","order","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importCSVDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","cluster","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","result","replace","parse","comment","trim","auto_parse","skip_empty_lines","undefined","err","Toaster","create","position","Position","TOP","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","graph","readNodeCSV","forEach","addNode","toString","readEdgeCSV","hasNode","addEdge","Object","keys","clusterProperties","readGEXF","entries","getNodeAttributes","push","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","length","join","console","log","it","onerror","error","action","window","location","reload","nodeFileConfig","ProjectStore","currentSnapshotName","exportDialogOpen","renameSnapshotDialogOpen","SearchStore","searchPaneOpen","searchStr","candidates","numCandidates","panelOpen","ClusterStore","clusterBy","observable","ref","attribute","keyValueMap","Map","hasOwnProperty","set","attributeKeysMap","getAttributeValues","keyAttribute","get","Array","Set","values","colors","randomcolor","seed","count","THREE","x","y","z","AppState","preferences","import","search","project","_instance","instance","privateConstructor","State","autorun","renderImportEdgePreview","renderImportNodePreview","SAMPLE_GRAPH_SNAPSHOTS","url","a","fetch","mode","response","json","gexfJson","File","convert","json2xml","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","observer","classnames","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","title","src","logo","width","height","NAVBAR_HEADING","icon","sample","sampleSnapshotTitle","sampleSnapshotUrl","disabled","fetchSampleGraph","then","importGraphFromGEXF","res","BOTTOM","BUTTON","MINIMAL","ALIGN_RIGHT","SimpleSelect","NAVBAR_DIVIDER","dialogOpen","open","React","Component","isOpen","onToggle","children","elevation","Elevation","LARGE","rightIcon","PreviewTable","props","renderWrapper","numRows","selectedRegions","indexOf","rows","cols","cellRenderer","i","canImport","state","available","renderNodesSelection","Collapsable","nodesOpen","setState","CONTROL_GROUP","INPUT_GROUP","onInputChange","event","files","label","checked","onChange","renderEdgesSelection","edgesOpen","newDelimiter","style","minWidth","iconName","DARK","onClose","DIALOG_BODY","targetValue","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","DISABLED","PRIMARY","importGraphFromCSV","decorateRawGraph","fileIsSelect","renderImportButton","sortBy","sortOrder","showRenderer","rowIndex","rawTable","hideNode","showNode","forceUpdate","renderCell","columnIndex","cell","newVal","setValue","onConfirm","renderColumns","filter","element","interactive","ONE","selected","SUCCESS","export","showMoreBy","showMoreNum","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","GraphDataTable","onOpened","setTimeout","renderTable","ready","write","headers","exportData","data","_id","minimal","computeGEXFFile","filename","computeNodeFile","header","separator","computeEdgeFile","Dialogs","display","SaveDialog","ComponentRef","nodeDetail","multiNodeDetail","GraphDelegate","graphDelegateMethods","threeScene","nodeVisibility","nodeObject","linkVisibility","lastObject3D","_graphDelegateMethods","scene","oldGraph","graphCopy","copy","names","index","clusterID","attributeKeys","remove","convexHullObjects","add","geom","meshMaterial","attributeColor","transparent","opacity","side","wireFrameMat","wireframe","SceneUtils","createMultiMaterialObject","newGraph","addInvisibleClusterNode","includes","tempGraph","links","newMap","attributePoints","convexHull","ConvexGeometry","createMesh","graphRef","createRef","graphDelegate","nodeHover","previousNode","getNodeId","nodeSelect","nodeId","ctrlKey","shiftKey","splice","graphMethods","refresh","renderGraph","graphData","visualizationGraph","nodeResolution","onNodeDragEnd","fx","fy","fz","onBackgroundClick","onBackgroundRightClick","onEngineTick","clusterDelegation","nodeColor","onNodeClick","onNodeHover","makeObservable","computed","mountDelegateMethods","current","timeOutRef","sizeOptionOpen","thicknessOptionOpen","colorOptionOpen","CARD","textAlign","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","RIGHT","backgroundImage","backgroundColor","hex","frame","hideAllLabels","showAllLabels","marginLeft","hideSelectedLabels","showSelectedLabels","stepSize","initialValue","labelStepSize","shapeOptionOpen","labelOptionOpen","SwitchCollapsable","marginTop","x1","y1","x2","y2","stopColor","stopOpacity","offset","pluralize","getRenderedNodes","cellRenderer_property","cellRenderer_value","formatLongFloat","nodeAttributeValue","num","Number","isNaN","parseFloat","toPrecision","componentDidMount","enableRowHeader","RenderOptionsCard","animate","panel","Expander","optionsVisible","left","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","ELEVATION_2","paddingTop","paddingRight","paddingBottom","MultiDetailPanel","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbf44ade.chunk.js","sourcesContent":["import React from \"react\";\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\n\nexport default (item, { handleClick, isActive }) => (\n    <MenuItem\n        className={isActive ? Classes.ACTIVE : \"\"}\n        key={item}\n        onClick={handleClick}\n        text={item}\n    />\n);\n","import React from \"react\";\nimport { Button, Classes } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/labs\";\nimport CommonItemRenderer from \"./CommonItemRenderer\";\n\nexport default ({ items, onSelect, value, fill = false }) => (\n    <Select\n        items={items}\n        itemRenderer={CommonItemRenderer}\n        filterable={false}\n        onItemSelect={onSelect}\n    >\n        <Button className={fill ? Classes.FILL : null} text={value} />\n    </Select>\n);\n","export default __webpack_public_path__ + \"static/media/logo.25a51149.png\";","import { makeAutoObservable } from \"mobx\";\n\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    preferenceDialogOpen = false;\n\n    darkMode = true;\n\n    statisticsDialogOpen = false;\n    helpDialogOpen = false;\n    neighborDialogOpen = false;\n    dataSheetDialogOpen = false;\n    dataSheetLoading = true;\n\n    isRenderOptionsCardHidden = true;\n\n    view = \"3D\";\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as graphology from \"graphology-types\";\nimport {\n    CustomNodeObject,\n    CustomLinkObject,\n} from \"../components/visualize/GraphDelegate\";\n\nexport interface IHiddenOptions {\n    show: boolean;\n}\n\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    globalConfig = {\n        nodes: {\n            colorBy: \"pagerank\",\n            color: {\n                scale: \"Linear Scale\",\n                from: \"#448AFF\",\n                to: \"#E91E63\",\n            },\n            sizeBy: \"pagerank\",\n            size: {\n                min: 2,\n                max: 10,\n                scale: \"Linear Scale\",\n            },\n            labelBy: \"node_id\",\n            shape: \"circle\",\n            labelSize: 1,\n            labelLength: 10,\n        },\n        edges: {\n            color: \"#7f7f7f\",\n        },\n    };\n\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: true,\n        multi: true,\n        type: \"undirected\",\n    });\n\n    decorateRawGraph(_rawGraph: Graph): Graph {\n        _rawGraph.forEachNode((node, attributes) => {\n            // add _options and _visualize to attributes\n            let options: IHiddenOptions = {\n                show: true,\n            };\n            attributes._options = options;\n\n            let visualize: CustomNodeObject = {\n                id: node,\n                name: node,\n                val: 1,\n                isClusterNode: false,\n            };\n            attributes._visualize = visualize;\n        });\n\n        _rawGraph.forEachEdge((edge, attributes, source, target) => {\n            let visualize: CustomLinkObject = {\n                source: source,\n                target: target,\n                isClusterLink: false,\n            };\n            attributes._visualize = visualize;\n        });\n        return _rawGraph;\n    }\n\n    public hideNode(key: string) {\n        let originalOptions: IHiddenOptions = this.rawGraph.getNodeAttribute(\n            key,\n            \"_options\"\n        );\n        let newOptions: IHiddenOptions = {\n            ...originalOptions,\n            show: false,\n        };\n        this.rawGraph.setNodeAttribute(key, \"_options\", newOptions);\n    }\n\n    public showNode(key: string) {\n        let originalOptions: IHiddenOptions = this.rawGraph.getNodeAttribute(\n            key,\n            \"_options\"\n        );\n        let newOptions: IHiddenOptions = {\n            ...originalOptions,\n            show: true,\n        };\n        this.rawGraph.setNodeAttribute(key, \"_options\", newOptions);\n    }\n\n    nodes = this.globalConfig.nodes;\n    edges = this.globalConfig.edges;\n\n    enableDegree = true;\n    enableDensity = true;\n    enableDiameter = false;\n    enableCoefficient = true;\n    enableComponent = true;\n\n    // Updated by frame event\n    selectedNodes: string[] = [];\n\n    //currently hovered node id\n    currentlyHoveredId: string = \"undefined\";\n\n    // Cache the single node that's been selected last time\n    // and will not update unless exactly one node is selected again\n    // useful for NeighborDialog\n    _lastSelectedSingleNode = null;\n\n    get hasGraph() {\n        return this.rawGraph.order && this.rawGraph.size != 0;\n    }\n\n    metadata = {\n        snapshotName: String,\n        numNodes: 0,\n        numEdges: 0,\n\n        // attributes of nodes in imported csv\n        nodeProperties: [],\n        edgeProperties: [],\n    };\n}\n","import { Toaster, Position, Intent } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as graphology from \"graphology-types\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\nimport { IHiddenOptions } from \"./GraphStore\";\n\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    importCSVDialogOpen = false;\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n                cluster: \"Unknown\",\n            },\n            delimiter: \",\",\n        },\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        },\n    };\n\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, <string>reader.result));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: true,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            tempNodes = await this.readNodeCSV();\n            tempNodes.forEach((node) => {\n                graph.addNode(\n                    node[config.nodeFile.mapping.id].toString(),\n                    node\n                );\n            });\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, { id: fromId });\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, { id: toId });\n            }\n            graph.addEdge(fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n                clusterProperties: config.hasNodeFile\n                    ? null\n                    : config.nodeFile.mapping.cluster,\n                edgeProperties: [\"source_id\", \"target_id\"],\n            },\n        };\n    }\n\n    //TODO:import 里的id和cluster， source target还没设置\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n\n        for (const [key, value] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n                clusterProperties: null,\n                edgeProperties: [\"source_id\", \"target_id\"],\n            },\n        };\n    }\n\n    public renderImportGEXFPreview(): void {}\n\n    public renderImportEdgePreview(): void {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        if (!file) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.readAsText(file);\n\n        reader.onload = () => {\n            // Read entire CSV into memory as string\n            let fileAsString = <string>reader.result;\n\n            // if the file is not regularly formatted, replace the EOL character\n            fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n            fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n            // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n            const lines = fileAsString.split(\"\\n\");\n            const topLinesAsString = lines\n                .map((l) => l.trim())\n                .slice(0, lines.length < 10 ? lines.length : 10)\n                .join(\"\\n\");\n            console.log(topLinesAsString);\n\n            // Parse the top lines\n            try {\n                const it = hasHeader\n                    ? parse(topLinesAsString, {\n                          comment: \"#\",\n                          trim: true,\n                          auto_parse: true,\n                          skip_empty_lines: true,\n                          columns: hasHeader,\n                          delimiter: delimiter,\n                      })\n                    : parse(topLinesAsString, {\n                          comment: \"#\",\n                          trim: true,\n                          auto_parse: true,\n                          skip_empty_lines: true,\n                          columns: undefined,\n                          delimiter: delimiter,\n                      });\n                edgeFileConfig.topN = it;\n                edgeFileConfig.columns = <any>(\n                    Object.keys(it[0]).map((key) => `${key}`)\n                );\n\n                // if there exists two or more columns in the parsed edge file\n                if (edgeFileConfig.columns.length >= 2) {\n                    edgeFileConfig.mapping.fromId = edgeFileConfig.columns[0];\n                    edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                    edgeFileConfig.isReady = true;\n                } else if (edgeFileConfig.columns.length == 1) {\n                    edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                        edgeFileConfig.columns[0];\n                    edgeFileConfig.isReady = true;\n                } else {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                }\n            } catch {\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    message: \"Error: Fails to parse file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                edgeFileConfig.parseError = true;\n            }\n        };\n\n        reader.onerror = () => {\n            console.error(reader.error);\n            Toaster.create({\n                position: Position.TOP,\n            }).show({\n                action: {\n                    onClick: () => window.location.reload(),\n                    text: \"Refresh Page\",\n                },\n                message: \"Error: Fails to open file\",\n                intent: Intent.DANGER,\n                timeout: -1,\n            });\n        };\n    }\n\n    public renderImportNodePreview(): void {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        if (!file) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.readAsText(file);\n\n        reader.onload = () => {\n            // Read entire CSV into memory as string\n            let fileAsString = <string>reader.result;\n\n            // if the file is not regularly formatted, replace the EOL character\n            fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n            fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n            // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n            const lines = fileAsString.split(\"\\n\");\n            const topLinesAsString = lines\n                .map((l) => l.trim())\n                .slice(0, lines.length < 10 ? lines.length : 10)\n                .join(\"\\n\");\n            console.log(topLinesAsString);\n\n            // Parse the top lines\n            try {\n                const it = hasHeader\n                    ? parse(topLinesAsString, {\n                          comment: \"#\",\n                          trim: true,\n                          auto_parse: true,\n                          skip_empty_lines: true,\n                          columns: hasHeader,\n                          delimiter,\n                      })\n                    : parse(topLinesAsString, {\n                          comment: \"#\",\n                          trim: true,\n                          auto_parse: true,\n                          skip_empty_lines: true,\n                          columns: undefined,\n                          delimiter,\n                      });\n                nodeFileConfig.topN = it;\n                nodeFileConfig.columns = <any>(\n                    Object.keys(it[0]).map((key) => `${key}`)\n                );\n\n                // if there exists two or more columns in the parsed edge file\n                if (nodeFileConfig.columns.length >= 2) {\n                    nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                    nodeFileConfig.mapping.cluster = nodeFileConfig.columns[1];\n                    nodeFileConfig.isReady = true;\n                } else if (nodeFileConfig.columns.length == 1) {\n                    nodeFileConfig.mapping.id = nodeFileConfig.mapping.cluster =\n                        nodeFileConfig.columns[0];\n                    nodeFileConfig.isReady = true;\n                } else {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                }\n            } catch {\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    message: \"Error: Fails to parse file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                nodeFileConfig.parseError = true;\n            }\n        };\n\n        reader.onerror = () => {\n            console.error(reader.error);\n            Toaster.create({\n                position: Position.TOP,\n            }).show({\n                action: {\n                    onClick: () => window.location.reload(),\n                    text: \"Refresh Page\",\n                },\n                message: \"Error: Fails to open file\",\n                intent: Intent.DANGER,\n                timeout: -1,\n            });\n        };\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class ProjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    currentSnapshotName = \"Untitled\";\n\n    exportDialogOpen = false;\n    renameSnapshotDialogOpen = false;\n}\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    searchPaneOpen = false;\n\n    searchStr = \"\";\n    candidates = [];\n    numCandidates = 0;\n    panelOpen = true; //test for ui panels\n}\n","import { makeAutoObservable, observable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\n\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n    clusterBy = \"None\";\n\n    rawGraph!: Graph;\n\n    // the map between [the id of a Node and the value of the attribute specified by $clusterBy]\n    get keyAttribute(): Map<string, string | number> {\n        const attribute = this.clusterBy;\n        const keyValueMap = new Map<string, string | number>();\n\n        this.rawGraph?.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                keyValueMap.set(key, attributes[attribute]);\n            } else {\n                // this attribute is undefined in this node\n                keyValueMap.set(key, \"undefined\");\n            }\n        });\n        return keyValueMap;\n    }\n\n    get attributeKeys(): Map<string | number, string[]> {\n        const attributeKeysMap = new Map<string | number, string[]>();\n        this.getAttributeValues.forEach((value) => {\n            attributeKeysMap.set(value, []);\n        });\n        this.keyAttribute.forEach((value, key) => {\n            attributeKeysMap.get(value)?.push(key);\n        });\n        return attributeKeysMap;\n    }\n\n    // the possible attribute values of the attribute defined by clusterBy\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.map((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.map((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        this.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n}\n","import { autorun, runInAction, observable, makeObservable } from \"mobx\";\n\nimport PreferencesStore from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport ProjectStore from \"./ProjectStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\n\nclass AppState {\n    constructor() {}\n\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    import!: ImportStore;\n    search!: SearchStore;\n    project!: ProjectStore;\n    cluster!: ClusterStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.project = new ProjectStore();\n        this.cluster = new ClusterStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\nautorun(() => (State.cluster.rawGraph = State.graph.rawGraph));\n\nexport default State;\n","import convert from \"xml-js\";\nimport State from \"../state\";\n\nexport const GITHUB_URL = \"\";\n\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\n    [\n        \"Les Miserables\",\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\n    ],\n    [\"COVID-19 Citation Graph 06-02\", \"../samples/json/a.json\"],\n];\n\nexport async function fetchSampleGraph(url: string) {\n    try {\n        let response = await fetch(url, { mode: \"no-cors\" });\n        let gexfJson = await response.json();\n        return new File([convert.json2xml(gexfJson)], \"sample.gexf\", {\n            type: \"text/xml\",\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\nexport const ONLY_EDGE_FILE = \"only edges file\";\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    Classes,\n    ButtonGroup,\n    Intent,\n    Position,\n    Tooltip,\n    Popover,\n    Menu,\n    MenuItem,\n    MenuDivider,\n    Divider,\n} from \"@blueprintjs/core\";\n// import { Popover2 as Popover } from \"@blueprintjs/popover2\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\nimport logo from \"../images/logo.png\";\nimport State from \"../state\";\n\nimport {\n    GITHUB_URL,\n    SAMPLE_GRAPH_SNAPSHOTS,\n    fetchSampleGraph,\n} from \"../constants\";\n\nexport default observer(\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <nav className={classnames([Classes.NAVBAR])}>\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_LEFT,\n                        ])}\n                    >\n                        <img\n                            title=\"PiperNet\"\n                            id=\"PiperNet Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                        ></img>\n                        <div className={classnames([Classes.NAVBAR_HEADING])}>\n                            {\" \"}\n                            PiperNet{\" \"}\n                        </div>\n\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem text=\"Load Sample\" icon=\"graph\">\n                                        {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        disabled={true}\n                                                        onClick={() => {\n                                                            fetchSampleGraph(\n                                                                sampleSnapshotUrl\n                                                            ).then((file) => {\n                                                                State.import.selectedGEXFFileFromInput = file;\n                                                                State.import\n                                                                    .importGraphFromGEXF()\n                                                                    .then(\n                                                                        (\n                                                                            res\n                                                                        ) => {\n                                                                            State.graph.rawGraph =\n                                                                                res.graph;\n                                                                            State.graph.metadata =\n                                                                                res.metadata;\n                                                                        }\n                                                                    );\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )}\n                                    </MenuItem>\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from CSV...\"\n                                        onClick={() => {\n                                            State.import.importCSVDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from GEXF...\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Export Graph\"\n                                        onClick={() => {\n                                            State.project.exportDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"document\"\n                            >\n                                Graph\n                            </Button>\n                        </Popover>\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Data Sheet\"\n                                        icon=\"database\"\n                                        onClick={() => {\n                                            // State.graph.frame.pauseLayout();\n                                            State.preferences.dataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    {/* <MenuItem\n                                        text=\"Statistics\"\n                                        icon=\"timeline-bar-chart\"\n                                        onClick={() => {\n                                            State.preferences.statisticsDialogOpen = true;\n                                        }}\n                                    /> */}\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"wrench\"\n                            >\n                                Tools\n                            </Button>\n                        </Popover>\n                    </div>\n                    {/* <div\n                    className={classnames([\n                        Classes.NAVBAR_GROUP,\n                        Classes.ALIGN_LEFT,\n                    ])}\n                >\n                    <span className={Classes.NAVBAR_DIVIDER} />\n                    {appState.graph.hasGraph && appState.graph.frame && (\n                        <div style={{ display: \"inline\" }}>\n                            <Tooltip\n                                content={\n                                    appState.graph.frame.paused\n                                        ? \"Resume Layout Algorithm\"\n                                        : \"Pause Layout Algorithm\"\n                                }\n                                position={Position.BOTTOM}\n                            >\n                                <Button\n                                    className={classnames([\n                                        Classes.BUTTON,\n                                        Classes.MINIMAL,\n                                    ])}\n                                    icon={\n                                        appState.graph.frame.paused\n                                            ? \"play\"\n                                            : \"pause\"\n                                    }\n                                    text={\n                                        appState.graph.frame.paused\n                                            ? \"Resume Layout\"\n                                            : \"Pause Layout\"\n                                    }\n                                    onClick={() => {\n                                        if (appState.graph.frame.paused) {\n                                            appState.graph.frame.resumeLayout();\n                                            this.forceUpdate();\n                                        } else {\n                                            appState.graph.frame.pauseLayout();\n                                            this.forceUpdate();\n                                        }\n                                    }}\n                                />\n                            </Tooltip>\n                        </div>\n                    )}\n                </div> */}\n                    <ButtonGroup>\n                        {/* <SimpleSelect\n                            className={classnames([Classes.ALERT_CONTENTS])}\n                            items={[\"3D\", \"2D\"]}\n                            value={State.preferences.view}\n                            onSelect={(it) => (State.preferences.view = it)}\n                        />\n                        <Divider /> */}\n                    </ButtonGroup>\n\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_RIGHT,\n                        ])}\n                    >\n                        Clustered by{\"  \"}\n                        <SimpleSelect\n                            items={\n                                State.graph.metadata.nodeProperties.length == 0\n                                    ? [\"None\"]\n                                    : State.graph.metadata.nodeProperties\n                            }\n                            value={State.cluster.clusterBy}\n                            onSelect={(it) => (State.cluster.clusterBy = it)}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"cog\"\n                            disabled={true}\n                            onClick={() => {\n                                State.preferences.dialogOpen = true;\n                            }}\n                        />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"code\"\n                            onClick={() => {\n                                window.open(\n                                    \"https://github.com/grp202004/PiperNet\"\n                                );\n                            }}\n                        />\n                    </div>\n                </nav>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Collapse, Card, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\n\nexport default ({ name, isOpen, onToggle, children }) => (\n    <Card elevation={Elevation.THREE}>\n        <Button\n            className={classnames(\n                Classes.LARGE,\n                Classes.FILL,\n                \"text-align-left\"\n            )}\n            rightIcon={isOpen ? \"chevron-up\" : \"chevron-down\"}\n            onClick={onToggle}\n        >\n            {name}\n        </Button>\n        <Collapse isOpen={isOpen}>{children}</Collapse>\n    </Card>\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    Spinner,\n    Switch,\n    Divider,\n    FileInput,\n    Alert,\n    Callout,\n    Tag,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\n\nimport Collapsable from \"./utils/Collapsable\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top 10 lines of the selected file are displayed\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    class ImportDialog extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                available: ONLY_EDGE_FILE,\n                nodesOpen: true,\n                edgesOpen: true,\n                delimiter: \",\",\n            };\n        }\n\n        // determine if this state is importable\n        canImport = () => {\n            if (this.state.available === NODE_AND_EDGE_FILE) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else if (this.state.available === ONLY_EDGE_FILE) {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n            return false;\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            // if file not imported, show blank\n            if (this.state.available === ONLY_EDGE_FILE) {\n                return null;\n            }\n\n            return (\n                <Collapsable\n                    name=\"Nodes\"\n                    isOpen={this.state.nodesOpen}\n                    onToggle={() =>\n                        this.setState({ nodesOpen: !this.state.nodesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.nodeFileName}\n                                onInputChange={(event) => {\n                                    if (event.target.files.length < 1) {\n                                        return;\n                                    }\n                                    State.import.nodeFileName =\n                                        event.target.files[0].name;\n                                    // after setting the selectedNodeFileFromInput, other attributes will update automatically\n                                    State.import.selectedNodeFileFromInput =\n                                        event.target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                value={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                            <br />\n                            Column for Attribute for Cluster:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                value={nodeFile.mapping.cluster}\n                                onSelect={(it) =>\n                                    (nodeFile.mapping.cluster = it)\n                                }\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <Collapsable\n                    name=\"Edges\"\n                    isOpen={this.state.edgesOpen}\n                    onToggle={() =>\n                        this.setState({ edgesOpen: !this.state.edgesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.edgeFileName}\n                                onInputChange={(event) => {\n                                    if (event.target.files.length < 1) {\n                                        return;\n                                    }\n                                    State.import.edgeFileName =\n                                        event.target.files[0].name;\n                                    State.import.selectedEdgeFileFromInput =\n                                        event.target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                value={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />{\" \"}\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                value={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderDelimiterSelection() {\n            return (\n                <div className=\"column-selection\">\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        value={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter == \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter == \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    style={{ minWidth: \"80vw\" }}\n                    iconName=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importCSVDialogOpen}\n                    onClose={() => {\n                        State.import.importCSVDialogOpen = false;\n                    }}\n                    title=\"Import CSV\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div>\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"import-dialog\"\n                                )}\n                            >\n                                I have:\n                                <SimpleSelect\n                                    items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\n                                    value={this.state.available}\n                                    onSelect={(targetValue) => {\n                                        State.import.importConfig.hasNodeFile = !(\n                                            targetValue === ONLY_EDGE_FILE\n                                        );\n                                        this.setState({\n                                            available: targetValue,\n                                        });\n                                    }}\n                                />\n                                <Divider />\n                                {this.renderNodesSelection()}\n                                <br />\n                                {this.renderEdgesSelection()}\n                                <br />\n                                {this.renderDelimiterSelection()}\n                            </div>\n                            <div className={Classes.DIALOG_FOOTER}>\n                                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                    <Button\n                                        className={classnames({\n                                            [Classes.DISABLED]: !this.canImport(),\n                                        })}\n                                        intent={Intent.PRIMARY}\n                                        onClick={() => {\n                                            // requestCreateNewProject({\n                                            //     name: State.project.newProjectName,\n                                            //     createdDate: new Date().toLocaleString(),\n                                            // });\n                                            State.import.isLoading = true;\n                                            State.import\n                                                .importGraphFromCSV()\n                                                .then((res) => {\n                                                    State.graph.rawGraph = State.graph.decorateRawGraph(\n                                                        res.graph\n                                                    );\n                                                    State.graph.metadata =\n                                                        res.metadata;\n\n                                                    // runInAction(\n                                                    //     \"load imported graph\",\n                                                    //     () => {\n                                                    //         appState.graph.rawGraph =\n                                                    //             graph.rawGraph;\n                                                    //         appState.graph.metadata =\n                                                    //             graph.metadata;\n                                                    //         appState.graph.setUpFrame();\n                                                    //     }\n                                                    // );\n                                                    // // Reinitialize global configs\n                                                    // appState.graph.nodes =\n                                                    //     appState.graph.initialGlobalConfig.nodes;\n                                                    // appState.graph.overrides = new Map();\n\n                                                    State.import.isLoading = false;\n                                                    State.import.importCSVDialogOpen = false;\n\n                                                    // // Newly imported graph shouldn't have label showing\n                                                    // appState.graph.frame.turnOffLabelCSSRenderer();\n                                                });\n                                        }}\n                                        text=\"Import\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    Spinner,\n    FileInput,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../state\";\n\nexport default observer(\n    class GEXFImportDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <Button\n                            className={classnames({\n                                [Classes.DISABLED]: !this.state.fileIsSelect,\n                            })}\n                            intent={Intent.PRIMARY}\n                            onClick={() => {\n                                State.import.isLoading = true;\n                                State.import\n                                    .importGraphFromGEXF()\n                                    .then((res) => {\n                                        State.graph.rawGraph = State.graph.decorateRawGraph(\n                                            res.graph\n                                        );\n                                        State.graph.metadata = res.metadata;\n\n                                        State.import.isLoading = false;\n                                        State.import.importGEXFDialogOpen = false;\n                                    });\n                            }}\n                            text=\"Import\"\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    iconName=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;\n                    }}\n                    title=\"Import GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <div\n                                    className={classnames(\n                                        Classes.CONTROL_GROUP\n                                    )}\n                                >\n                                    <div\n                                        className={classnames(\n                                            Classes.INPUT_GROUP,\n                                            Classes.FILL\n                                        )}\n                                    >\n                                        <FileInput\n                                            text={State.import.gexfFileName}\n                                            onInputChange={(event) => {\n                                                if (\n                                                    event.target.files.length <\n                                                    1\n                                                ) {\n                                                    return;\n                                                }\n                                                State.import.gexfFileName =\n                                                    event.target.files[0].name;\n                                                State.import.selectedGEXFFileFromInput =\n                                                    event.target.files[0];\n                                                this.setState({\n                                                    fileIsSelect: true,\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    Switch,\n    ButtonGroup,\n    Card,\n    Elevation,\n} from \"@blueprintjs/core\";\nimport {\n    Column,\n    Table,\n    Cell,\n    EditableCell,\n    TableLoadingOption,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../state\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\n\nexport default observer(\n    class GraphTable extends React.Component {\n        state = {\n            sortBy: \"None\",\n            sortOrder: \"Descending\", // or 'Ascending'\n        };\n\n        rawGraph = State.graph.rawGraph;\n\n        get rawTable() {\n            return this.rawGraph.export().nodes;\n        }\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        showRenderer = (rowIndex) => {\n            let node = this.rawTable[rowIndex];\n\n            return (\n                <Cell>\n                    <Switch\n                        checked={node.attributes._options.show}\n                        onChange={() => {\n                            node.attributes._options.show\n                                ? State.graph.hideNode(node.key)\n                                : State.graph.showNode(node.key);\n                            this.forceUpdate();\n                        }}\n                    />\n                </Cell>\n            );\n        };\n\n        renderCell = (rowIndex, columnIndex) => {\n            let attribute = this.nodeProperties[columnIndex - 2];\n            let cellAttributes = this.rawTable[rowIndex].attributes;\n            let cell = cellAttributes[attribute];\n\n            return (\n                <EditableCell\n                    value={cell}\n                    onChange={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    onConfirm={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                />\n            );\n        };\n\n        setValue = (value, rowIndex, attribute) => {\n            let id = this.rawTable[rowIndex].key;\n            this.rawGraph.setNodeAttribute(id, attribute, value);\n            this.forceUpdate();\n        };\n\n        renderColumns = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it != \"_options\") {\n                    return <Column name={it} cellRenderer={this.renderCell} />;\n                }\n            });\n            return columns.filter((element) => {\n                return element != undefined;\n            });\n        };\n\n        render() {\n            return (\n                <div className=\"argo-table-container\">\n                    <Card interactive={false} elevation={Elevation.ONE}>\n                        Sort By\n                        <SimpleSelect\n                            items={this.nodeProperties}\n                            value={this.state.sortBy}\n                            onSelect={(selected) => {\n                                this.setState({ sortBy: selected });\n                            }}\n                        />\n                        <SimpleSelect\n                            items={[\"Descending\", \"Ascending\"]}\n                            value={this.state.sortOrder}\n                            onSelect={(selected) => {\n                                this.setState({ sortOrder: selected });\n                            }}\n                        />\n                    </Card>\n\n                    <Table\n                        className=\"pt-bordered pt-striped\"\n                        numRows={this.rawGraph.order}\n                    >\n                        {/* first column is the Show switch */}\n                        <Column\n                            name=\"Show\"\n                            intent={Intent.SUCCESS}\n                            cellRenderer={this.showRenderer}\n                        />\n                        <Column\n                            name=\"id(Designated)\"\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.rawTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    ButtonGroup,\n    Card,\n    Elevation,\n    NumericInput,\n} from \"@blueprintjs/core\";\nimport {\n    Column,\n    Table,\n    Cell,\n    EditableCell,\n    TableLoadingOption,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../state\";\nimport GraphDataTable from \"./GraphDataTable\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\n\nexport default observer(\n    class DataSheetDialog extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                showMoreBy: \"pagerank\",\n                showMoreNum: 5,\n            };\n        }\n\n        renderTable() {\n            if (State.preferences.dataSheetLoading) {\n                return (\n                    <div className=\"argo-table-container\">\n                        <Table\n                            className=\"pt-bordered pt-striped\"\n                            numRows={20}\n                            loadingOptions={[\n                                TableLoadingOption.CELLS,\n                                TableLoadingOption.COLUMN_HEADERS,\n                                TableLoadingOption.ROW_HEADERS,\n                            ]}\n                        >\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                        </Table>\n                    </div>\n                );\n            } else {\n                return <GraphDataTable />;\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    iconName=\"database\"\n                    isOpen={State.preferences.dataSheetDialogOpen}\n                    onOpened={() => {\n                        setTimeout(() => {\n                            State.preferences.dataSheetLoading = false;\n                        }, 100);\n                    }}\n                    onClose={() => {\n                        State.preferences.dataSheetDialogOpen = false;\n                        State.preferences.dataSheetLoading = true;\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        {this.renderTable()}\n                    </div>\n\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.preferences.dataSheetDialogOpen = false;\n                                }}\n                                text=\"Done\"\n                            />\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Card,\n    Icon,\n    Dialog,\n    Intent,\n    Spinner,\n    Elevation,\n    Divider,\n    H3,\n    ButtonGroup,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport { makeObservable, computed } from \"mobx\";\nimport classnames from \"classnames\";\nimport gexf from \"graphology-gexf/browser\";\nimport State from \"../state\";\nimport { CSVLink } from \"react-csv\";\n\nexport default observer(\n    class SaveSnapshotDialog extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                ready: true,\n            };\n        }\n\n        computeGEXFFile() {\n            return gexf.write(State.graph.rawGraph);\n        }\n\n        computeNodeFile() {\n            let headers = [];\n            State.graph.metadata.nodeProperties.map((value) => {\n                headers.push({ label: value, key: value });\n            });\n            headers.push({ label: \"_id\", key: \"_id\" });\n            let exportData = State.graph.rawGraph.export();\n            let data = [];\n            exportData.nodes.forEach((node) => {\n                data.push({\n                    _id: node.key,\n                    ...node.attributes,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        computeEdgeFile() {\n            let headers = [\n                { label: \"source\", key: \"source\" },\n                { label: \"target\", key: \"target\" },\n            ];\n\n            let exportData = State.graph.rawGraph.export();\n            let data = [];\n            exportData.edges.forEach((edge) => {\n                data.push({\n                    source: edge.source,\n                    target: edge.target,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    iconName=\"projects\"\n                    isOpen={State.project.exportDialogOpen}\n                    onClose={() => {\n                        State.project.exportDialogOpen = false;\n                    }}\n                    title={`Export Graph`}\n                >\n                    {!this.state.ready ? (\n                        <Spinner />\n                    ) : (\n                        <div className={classnames(Classes.DIALOG_BODY)}>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    GEXF Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://gephi.org/gexf/format/\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n                                <Divider />\n\n                                <CSVLink\n                                    data={this.computeGEXFFile()}\n                                    filename={\"Snapshot-GEXF.gexf\"}\n                                    className=\"btn btn-primary\"\n                                    target=\"_blank\"\n                                >\n                                    <Button>Download GEXF File</Button>\n                                </CSVLink>\n                            </Card>\n                            <br></br>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    CSV Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://github.com/grp202004/PiperNet#data-import\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n\n                                <Divider />\n                                <ButtonGroup>\n                                    <CSVLink\n                                        data={this.computeNodeFile().data}\n                                        header={this.computeNodeFile().header}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Node.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Node File</Button>\n                                    </CSVLink>\n                                    <Divider />\n                                    <CSVLink\n                                        data={this.computeEdgeFile().data}\n                                        header={this.computeEdgeFile().header}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Edge.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Edge File</Button>\n                                    </CSVLink>\n                                </ButtonGroup>\n                            </Card>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\n// import PreferencesDialog from \"./PreferencesDialog\";\nimport ImportDialog from \"./ImportDialog\";\nimport GEXFImportDialog from \"./GEXFImportDialog\";\n// import OpenDialog from \"./OpenDialog\";\n// import NewProjectDialog from \"./NewProjectDialog\";\n// import ProjectDetailDialog from \"./ProjectDetailDialog\";\n// import SaveSnapshotDialog from \"./SaveSnapshotDialog\";\n// import RenameSnapshotDialog from \"./RenameSnapshotDialog\";\n// import OpenSnapshotDialog from \"./OpenSnapshotDialog\";\n// import ShareDialog from './ShareDialog';\n// import StatisticsDialog from './StatisticsDialog';\n// import HelpDialog from './HelpDialog';\n// import NeighborDialog from './NeighborDialog';\nimport DataSheetDialog from \"./DataSheetDialog\";\nimport SaveDialog from \"./SaveDialog\";\n\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                {/* <PreferencesDialog /> */}\n                <ImportDialog />\n                <GEXFImportDialog />\n                {/*<OpenDialog />\n                <OpenSnapshotDialog />\n                <NewProjectDialog />\n                <ProjectDetailDialog />\n                <SaveSnapshotDialog />\n                <RenameSnapshotDialog />\n                <ShareDialog />\n                <StatisticsDialog />\n                <HelpDialog />\n                <NeighborDialog /> */}\n                <DataSheetDialog />\n                <SaveDialog />\n            </div>\n        );\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\nclass ComponentRef {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    static _instance: ComponentRef | null = null;\n\n    nodeDetail!: any;\n\n    multiNodeDetail!: any;\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (ComponentRef._instance === null) {\n            let instance = new ComponentRef();\n            ComponentRef._instance = instance;\n            return instance;\n        } else {\n            return ComponentRef._instance;\n        }\n    }\n}\n\nexport default ComponentRef.instance;\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { copy } from \"copy-anything\";\nimport State from \"../../state\";\nimport {\n    ForceGraphMethods,\n    NodeObject,\n    LinkObject,\n} from \"react-force-graph-3d\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport { SceneUtils } from \"three/examples/jsm/utils/SceneUtils.js\";\nimport * as THREE from \"three\";\n\nexport interface CustomNodeObject extends NodeObject {\n    name?: string;\n    val?: number;\n    isClusterNode?: boolean;\n}\n\nexport interface CustomLinkObject extends LinkObject {\n    isClusterLink?: boolean;\n}\n\nexport default class GraphDelegate {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    mountDelegateMethods(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.threeScene = this.graphDelegateMethods.scene();\n    }\n\n    private graphDelegateMethods!: ForceGraphMethods;\n\n    private threeScene!: THREE.Scene;\n\n    get visualizationGraph() {\n        let newGraph = State.graph.decorateRawGraph(\n            this.addInvisibleClusterNode(this.rawGraph)\n        );\n        newGraph.forEachNode((node, attributes) => {\n            if (node.includes(\"_CLUSTER_\")) {\n                attributes._visualize.isClusterNode = true;\n            }\n        });\n        newGraph.forEachEdge((edge, attributes, source, target) => {\n            if (source.includes(\"_CLUSTER_\") || target.includes(\"_CLUSTER_\")) {\n                attributes._visualize.isClusterLink = true;\n            }\n        });\n        let tempGraph = {\n            nodes: [] as CustomNodeObject[],\n            links: [] as LinkObject[],\n        };\n        newGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        newGraph.forEachEdge((edge, attributes) => {\n            tempGraph.links.push(attributes[\"_visualize\"]);\n        });\n        return tempGraph;\n    }\n\n    addInvisibleClusterNode(oldGraph: Graph): Graph {\n        let graphCopy = copy(oldGraph);\n        let names = [\n            \"_CLUSTER_1_\",\n            \"_CLUSTER_2_\",\n            \"_CLUSTER_3_\",\n            \"_CLUSTER_4_\",\n            \"_CLUSTER_5_\",\n            \"_CLUSTER_6_\",\n            \"_CLUSTER_7_\",\n            \"_CLUSTER_8_\",\n            \"_CLUSTER_9_\",\n            \"_CLUSTER_10_\",\n        ];\n        for (let index = 0; index < names.length; index++) {\n            State.cluster.getAttributeValues.forEach((attribute) => {\n                if (attribute === \"undefined\") return;\n                let clusterID = names[index] + attribute;\n                graphCopy.addNode(clusterID);\n                State.cluster.attributeKeys.get(attribute)?.forEach((value) => {\n                    let visualize: CustomLinkObject = {\n                        isClusterLink: true,\n                    };\n                    graphCopy.addEdge(clusterID, value, {\n                        _visualize: visualize,\n                    });\n                });\n            });\n        }\n\n        return graphCopy;\n    }\n\n    nodeVisibility = (nodeObject: CustomNodeObject) => {\n        return nodeObject.isClusterNode ? false : true;\n    };\n\n    linkVisibility = (nodeObject: CustomLinkObject) => {\n        return nodeObject.isClusterLink ? false : true;\n    };\n\n    get rawGraph(): Graph {\n        return State.graph.rawGraph;\n    }\n\n    lastObject3D!: THREE.Object3D;\n\n    clusterDelegation() {\n        this.threeScene.remove(this.lastObject3D);\n        this.lastObject3D = new THREE.Object3D();\n        this.convexHullObjects.forEach((value, key) => {\n            this.lastObject3D.add(value);\n        });\n        this.threeScene.add(this.lastObject3D);\n    }\n\n    // explicitly called when all node's position have been added to the map\n    get convexHullObjects(): Map<string | number, THREE.Object3D> {\n        let newMap = new Map<string | number, THREE.Object3D>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            if (value.length < 4) {\n                newMap.set(key, new THREE.Object3D());\n            } else {\n                let convexHull = new ConvexGeometry(Array.from(value));\n                newMap.set(key, this.createMesh(convexHull, key));\n            }\n        });\n        return newMap;\n    }\n\n    private createMesh(\n        geom: ConvexGeometry,\n        name: string | number\n    ): THREE.Object3D {\n        // 实例化一个绿色的半透明的材质\n        var meshMaterial = new THREE.MeshBasicMaterial({\n            color: State.cluster.attributeColor.get(name),\n            transparent: true,\n            opacity: 0.2,\n        });\n        meshMaterial.side = THREE.DoubleSide; //将材质设置成正面反面都可见\n        var wireFrameMat = new THREE.MeshBasicMaterial();\n        wireFrameMat.wireframe = true; //把材质渲染成线框\n\n        // 将两种材质都赋给几何体\n        var mesh = SceneUtils.createMultiMaterialObject(geom, [\n            meshMaterial,\n            wireFrameMat,\n        ]);\n\n        return mesh;\n    }\n}\n","import React from \"react\";\nimport {\n    observable,\n    makeObservable,\n    computed,\n    autorun,\n    action,\n    makeAutoObservable,\n} from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, {\n    ForceGraphMethods,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport State from \"../../state\";\nimport ComponentRef from \"../ComponentRef\";\nimport GraphDelegate from \"./GraphDelegate\";\n\nexport default observer(\n    class ThreeJSVis extends React.Component {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                graphRef: observable,\n                graphMethods: computed,\n                graphDelegate: observable,\n                nodeHover: action,\n                selectedNodes: observable.ref,\n            });\n        }\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        getNodeId(node: NodeObject): string {\n            let nodeId: string;\n            if (node.id as string) {\n                nodeId = node.id as string;\n            } else {\n                nodeId = (node.id as number).toString();\n            }\n            return nodeId;\n        }\n\n        graphDelegate = new GraphDelegate();\n\n        nodeHover = (\n            node: NodeObject | null,\n            previousNode: NodeObject | null\n        ) => {\n            if (node != null && node != previousNode) {\n                State.graph.currentlyHoveredId = this.getNodeId(\n                    node as NodeObject\n                );\n                console.log(State.graph.currentlyHoveredId);\n                ComponentRef.nodeDetail?.forceUpdate();\n            }\n        };\n\n        selectedNodes: string[] = State.graph.selectedNodes;\n\n        nodeSelect = (node: NodeObject, event: MouseEvent) => {\n            let nodeId = this.getNodeId(node as NodeObject);\n            if (event.ctrlKey || event.shiftKey) {\n                // multi-selection\n                if (this.selectedNodes.includes(nodeId)) {\n                    let index = this.selectedNodes.indexOf(nodeId);\n                    if (index > -1) {\n                        this.selectedNodes.splice(index, 1);\n                    }\n                } else {\n                    this.selectedNodes.push(nodeId);\n                }\n            } else {\n                // single-selection\n                // TODO\n            }\n            console.log(State.graph.selectedNodes);\n            ComponentRef.multiNodeDetail?.forceUpdate();\n            this.graphMethods.refresh(); // update color of selected nodes\n        };\n\n        renderGraph = () => {\n            if (State.preferences.view === \"3D\") {\n                return (\n                    <ForceGraph3D\n                        ref={this.graphRef}\n                        graphData={this.graphDelegate.visualizationGraph}\n                        nodeResolution={20}\n                        nodeVisibility={this.graphDelegate.nodeVisibility}\n                        linkVisibility={this.graphDelegate.linkVisibility}\n                        onNodeDragEnd={(node) => {\n                            node.fx = node.x;\n                            node.fy = node.y;\n                            node.fz = node.z;\n                        }}\n                        onBackgroundClick={() => {\n                            // this.allAdded = true;\n                            // this.graphRef.current.pauseAnimation();\n                            // this.graphMethods.refresh();\n                            // this.graphDelegate.init();\n                        }}\n                        onBackgroundRightClick={() => {\n                            // this.allAdded = true;\n                            // this.graphRef.current.pauseAnimation();\n                            // this.graphMethods.refresh();\n                            // this.graphDelegate.init();\n                        }}\n                        onEngineTick={() =>\n                            this.graphDelegate.clusterDelegation()\n                        }\n                        nodeColor={(node) =>\n                            this.selectedNodes.includes(this.getNodeId(node))\n                                ? \"yellow\"\n                                : \"grey\"\n                        }\n                        onNodeClick={this.nodeSelect}\n                        onNodeHover={this.nodeHover}\n                    />\n                );\n                // } else {\n                //     return (\n                //         <ForceGraph2D\n                //             graphData={State.graph.adapterGraph}\n                //             dagMode={\"td\"}\n                //             // dagLevelDistance={300}\n                //             // backgroundColor=\"#101020\"\n                //             nodeRelSize={1}\n                //             // nodeId=\"path\"\n                //             // nodeVal={(node) => 100 / (node.level + 1)}\n                //             // nodeLabel=\"path\"\n                //             // nodeAutoColorBy=\"module\"\n                //             // linkDirectionalParticles={2}\n                //             // linkDirectionalParticleWidth={2}\n                //             d3VelocityDecay={0.3}\n                //         />\n                //     );\n            }\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        componentDidMount() {\n            this.graphDelegate.mountDelegateMethods(this.graphMethods);\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Button, Classes, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\n// import { Popover2, Select } from \"@blueprintjs/labs\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport * as THREE from 'three';\n// import SimpleSelect from \"../utils/SimpleSelect\";\n// import mouse from \"../../graph-frontend/src/select\";\n\nexport default observer(\n    class EdgesPanel extends React.Component {\n\n        constructor(props) {\n            super(props);\n            this.state = {\n                timeOutRef: null,\n                sizeOptionOpen: false,\n                thicknessOptionOpen: false,\n                colorOptionOpen: false,\n            };\n        }\n\n        render() {\n            let graph = State.graph.graph;\n            return (\n                <div>\n                    <p>{`Modifying All Edges`}</p>\n\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen\n                            })\n                        }\n                    >\n                        <div\n                            className={classnames(Classes.CARD, \"sub-option\")}\n                        >\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>Select Edge Color:\n                            <span style={{ float: \"right\" }}>\n                                        <Popover\n                                            interactionKind={PopoverInteractionKind.CLICK}\n                                            popoverClassName=\"bp3-popover-content-sizing\"\n                                            position={Position.RIGHT}\n                                        >\n                                            <Button\n                                                text=\"  \"\n                                                style={{\n                                                    backgroundImage: \"inherit\",\n                                                    backgroundColor: State.graph.edges.color\n                                                }}\n                                            />\n                                            <div>\n                                                <SketchPicker\n                                                    color={State.graph.edges.color}\n                                                    onChange={(it) => {\n                                                        // State.graph.process.graph.forEachNode(n => {\n\n                                                        //     let red = new THREE.Color(State.graph.edges.color).r;\n                                                        //     let blue = new THREE.Color(State.graph.edges.color).g;\n                                                        //     let green = new THREE.Color(State.graph.edges.color).b;\n                                                        //     n.renderData.linecolor.r = red;\n                                                        //     n.renderData.linecolor.g = blue;\n                                                        //     n.renderData.linecolor.b = green;\n                                                        // });\n                                                        (State.graph.edges.color = it.hex);\n                                                        (console.log(it.hex));\n                                                        /**update edge color in real time*/\n                                                        // State.graph.process.onHover();\n\n                                                    }}\n                                                />\n                                            </div>\n\n                                        </Popover>\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n\n                    {/* Collapsable Option: Thickness */}\n                    {/* <Collapsable\n                    name=\"Thickness\"\n                    isOpen={this.state.thicknessOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\n                        })\n                    }\n                    >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <section>\n                            <p>Select Edge Thickness: </p>\n                            <div style={{display: \"inline\", float: \"right\"}}>\n\n                            </div>\n                        </section>\n                    </div>\n                </Collapsable> */}\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;","import React from \"react\";\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n  class LabelsPanel extends React.Component {\n    render() {\n      return (\n        <div>\n          <span style={{ display: \"inline-block\" }}>\n            <Button\n              style={{ width: \"100px\" }}\n              id=\"hideAll\"\n              iconName=\"eye-off\"\n              className={Classes.FILL}\n              onClick={() => State.graph.frame.hideAllLabels()}\n            >\n              Hide All\n        </Button>\n            <Button\n              style={{ width: \"100px\", display: \"none\" }}\n              id=\"showAll\"\n              iconName=\"eye-on\"\n              className={Classes.FILL}\n              onClick={() => State.graph.frame.showAllLabels()}\n            >\n              Show All\n        </Button>\n            <Button\n              style={{ width: \"140px\", marginLeft: \"10px\" }}\n              id=\"hideSelected\"\n              iconName=\"eye-off\"\n              className={Classes.FILL}\n              onClick={() => State.graph.frame.hideSelectedLabels()}\n            >\n              Hide Selected\n        </Button>\n            <Button\n              style={{ width: \"140px\", marginLeft: \"10px\", display: \"none\" }}\n              id=\"showSelected\"\n              iconName=\"eye-on\"\n              className={Classes.FILL}\n              onClick={() => State.graph.frame.showSelectedLabels()}\n            >\n              Show Selected\n        </Button>\n          </span>\n          <div style={{ height: '20px' }} />\n          <h6>Label Size</h6>\n          <Slider\n            min={0.5}\n            max={3}\n            stepSize={0.1}\n            // onChange={value => {\n            //   State.graph.nodes.labelSize = value;\n            // }}\n            // value={State.graph.nodes.labelSize}\n            initialValue={2}\n            value={2}\n          />\n          <div style={{ height: '20px' }} />\n          <h6>Label Length</h6>\n          <Slider\n            min={1}\n            max={32}\n            stepSize={0.1}\n            labelStepSize={5}\n            // onChange={value => {\n            //   State.graph.nodes.labelLength = value;\n            // }}\n            // value={State.graph.nodes.labelLength}\n            value={10}\n          />\n          <div style={{ height: '20px' }} />\n          <h6>Label By</h6>\n          {/* <Select\n            items={State.graph.allPropertiesKeyList}\n            itemRenderer={CommonItemRenderer}\n            filterable={false}\n            onItemSelect={it => (State.graph.nodes.labelBy = it)}\n          >\n            <Button text={State.graph.nodes.labelBy} />\n          </Select> */}\n        </div>\n      );\n    }\n  }\n);\n// export default LabelsPanel;","import React from \"react\";\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\n\nexport default ({ name, isOpen, onToggle, children }) => (\n    <div>\n        <Switch\n            label={name}\n            checked={isOpen}\n            onChange={onToggle}\n            className={Classes.ALIGN_RIGHT}\n        />\n        <Collapse isOpen={isOpen}>{children}</Collapse>\n    </div>\n);\n","import React from \"react\";\nimport { Button, Classes, Slider, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { runInAction } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n  class SelectionPanel extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        shapeOptionOpen: false,\n        sizeOptionOpen: false,\n        colorOptionOpen: false,\n        labelOptionOpen: false\n      };\n    }\n\n    // twoLayerUpdate = (nodeId, key, value) => {\n    //   if (!State.graph.overrides.has(nodeId)) {\n    //     State.graph.overrides.set(nodeId, new Map());\n    //   }\n    //   const nodeAttrs = State.graph.overrides.get(nodeId);\n    //   if (value !== null) {\n    //     nodeAttrs.set(key, value);\n    //   } else {\n    //     nodeAttrs.delete(key);\n    //     if (nodeAttrs.size === 0) {\n    //       State.graph.overrides.delete(nodeId);\n    //     }\n    //   }\n    // };\n\n    // batchTwoLayerUpdate = (nodes, key, value) => {\n    //   runInAction(\"update entire selection\", () => {\n    //     nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\n    //   });\n    // };\n\n    render() {\n      return (\n        <div>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Size\"\n            isOpen={this.state.sizeOptionOpen}\n            onToggle={() => {\n              if (this.state.sizeOptionOpen) {\n                this.setState(\n                  {\n                    sizeOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"size\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    sizeOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"size\",\n                  //     State.graph.overrideConfig.size\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <Slider\n                min={1}\n                max={20}\n                stepSize={0.1}\n                labelStepSize={5}\n                // onChange={it => {\n                //   State.graph.overrideConfig.size = it;\n                //   this.batchTwoLayerUpdate(\n                //     State.graph.selectedNodes,\n                //     \"size\",\n                //     it\n                //   );\n                // }}\n                // value={State.graph.overrideConfig.size}\n                value={2}//set for test\n              />\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Color\"\n            isOpen={this.state.colorOptionOpen}\n            onToggle={() => {\n              if (this.state.colorOptionOpen) {\n                this.setState(\n                  {\n                    colorOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"color\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    colorOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"color\",\n                  //     State.graph.overrideConfig.color\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <section> <p style={{ textAlign: \"left\" }}>\n                Choose Color:\n            <span style={{ float: \"right\" }}>\n                  <Popover\n                    //previous!!\n                    // placement=\"bottom\"\n                    // modifiers={{\n                    //   preventOverflow: {\n                    //     enabled: false,\n                    //   },\n                    // }}\n                    interactionKind={PopoverInteractionKind.CLICK}\n                    popoverClassName=\"bp3-popover-content-sizing\"\n                    position={Position.RIGHT}\n\n                  >\n                    <Button\n                      text=\"  \"\n                      style={{\n                        backgroundImage: \"inherit\",\n                        // backgroundColor: State.graph.overrideConfig.color\n                      }}\n                    />\n                    <SketchPicker\n                    // color={State.graph.overrideConfig.color}\n                    // onChange={it => {\n                    //   State.graph.overrideConfig.color = it.hex;\n                    //   this.batchTwoLayerUpdate(\n                    //     State.graph.selectedNodes,\n                    //     \"color\",\n                    //     it.hex\n                    //   );\n                    // }}\n                    />\n                  </Popover>\n                </span>\n              </p>\n              </section>\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Label\"\n            isOpen={this.state.labelOptionOpen}\n            onToggle={() => {\n              if (this.state.labelOptionOpen) {\n                this.setState(\n                  {\n                    labelOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"label\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    labelOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"label\",\n                  //     State.graph.overrideConfig.label\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              Custom Label:\n            <input\n                value={\"test\"}//used for test\n              // value={State.graph.overrideConfig.label}\n              // onChange={it => {\n              //   State.graph.overrideConfig.label = it.target.value;\n              //   this.batchTwoLayerUpdate(\n              //     State.graph.selectedNodes,\n              //     \"label\",\n              //     it.target.value\n              //   );\n              // }}\n              />\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Shape\"\n            isOpen={this.state.shapeOptionOpen}\n            onToggle={() => {\n              if (this.state.shapeOptionOpen) {\n                this.setState(\n                  {\n                    shapeOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"shape\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    shapeOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"shape\",\n                  //     State.graph.overrideConfig.shape\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <section> <p style={{ textAlign: \"left\" }}>\n                Node Shape:\n            <span style={{ float: \"right\" }}>\n                  <Select\n                    items={[\n                      \"shape1\",\n                      \"shape2\",\n                      \"shape3\",\n                      \"shape4\",\n                      \"shape5\"\n                    ]}\n                    itemRenderer={CommonItemRenderer}\n                    filterable={false}\n                    onItemSelect={it => {\n                      console.log(it)//used for test\n                      // State.graph.overrideConfig.shape = it;\n                      // this.batchTwoLayerUpdate(\n                      //   State.graph.selectedNodes,\n                      //   \"shape\",\n                      //   it\n                      // );\n                    }\n                    }\n                  >\n                    {/* <Button text={State.graph.overrideConfig.shape} /> */}\n                    <Button text={\"change\"} />\n                    {/* upper is used for test */}\n                  </Select>\n                </span>\n              </p>\n              </section>\n            </div>\n          </SwitchCollapsable>\n        </div>\n      );\n    }\n  }\n);\n// export default SelectionPanel;","import React from \"react\";\nimport { Button, Classes, RangeSlider, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { runInAction } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport State from \"../../state\";\n// import { scales } from \"../../constants/index\";\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n  class GlobalPanel extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        timeOutRef: null,\n        sizeOptionOpen: false,\n        colorOptionOpen: false,\n        shapeOptionOpen: false\n      };\n    }\n\n    render() {\n      return (\n        <div>\n          {/* Collapsable Option: Color */}\n          <Collapsable\n            name=\"Color\"\n            isOpen={this.state.colorOptionOpen}\n            onToggle={() =>\n              this.setState({\n                colorOptionOpen: !this.state.colorOptionOpen\n              })\n            }\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* color : color by */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Color By:\n                <span style={{ float: \"right\" }}>\n                    <SimpleSelect\n                      items={[\"item1\", \"item2\"]\n                        // State.graph.allPropertiesKeyList\n                      }\n                      onSelect={it => (\n                        console.log(\"color:color by\")\n                        // State.graph.nodes.colorBy = it\n                      )\n                      }\n                      value={\"1\"//for test\n                        // State.graph.nodes.colorBy\n                      }\n                    />\n                  </span>\n                </p>\n              </section>\n\n              {/* color:scale type  */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale Type:\n                <span style={{ float: \"right\" }}>\n                    <SimpleSelect\n                      items={[\"item1\", \"item2\"]\n                        // Object.keys(scales)\n                      }\n                      onSelect={it => (console.log(\"color:scale type\")\n                        // State.graph.nodes.color.scale = it\n                      )\n                      }\n                      value={\"2\"\n                        // State.graph.nodes.color.scale\n                      }\n                    />\n                  </span>\n                </p>\n              </section>\n\n              {/* the gradient section in color */}\n              <section >\n                <p style={{ textAlign: \"left\" }}>Gradient: &nbsp;\n                <span style={{ float: \"right\" }}>\n                    {/* left colorpicker */}\n                    <Popover\n                      // placement=\"bottom\"\n                      // modifiers={{\n                      //   preventOverflow: {\n                      //     enabled: false,\n                      //   },\n                      // }}\n                      interactionKind={PopoverInteractionKind.CLICK}\n                      popoverClassName=\"bp3-popover-content-sizing\"\n                      position={\"auto\"}\n                    >\n                      <Button\n                        text=\"  \"\n                      // style={{\n                      //   // backgroundImage: \"inherit\",\n                      //   // backgroundColor: State.graph.nodes.color.from\n                      // }}\n                      />\n                      <SketchPicker\n                        color={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.from\n                        }\n                        onChange={\n                          console.log(\"gradient section first colorpicker onchange\")\n                          // it => (State.graph.nodes.color.from = it.hex)\n                        }\n                      />\n                    </Popover>\n                    {/* arrow  */}\n                    &nbsp; &#8594; &nbsp;\n                    {/* right colorpicker */}\n                    <Popover\n                      //previous!!\n                      // placement=\"bottom\"\n                      // modifiers={{\n                      //   preventOverflow: {\n                      //     enabled: false,\n                      //   },\n                      // }}\n                      interactionKind={PopoverInteractionKind.CLICK}\n                      popoverClassName=\"bp3-popover-content-sizing\"\n                      position={\"auto\"}\n                    >\n                      <Button\n                        text=\"  \"\n                        style={{\n                          backgroundImage: \"inherit\",\n                          // backgroundColor: State.graph.nodes.color.to\n                        }}\n                      />\n                      <SketchPicker\n                        color={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.to\n                        }\n                        onChange={\n                          console.log(\"gradient section second colorpicker onchange\")\n                          // it => (State.graph.nodes.color.to = it.hex)\n                        }\n                      />\n                    </Popover>\n                  </span>\n                </p>\n              </section>\n              {/* color : gradient preview */}\n              <section style={{ marginTop: \"-1em\" }}>\n                <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\n                  <defs>\n                    <linearGradient\n                      x1=\"0%\"\n                      y1=\"50%\"\n                      x2=\"100%\"\n                      y2=\"50%\"\n                      id=\"theGradient\"\n                    >\n                      <stop\n                        stopColor={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.from\n                        }\n                        stopOpacity=\"1\"\n                        offset=\"0%\"\n                      />\n                      <stop\n                        stopColor={\n                          \"#ffffff\"//used for test\n                          // State.graph.nodes.color.to\n                        }\n                        stopOpacity=\"1\"\n                        offset=\"100%\"\n                      />\n                    </linearGradient>\n                  </defs>\n                  <rect\n                    x=\"0\"\n                    y=\"0\"\n                    width=\"100%\"\n                    height=\"50\"\n                    fill=\"url(#theGradient)\"\n                  />\n                </svg>\n              </section>\n            </div>\n          </Collapsable>\n\n          {/* Collapsable Option: Size */}\n          <Collapsable\n            name=\"Size\"\n            isOpen={this.state.sizeOptionOpen}\n            onToggle={() =>\n              this.setState({\n                sizeOptionOpen: !this.state.sizeOptionOpen\n              })\n            }\n          >\n\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* size : scale by  */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale By:\n                <span style={{ float: \"right\" }}>\n                    <Select\n                      items={[\"item1\", \"item2\"]}\n                      itemRenderer={CommonItemRenderer}\n                      filterable={false}\n                      onItemSelect={\n                        console.log(\"size : scale by , component :select\")\n                        // it => (State.graph.nodes.sizeBy = it)\n                      }\n                    >\n                      <Button text={\"btn1\"\n                        // State.graph.nodes.sizeBy\n                      } />\n                    </Select>\n                  </span>\n                </p>\n              </section>\n              {/* size : scale type */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale Type:\n                <span style={{ float: \"right\" }}>\n                    <Select\n                      items={[\"item1\", \"item2\"]\n                        //Object.keys(scales)\n                      }\n                      itemRenderer={CommonItemRenderer}\n                      filterable={false}\n                      onItemSelect={\n                        console.log(\"size : scale type component: select\")\n                        // it => (State.graph.nodes.size.scale = it)\n                      }\n                    >\n                      <Button text={\"btn2\"\n                        // State.graph.nodes.size.scale\n                      } />\n                    </Select>\n                  </span>\n                </p>\n              </section>\n\n            Size Range:\n            <br />\n              <RangeSlider\n                min={1}\n                max={20}\n                stepSize={0.1}\n                labelStepSize={5}\n              // onChange={([a, b]) => {\n              //   runInAction(\"update scale\", () => {\n              //     State.graph.nodes.size.min = a;\n              //     State.graph.nodes.size.max = b;\n              //   });\n              // }}\n              // value={[\n              //   State.graph.nodes.size.min,\n              //   State.graph.nodes.size.max\n              // ]}\n              />\n            </div>\n          </Collapsable>\n\n          {/* Collapsable Option: Shape */}\n          <Collapsable\n            name=\"Shape\"\n            isOpen={this.state.shapeOptionOpen}\n            onToggle={() =>\n              this.setState({\n                shapeOptionOpen: !this.state.shapeOptionOpen\n              })\n            }\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* shape : node shape */}\n              <section> <p style={{ textAlign: \"left\" }}> Node Shape:\n              <span style={{ float: \"right\" }}>\n                  <Select\n                    items={[\n                      \"circle\",\n                      \"square\",\n                      \"triangle\",\n                      \"pentagon\",\n                      \"hexagon\",\n                      \"octagon\"\n                    ]}\n                    itemRenderer={CommonItemRenderer}\n                    filterable={false}\n                    onItemSelect={\n                      console.log(\" shape : node shape component: select\")\n                      // it => (State.graph.nodes.shape = it)\n                    }\n                  >\n                    <Button text={\"btn3\"\n                      // State.graph.nodes.shape\n                    } />\n                  </Select>\n                </span>\n              </p></section>\n            </div>\n          </Collapsable>\n          <br />\n          <small>\n\n            {/* {pluralize(\"node\", State.graph.overrides.size, true)}<span> </span> */}\n            {pluralize(\"node\", 0, true)}<span> </span>\n          have override styles.  &nbsp;\n          <Button className={\"pt-small\"} text=\"Clear\"\n            // onClick={() => (State.graph.overrides = new Map())} \n            />\n          </small>\n        </div>\n      );\n    }\n  }\n);\n// export default GlobalPanel;","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport State from \"../../state\";\nimport GlobalPanel from \"./GlobalPanel\";\nimport SelectionPanel from \"./SelectionPanel\";\n\nexport default observer(\n  class NodesPanel extends React.Component {\n    getRenderedNodes = () => {\n      if (State.graph.selectedNodes.length === 0) {\n        return (\n          <div>\n            <p>Modifying All Nodes</p>\n          </div>\n        );\n      }\n      return (\n        <p>{`Modifying ${pluralize(\n          \"Node\",\n          State.graph.selectedNodes.length,\n          true\n        )}`}</p>\n      );\n    };\n\n    render() {\n      return (\n        <div>\n          {this.getRenderedNodes()}\n          {State.graph.selectedNodes.length === 0 ? (\n            <GlobalPanel />\n          ) : (\n              <SelectionPanel />\n            )}\n        </div>\n      );\n    }\n  }\n);\n// export default NodesPanel;","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state/index\";\nimport ComponentRef from \"../ComponentRef\";\n\nexport default observer(\n    class NodeDetail extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n\n        cellRenderer_property = (rowIndex: number) => {\n            return <Cell>{State.graph.metadata.nodeProperties[rowIndex]}</Cell>;\n        };\n\n        cellRenderer_value = (rowIndex: number) => {\n            let data = State.graph.rawGraph.getNodeAttribute(\n                State.graph.currentlyHoveredId,\n                State.graph.metadata.nodeProperties[rowIndex]\n            );\n            return <Cell>{data}</Cell>;\n        };\n\n        formatLongFloat = (nodeAttributeValue: any) => {\n            const num = Number(nodeAttributeValue);\n            if (Number.isNaN(num) || num > 1 || num < 0) {\n                // Do not format just return original\n                return nodeAttributeValue;\n            }\n            // Format to no more than 3 significant digit.\n            return Number.parseFloat(num.toString()).toPrecision(3);\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"node-details-table\"\n                        )}\n                    >\n                        <Table\n                            numRows={State.graph.metadata.nodeProperties.length}\n                            enableRowHeader={false}\n                        >\n                            <Column\n                                name=\"Properties\"\n                                cellRenderer={this.cellRenderer_property}\n                            />\n                            <Column\n                                name=\"Value\"\n                                cellRenderer={this.cellRenderer_value}\n                            />\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.nodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    class MultipleNodeDetail extends React.Component {\n        render() {\n            const formatLongFloat = (nodeAttributeValue: any) => {\n                const num = Number(nodeAttributeValue);\n                if (Number.isNaN(num) || num > 1 || num < 0) {\n                    // Do not format just return original\n                    return nodeAttributeValue;\n                }\n                // Format to no more than 3 significant digit.\n                return Number.parseFloat(num.toString()).toPrecision(3);\n            };\n\n            return (\n                <div\n                    className={classnames(\n                        \"left-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"nodes-details-table\"\n                        )}\n                    >\n                        <Table numRows={State.graph.selectedNodes.length}>\n                            {State.graph.metadata.nodeProperties.map((it) => (\n                                <Column\n                                    key={it}\n                                    name={it}\n                                    cellRenderer={(i) => (\n                                        <Cell>\n                                            {State.graph.rawGraph.getNodeAttribute(\n                                                State.graph.selectedNodes[\n                                                    i\n                                                ] as string,\n                                                it as string\n                                            )}\n                                        </Cell>\n                                    )}\n                                />\n                            ))}\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.multiNodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { Classes, Tab, Tabs, Button } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\n// import { addNode } from \"../ipc/client\";\nimport NodesPanel from \"./panels/NodesPanel\";\nimport EdgesPanel from \"./panels/EdgesPanel\";\nimport LabelsPanel from \"./panels/LabelsPanel\";\nimport NodeDetail from \"./panels/NodeDetailPanel\";\nimport MultiDetailPanel from \"./panels/MultiDetailPanel\";\n// import Legends from \"./Legends\";\n// // import StatusBar from './StatusBar';\n// import SelectionActionPanel from \"./panels/SelectionActionPanel\";\n\n// TODO: migrate to simple select\n\nlet RenderOptionsCard = observer(\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <h2>Graph Options</h2>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n//\n\nexport default observer(\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.isRenderOptionsCardHidden = !State.preferences\n                .isRenderOptionsCardHidden;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"left-overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.isRenderOptionsCardHidden\n                                    ? this.optionsInvisible\n                                    : this.optionsVisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            ></Button>\n                            <br />\n                            <RenderOptionsCard />\n                        </div>\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.isRenderOptionsCardHidden\n                                        ? this.sideButtonVis\n                                        : this.sideButtonInv\n                                }\n                            ></Button>\n                        </div>\n                    </div>\n\n                    {/* single selected */}\n                    {/* {State.graph.selectedNodes.length === 1 && (\n                        <NodeDetail node={State.graph.currentlyHoveredId} />\n                    )} */}\n                    {State.graph.currentlyHoveredId != \"undefined\" &&\n                        State.graph.selectedNodes.length == 0 && <NodeDetail />}\n\n                    {/* multiple selected */}\n                    {/* {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n                        <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n                    )} */}\n                    {State.graph.selectedNodes.length != 0 && (\n                        <MultiDetailPanel />\n                    )}\n\n                    {/* <Legends />\n          <StatusBar /> */}\n                    {/* {// This menu only shows when there are nodes selected\n            State.graph.selectedNodes.length > 0 && !State.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\n          } */}\n                </div>\n            );\n        }\n    }\n);\n\n// export default FloatingCards;\n","import React from \"react\";\nimport { Provider } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    Classes,\n    FocusStyleManager,\n    NonIdealState,\n} from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/visualizer\";\n// import NodeDetail from \"./components/panels/NodeDetailPanel\";\nimport State from \"./state\";\nimport EdgesPanel from \"./components/panels/EdgesPanel\";\nimport LabelsPanel from \"./components/panels/LabelsPanel\";\nimport SelectionPanel from \"./components/panels/SelectionPanel\";\nimport GlobalPanel from \"./components/panels/GlobalPanel\";\n// import NodesPanel from \"./components/panels/NodesPanel\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}